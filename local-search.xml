<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>cloudflare 部署workers获取高速上网节点</title>
    <link href="/2025/06/15/cloudflare-%E9%83%A8%E7%BD%B2workers%E8%8E%B7%E5%8F%96%E9%AB%98%E9%80%9F%E4%B8%8A%E7%BD%91%E8%8A%82%E7%82%B9/"/>
    <url>/2025/06/15/cloudflare-%E9%83%A8%E7%BD%B2workers%E8%8E%B7%E5%8F%96%E9%AB%98%E9%80%9F%E4%B8%8A%E7%BD%91%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="CloudFlare部署Workers获取优选ip节点"><a href="#CloudFlare部署Workers获取优选ip节点" class="headerlink" title="CloudFlare部署Workers获取优选ip节点"></a><div style="text-align:center">CloudFlare部署Workers获取优选ip节点</div></h1><h3 id="1-注册Cloudflare账号"><a href="#1-注册Cloudflare账号" class="headerlink" title="1.注册Cloudflare账号"></a>1.注册Cloudflare账号</h3><p><a href="https://www.cloudflare.com"><br><br>  点我前往注册<br>  </a></p><h3 id="2-进入首页，点击计算-Workers-and-Pages"><a href="#2-进入首页，点击计算-Workers-and-Pages" class="headerlink" title="2.进入首页，点击计算-&gt;Workers and Pages"></a>2.进入首页，点击计算-&gt;Workers and Pages</h3><img src="/2025/06/15/cloudflare-%E9%83%A8%E7%BD%B2workers%E8%8E%B7%E5%8F%96%E9%AB%98%E9%80%9F%E4%B8%8A%E7%BD%91%E8%8A%82%E7%82%B9/1.png" class><h3 id="3-点击创建"><a href="#3-点击创建" class="headerlink" title="3.点击创建"></a>3.点击创建</h3><img src="/2025/06/15/cloudflare-%E9%83%A8%E7%BD%B2workers%E8%8E%B7%E5%8F%96%E9%AB%98%E9%80%9F%E4%B8%8A%E7%BD%91%E8%8A%82%E7%82%B9/2.png" class><h3 id="4-选择Workers-Hello-World"><a href="#4-选择Workers-Hello-World" class="headerlink" title="4.选择Workers-&gt;Hello World"></a>4.选择Workers-&gt;Hello World</h3><img src="/2025/06/15/cloudflare-%E9%83%A8%E7%BD%B2workers%E8%8E%B7%E5%8F%96%E9%AB%98%E9%80%9F%E4%B8%8A%E7%BD%91%E8%8A%82%E7%82%B9/3.png" class><h3 id="5-点击部署"><a href="#5-点击部署" class="headerlink" title="5.点击部署"></a>5.点击部署</h3><img src="/2025/06/15/cloudflare-%E9%83%A8%E7%BD%B2workers%E8%8E%B7%E5%8F%96%E9%AB%98%E9%80%9F%E4%B8%8A%E7%BD%91%E8%8A%82%E7%82%B9/4.png" class><h3 id="6-左上角编辑代码"><a href="#6-左上角编辑代码" class="headerlink" title="6.左上角编辑代码"></a>6.左上角编辑代码</h3><img src="/2025/06/15/cloudflare-%E9%83%A8%E7%BD%B2workers%E8%8E%B7%E5%8F%96%E9%AB%98%E9%80%9F%E4%B8%8A%E7%BD%91%E8%8A%82%E7%82%B9/5.png" class><h3 id="7-将下列代码复制进去-然后点击右上角部署"><a href="#7-将下列代码复制进去-然后点击右上角部署" class="headerlink" title="7.将下列代码复制进去,然后点击右上角部署"></a>7.将下列代码复制进去,然后点击右上角部署</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cloudflare:sockets&#x27;</span>;<br><br><span class="hljs-keyword">let</span> userID = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">let</span> proxyIP = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-comment">//let sub = &#x27;&#x27;;</span><br><span class="hljs-keyword">let</span> subConverter = <span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;U1VCQVBJLkNNTGl1c3Nzcy5uZXQ=&#x27;</span>);<br><span class="hljs-keyword">let</span> subConfig = <span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0FDTDRTU1IvQUNMNFNTUi9tYXN0ZXIvQ2xhc2gvY29uZmlnL0FDTDRTU1JfT25saW5lX01pbmlfTXVsdGlNb2RlLmluaQ==&#x27;</span>);<br><span class="hljs-keyword">let</span> subProtocol = <span class="hljs-string">&#x27;https&#x27;</span>;<br><span class="hljs-keyword">let</span> subEmoji = <span class="hljs-string">&#x27;true&#x27;</span>;<br><span class="hljs-keyword">let</span> socks5Address = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">let</span> parsedSocks5Address = &#123;&#125;;<br><span class="hljs-keyword">let</span> enableSocks = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">let</span> noTLS = <span class="hljs-string">&#x27;false&#x27;</span>;<br><span class="hljs-keyword">const</span> expire = <span class="hljs-number">4102329600</span>;<span class="hljs-comment">//2099-12-31</span><br><span class="hljs-keyword">let</span> proxyIPs;<br><span class="hljs-keyword">let</span> socks5s;<br><span class="hljs-keyword">let</span> go2Socks5s = [<br><span class="hljs-string">&#x27;*ttvnw.net&#x27;</span>,<br><span class="hljs-string">&#x27;*tapecontent.net&#x27;</span>,<br><span class="hljs-string">&#x27;*cloudatacdn.com&#x27;</span>,<br><span class="hljs-string">&#x27;*.loadshare.org&#x27;</span>,<br>];<br><span class="hljs-keyword">let</span> addresses = [];<br><span class="hljs-keyword">let</span> addressesapi = [];<br><span class="hljs-keyword">let</span> addressesnotls = [];<br><span class="hljs-keyword">let</span> addressesnotlsapi = [];<br><span class="hljs-keyword">let</span> addressescsv = [];<br><span class="hljs-keyword">let</span> <span class="hljs-variable constant_">DLS</span> = <span class="hljs-number">8</span>;<br><span class="hljs-keyword">let</span> remarkIndex = <span class="hljs-number">1</span>;<span class="hljs-comment">//CSV备注所在列偏移量</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">FileName</span> = <span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;ZWRnZXR1bm5lbA==&#x27;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">BotToken</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">ChatID</span>;<br><span class="hljs-keyword">let</span> proxyhosts = [];<br><span class="hljs-keyword">let</span> proxyhostsURL = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">RproxyIP</span> = <span class="hljs-string">&#x27;false&#x27;</span>;<br><span class="hljs-keyword">const</span> httpPorts = [<span class="hljs-string">&quot;8080&quot;</span>, <span class="hljs-string">&quot;8880&quot;</span>, <span class="hljs-string">&quot;2052&quot;</span>, <span class="hljs-string">&quot;2082&quot;</span>, <span class="hljs-string">&quot;2086&quot;</span>, <span class="hljs-string">&quot;2095&quot;</span>];<br><span class="hljs-keyword">let</span> httpsPorts = [<span class="hljs-string">&quot;2053&quot;</span>, <span class="hljs-string">&quot;2083&quot;</span>, <span class="hljs-string">&quot;2087&quot;</span>, <span class="hljs-string">&quot;2096&quot;</span>, <span class="hljs-string">&quot;8443&quot;</span>];<br><span class="hljs-keyword">let</span> 有效时间 = <span class="hljs-number">7</span>;<br><span class="hljs-keyword">let</span> 更新时间 = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">let</span> userIDLow;<br><span class="hljs-keyword">let</span> userIDTime = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">let</span> proxyIPPool = [];<br><span class="hljs-keyword">let</span> path = <span class="hljs-string">&#x27;/?ed=2560&#x27;</span>;<br><span class="hljs-keyword">let</span> 动态<span class="hljs-variable constant_">UUID</span>;<br><span class="hljs-keyword">let</span> link = [];<br><span class="hljs-keyword">let</span> banHosts = [<span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;c3BlZWQuY2xvdWRmbGFyZS5jb20=&#x27;</span>)];<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-params">request, env, ctx</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">UA</span> = request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;User-Agent&#x27;</span>) || <span class="hljs-string">&#x27;null&#x27;</span>;<br><span class="hljs-keyword">const</span> userAgent = <span class="hljs-variable constant_">UA</span>.<span class="hljs-title function_">toLowerCase</span>();<br>userID = env.<span class="hljs-property">UUID</span> || env.<span class="hljs-property">uuid</span> || env.<span class="hljs-property">PASSWORD</span> || env.<span class="hljs-property">pswd</span> || userID;<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">KEY</span> || env.<span class="hljs-property">TOKEN</span> || (userID &amp;&amp; !<span class="hljs-title function_">isValidUUID</span>(userID))) &#123;<br>动态<span class="hljs-variable constant_">UUID</span> = env.<span class="hljs-property">KEY</span> || env.<span class="hljs-property">TOKEN</span> || userID;<br>有效时间 = <span class="hljs-title class_">Number</span>(env.<span class="hljs-property">TIME</span>) || 有效时间;<br>更新时间 = <span class="hljs-title class_">Number</span>(env.<span class="hljs-property">UPTIME</span>) || 更新时间;<br><span class="hljs-keyword">const</span> userIDs = <span class="hljs-keyword">await</span> 生成动态<span class="hljs-title function_">UUID</span>(动态<span class="hljs-variable constant_">UUID</span>);<br>userID = userIDs[<span class="hljs-number">0</span>];<br>userIDLow = userIDs[<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-keyword">if</span> (!userID) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&#x27;请设置你的UUID变量，或尝试重试部署，检查变量是否生效？&#x27;</span>, &#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">404</span>,<br><span class="hljs-attr">headers</span>: &#123;<br><span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/plain;charset=utf-8&quot;</span>,<br>&#125;<br>&#125;);<br>&#125;<br><span class="hljs-keyword">const</span> currentDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>currentDate.<span class="hljs-title function_">setHours</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">const</span> timestamp = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(currentDate.<span class="hljs-title function_">getTime</span>() / <span class="hljs-number">1000</span>);<br><span class="hljs-keyword">const</span> fakeUserIDMD5 = <span class="hljs-keyword">await</span> 双重哈希(<span class="hljs-string">`<span class="hljs-subst">$&#123;userID&#125;</span><span class="hljs-subst">$&#123;timestamp&#125;</span>`</span>);<br><span class="hljs-keyword">const</span> fakeUserID = [<br>fakeUserIDMD5.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>),<br>fakeUserIDMD5.<span class="hljs-title function_">slice</span>(<span class="hljs-number">8</span>, <span class="hljs-number">12</span>),<br>fakeUserIDMD5.<span class="hljs-title function_">slice</span>(<span class="hljs-number">12</span>, <span class="hljs-number">16</span>),<br>fakeUserIDMD5.<span class="hljs-title function_">slice</span>(<span class="hljs-number">16</span>, <span class="hljs-number">20</span>),<br>fakeUserIDMD5.<span class="hljs-title function_">slice</span>(<span class="hljs-number">20</span>)<br>].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br><br><span class="hljs-keyword">const</span> fakeHostName = <span class="hljs-string">`<span class="hljs-subst">$&#123;fakeUserIDMD5.slice(<span class="hljs-number">6</span>, <span class="hljs-number">9</span>)&#125;</span>.<span class="hljs-subst">$&#123;fakeUserIDMD5.slice(<span class="hljs-number">13</span>, <span class="hljs-number">19</span>)&#125;</span>`</span>;<br><br>proxyIP = env.<span class="hljs-property">PROXYIP</span> || env.<span class="hljs-property">proxyip</span> || proxyIP;<br>proxyIPs = <span class="hljs-keyword">await</span> 整理(proxyIP);<br>proxyIP = proxyIPs[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * proxyIPs.<span class="hljs-property">length</span>)];<br><br>socks5Address = env.<span class="hljs-property">SOCKS5</span> || socks5Address;<br>socks5s = <span class="hljs-keyword">await</span> 整理(socks5Address);<br>socks5Address = socks5s[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * socks5s.<span class="hljs-property">length</span>)];<br>socks5Address = socks5Address.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;//&#x27;</span>)[<span class="hljs-number">1</span>] || socks5Address;<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">GO2SOCKS5</span>) go2Socks5s = <span class="hljs-keyword">await</span> 整理(env.<span class="hljs-property">GO2SOCKS5</span>);<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">CFPORTS</span>) httpsPorts = <span class="hljs-keyword">await</span> 整理(env.<span class="hljs-property">CFPORTS</span>);<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">BAN</span>) banHosts = <span class="hljs-keyword">await</span> 整理(env.<span class="hljs-property">BAN</span>);<br><span class="hljs-keyword">if</span> (socks5Address) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>parsedSocks5Address = <span class="hljs-title function_">socks5AddressParser</span>(socks5Address);<br><span class="hljs-title class_">RproxyIP</span> = env.<span class="hljs-property">RPROXYIP</span> || <span class="hljs-string">&#x27;false&#x27;</span>;<br>enableSocks = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (err) &#123;<br><span class="hljs-keyword">let</span> e = err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-title function_">toString</span>());<br><span class="hljs-title class_">RproxyIP</span> = env.<span class="hljs-property">RPROXYIP</span> || !proxyIP ? <span class="hljs-string">&#x27;true&#x27;</span> : <span class="hljs-string">&#x27;false&#x27;</span>;<br>enableSocks = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title class_">RproxyIP</span> = env.<span class="hljs-property">RPROXYIP</span> || !proxyIP ? <span class="hljs-string">&#x27;true&#x27;</span> : <span class="hljs-string">&#x27;false&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> upgradeHeader = request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;Upgrade&#x27;</span>);<br><span class="hljs-keyword">const</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(request.<span class="hljs-property">url</span>);<br><span class="hljs-keyword">if</span> (!upgradeHeader || upgradeHeader !== <span class="hljs-string">&#x27;websocket&#x27;</span>) &#123;<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">ADD</span>) addresses = <span class="hljs-keyword">await</span> 整理(env.<span class="hljs-property">ADD</span>);<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">ADDAPI</span>) addressesapi = <span class="hljs-keyword">await</span> 整理(env.<span class="hljs-property">ADDAPI</span>);<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">ADDNOTLS</span>) addressesnotls = <span class="hljs-keyword">await</span> 整理(env.<span class="hljs-property">ADDNOTLS</span>);<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">ADDNOTLSAPI</span>) addressesnotlsapi = <span class="hljs-keyword">await</span> 整理(env.<span class="hljs-property">ADDNOTLSAPI</span>);<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">ADDCSV</span>) addressescsv = <span class="hljs-keyword">await</span> 整理(env.<span class="hljs-property">ADDCSV</span>);<br><span class="hljs-variable constant_">DLS</span> = <span class="hljs-title class_">Number</span>(env.<span class="hljs-property">DLS</span>) || <span class="hljs-variable constant_">DLS</span>;<br>remarkIndex = <span class="hljs-title class_">Number</span>(env.<span class="hljs-property">CSVREMARK</span>) || remarkIndex;<br><span class="hljs-title class_">BotToken</span> = env.<span class="hljs-property">TGTOKEN</span> || <span class="hljs-title class_">BotToken</span>;<br><span class="hljs-title class_">ChatID</span> = env.<span class="hljs-property">TGID</span> || <span class="hljs-title class_">ChatID</span>;<br><span class="hljs-title class_">FileName</span> = env.<span class="hljs-property">SUBNAME</span> || <span class="hljs-title class_">FileName</span>;<br>subEmoji = env.<span class="hljs-property">SUBEMOJI</span> || env.<span class="hljs-property">EMOJI</span> || subEmoji;<br><span class="hljs-keyword">if</span> (subEmoji == <span class="hljs-string">&#x27;0&#x27;</span>) subEmoji = <span class="hljs-string">&#x27;false&#x27;</span>;<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">LINK</span>) link = <span class="hljs-keyword">await</span> 整理(env.<span class="hljs-property">LINK</span>);<br><span class="hljs-keyword">let</span> sub = env.<span class="hljs-property">SUB</span> || <span class="hljs-string">&#x27;&#x27;</span>;<br>subConverter = env.<span class="hljs-property">SUBAPI</span> || subConverter;<br><span class="hljs-keyword">if</span> (subConverter.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;http://&quot;</span>)) &#123;<br>subConverter = subConverter.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">1</span>];<br>subProtocol = <span class="hljs-string">&#x27;http&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>subConverter = subConverter.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">1</span>] || subConverter;<br>&#125;<br>subConfig = env.<span class="hljs-property">SUBCONFIG</span> || subConfig;<br><span class="hljs-keyword">if</span> (url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;sub&#x27;</span>) &amp;&amp; url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;sub&#x27;</span>) !== <span class="hljs-string">&#x27;&#x27;</span>) sub = url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;sub&#x27;</span>);<br><span class="hljs-keyword">if</span> (url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;notls&#x27;</span>)) noTLS = <span class="hljs-string">&#x27;true&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;proxyip&#x27;</span>)) &#123;<br>path = <span class="hljs-string">`/?ed=2560&amp;proxyip=<span class="hljs-subst">$&#123;url.searchParams.get(<span class="hljs-string">&#x27;proxyip&#x27;</span>)&#125;</span>`</span>;<br><span class="hljs-title class_">RproxyIP</span> = <span class="hljs-string">&#x27;false&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;socks5&#x27;</span>)) &#123;<br>path = <span class="hljs-string">`/?ed=2560&amp;socks5=<span class="hljs-subst">$&#123;url.searchParams.get(<span class="hljs-string">&#x27;socks5&#x27;</span>)&#125;</span>`</span>;<br><span class="hljs-title class_">RproxyIP</span> = <span class="hljs-string">&#x27;false&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;socks&#x27;</span>)) &#123;<br>path = <span class="hljs-string">`/?ed=2560&amp;socks5=<span class="hljs-subst">$&#123;url.searchParams.get(<span class="hljs-string">&#x27;socks&#x27;</span>)&#125;</span>`</span>;<br><span class="hljs-title class_">RproxyIP</span> = <span class="hljs-string">&#x27;false&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> 路径 = url.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">toLowerCase</span>();<br><span class="hljs-keyword">if</span> (路径 == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">URL302</span>) <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(env.<span class="hljs-property">URL302</span>, <span class="hljs-number">302</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (env.<span class="hljs-property">URL</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> 代理<span class="hljs-title function_">URL</span>(env.<span class="hljs-property">URL</span>, url);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(request.<span class="hljs-property">cf</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">4</span>), &#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br><span class="hljs-attr">headers</span>: &#123;<br><span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>&#125;,<br>&#125;);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (路径 == <span class="hljs-string">`/<span class="hljs-subst">$&#123;fakeUserID&#125;</span>`</span>) &#123;<br><span class="hljs-keyword">const</span> fakeConfig = <span class="hljs-keyword">await</span> 生成配置信息(userID, request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;Host&#x27;</span>), sub, <span class="hljs-string">&#x27;CF-Workers-SUB&#x27;</span>, <span class="hljs-title class_">RproxyIP</span>, url, fakeUserID, fakeHostName, env);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;fakeConfig&#125;</span>`</span>, &#123; <span class="hljs-attr">status</span>: <span class="hljs-number">200</span> &#125;);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.<span class="hljs-property">pathname</span> == <span class="hljs-string">`/<span class="hljs-subst">$&#123;动态UUID&#125;</span>/edit`</span> || 路径 == <span class="hljs-string">`/<span class="hljs-subst">$&#123;userID&#125;</span>/edit`</span>) &#123;<br><span class="hljs-keyword">const</span> html = <span class="hljs-keyword">await</span> <span class="hljs-title function_">KV</span>(request, env);<br><span class="hljs-keyword">return</span> html;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.<span class="hljs-property">pathname</span> == <span class="hljs-string">`/<span class="hljs-subst">$&#123;动态UUID&#125;</span>`</span> || 路径 == <span class="hljs-string">`/<span class="hljs-subst">$&#123;userID&#125;</span>`</span>) &#123;<br><span class="hljs-keyword">await</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-string">`#获取订阅 <span class="hljs-subst">$&#123;FileName&#125;</span>`</span>, request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;CF-Connecting-IP&#x27;</span>), <span class="hljs-string">`UA: <span class="hljs-subst">$&#123;UA&#125;</span>&lt;/tg-spoiler&gt;\n域名: <span class="hljs-subst">$&#123;url.hostname&#125;</span>\n&lt;tg-spoiler&gt;入口: <span class="hljs-subst">$&#123;url.pathname + url.search&#125;</span>&lt;/tg-spoiler&gt;`</span>);<br><span class="hljs-keyword">const</span> 维列斯<span class="hljs-title class_">Config</span> = <span class="hljs-keyword">await</span> 生成配置信息(userID, request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;Host&#x27;</span>), sub, <span class="hljs-variable constant_">UA</span>, <span class="hljs-title class_">RproxyIP</span>, url, fakeUserID, fakeHostName, env);<br><span class="hljs-keyword">const</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br><span class="hljs-comment">//const timestamp = Math.floor(now / 1000);</span><br><span class="hljs-keyword">const</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(now);<br>today.<span class="hljs-title function_">setHours</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">UD</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(((now - today.<span class="hljs-title function_">getTime</span>()) / <span class="hljs-number">86400000</span>) * <span class="hljs-number">24</span> * <span class="hljs-number">1099511627776</span> / <span class="hljs-number">2</span>);<br><span class="hljs-keyword">let</span> pagesSum = <span class="hljs-variable constant_">UD</span>;<br><span class="hljs-keyword">let</span> workersSum = <span class="hljs-variable constant_">UD</span>;<br><span class="hljs-keyword">let</span> total = <span class="hljs-number">24</span> * <span class="hljs-number">1099511627776</span>;<br><br><span class="hljs-keyword">if</span> (userAgent &amp;&amp; userAgent.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;mozilla&#x27;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(维列斯<span class="hljs-title class_">Config</span>, &#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br><span class="hljs-attr">headers</span>: &#123;<br><span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>,<br><span class="hljs-string">&quot;Profile-Update-Interval&quot;</span>: <span class="hljs-string">&quot;6&quot;</span>,<br><span class="hljs-string">&quot;Subscription-Userinfo&quot;</span>: <span class="hljs-string">`upload=<span class="hljs-subst">$&#123;pagesSum&#125;</span>; download=<span class="hljs-subst">$&#123;workersSum&#125;</span>; total=<span class="hljs-subst">$&#123;total&#125;</span>; expire=<span class="hljs-subst">$&#123;expire&#125;</span>`</span>,<br><span class="hljs-string">&quot;Cache-Control&quot;</span>: <span class="hljs-string">&quot;no-store&quot;</span>,<br>&#125;<br>&#125;);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(维列斯<span class="hljs-title class_">Config</span>, &#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br><span class="hljs-attr">headers</span>: &#123;<br><span class="hljs-string">&quot;Content-Disposition&quot;</span>: <span class="hljs-string">`attachment; filename=<span class="hljs-subst">$&#123;FileName&#125;</span>; filename*=utf-8&#x27;&#x27;<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(FileName)&#125;</span>`</span>,<br><span class="hljs-comment">//&quot;Content-Type&quot;: &quot;text/plain;charset=utf-8&quot;,</span><br><span class="hljs-string">&quot;Profile-Update-Interval&quot;</span>: <span class="hljs-string">&quot;6&quot;</span>,<br><span class="hljs-string">&quot;Subscription-Userinfo&quot;</span>: <span class="hljs-string">`upload=<span class="hljs-subst">$&#123;pagesSum&#125;</span>; download=<span class="hljs-subst">$&#123;workersSum&#125;</span>; total=<span class="hljs-subst">$&#123;total&#125;</span>; expire=<span class="hljs-subst">$&#123;expire&#125;</span>`</span>,<br>&#125;<br>&#125;);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">URL302</span>) <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(env.<span class="hljs-property">URL302</span>, <span class="hljs-number">302</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (env.<span class="hljs-property">URL</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> 代理<span class="hljs-title function_">URL</span>(env.<span class="hljs-property">URL</span>, url);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&#x27;不用怀疑！你UUID就是错的！！！&#x27;</span>, &#123; <span class="hljs-attr">status</span>: <span class="hljs-number">404</span> &#125;);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>socks5Address = url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;socks5&#x27;</span>) || socks5Address;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;/socks5=&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>).<span class="hljs-title function_">test</span>(url.<span class="hljs-property">pathname</span>)) socks5Address = url.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;5=&#x27;</span>)[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;/socks://&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>).<span class="hljs-title function_">test</span>(url.<span class="hljs-property">pathname</span>) || <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;/socks5://&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>).<span class="hljs-title function_">test</span>(url.<span class="hljs-property">pathname</span>)) &#123;<br>socks5Address = url.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;://&#x27;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;#&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">if</span> (socks5Address.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;@&#x27;</span>)) &#123;<br><span class="hljs-keyword">let</span> userPassword = socks5Address.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;@&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">const</span> base64Regex = <span class="hljs-regexp">/^(?:[A-Z0-9+/]&#123;4&#125;)*(?:[A-Z0-9+/]&#123;2&#125;==|[A-Z0-9+/]&#123;3&#125;=)?$/i</span>;<br><span class="hljs-keyword">if</span> (base64Regex.<span class="hljs-title function_">test</span>(userPassword) &amp;&amp; !userPassword.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;:&#x27;</span>)) userPassword = <span class="hljs-title function_">atob</span>(userPassword);<br>socks5Address = <span class="hljs-string">`<span class="hljs-subst">$&#123;userPassword&#125;</span>@<span class="hljs-subst">$&#123;socks5Address.split(<span class="hljs-string">&#x27;@&#x27;</span>)[<span class="hljs-number">1</span>]&#125;</span>`</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (socks5Address) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>parsedSocks5Address = <span class="hljs-title function_">socks5AddressParser</span>(socks5Address);<br>enableSocks = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (err) &#123;<br><span class="hljs-keyword">let</span> e = err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-title function_">toString</span>());<br>enableSocks = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>enableSocks = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;proxyip&#x27;</span>)) &#123;<br>proxyIP = url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;proxyip&#x27;</span>);<br>enableSocks = <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;/proxyip=&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>).<span class="hljs-title function_">test</span>(url.<span class="hljs-property">pathname</span>)) &#123;<br>proxyIP = url.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/proxyip=&#x27;</span>)[<span class="hljs-number">1</span>];<br>enableSocks = <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;/proxyip.&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>).<span class="hljs-title function_">test</span>(url.<span class="hljs-property">pathname</span>)) &#123;<br>proxyIP = <span class="hljs-string">`proxyip.<span class="hljs-subst">$&#123;url.pathname.toLowerCase().split(<span class="hljs-string">&quot;/proxyip.&quot;</span>)[<span class="hljs-number">1</span>]&#125;</span>`</span>;<br>enableSocks = <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;/pyip=&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>).<span class="hljs-title function_">test</span>(url.<span class="hljs-property">pathname</span>)) &#123;<br>proxyIP = url.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/pyip=&#x27;</span>)[<span class="hljs-number">1</span>];<br>enableSocks = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> 维列斯<span class="hljs-title class_">OverWSHandler</span>(request);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (err) &#123;<br><span class="hljs-keyword">let</span> e = err;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(e.<span class="hljs-title function_">toString</span>());<br>&#125;<br>&#125;,<br>&#125;;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> 维列斯<span class="hljs-title class_">OverWSHandler</span>(request) &#123;<br><br><span class="hljs-comment">// @ts-ignore</span><br><span class="hljs-keyword">const</span> webSocketPair = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketPair</span>();<br><span class="hljs-keyword">const</span> [client, webSocket] = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(webSocketPair);<br><br><span class="hljs-comment">// 接受 WebSocket 连接</span><br>webSocket.<span class="hljs-title function_">accept</span>();<br><br><span class="hljs-keyword">let</span> address = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">let</span> portWithRandomLog = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-comment">// 日志函数，用于记录连接信息</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">log</span> = (<span class="hljs-params"><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">string</span>&#125; */</span> info, <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">string | undefined</span>&#125; */</span> event</span>) =&gt; &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`[<span class="hljs-subst">$&#123;address&#125;</span>:<span class="hljs-subst">$&#123;portWithRandomLog&#125;</span>] <span class="hljs-subst">$&#123;info&#125;</span>`</span>, event || <span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;;<br><span class="hljs-comment">// 获取早期数据头部，可能包含了一些初始化数据</span><br><span class="hljs-keyword">const</span> earlyDataHeader = request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;sec-websocket-protocol&#x27;</span>) || <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-comment">// 创建一个可读的 WebSocket 流，用于接收客户端数据</span><br><span class="hljs-keyword">const</span> readableWebSocketStream = <span class="hljs-title function_">makeReadableWebSocketStream</span>(webSocket, earlyDataHeader, log);<br><br><span class="hljs-comment">// 用于存储远程 Socket 的包装器</span><br><span class="hljs-keyword">let</span> remoteSocketWapper = &#123;<br><span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>,<br>&#125;;<br><span class="hljs-comment">// 标记是否为 DNS 查询</span><br><span class="hljs-keyword">let</span> isDns = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// WebSocket 数据流向远程服务器的管道</span><br>readableWebSocketStream.<span class="hljs-title function_">pipeTo</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WritableStream</span>(&#123;<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">chunk, controller</span>) &#123;<br><span class="hljs-keyword">if</span> (isDns) &#123;<br><span class="hljs-comment">// 如果是 DNS 查询，调用 DNS 处理函数</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-title function_">handleDNSQuery</span>(chunk, webSocket, <span class="hljs-literal">null</span>, log);<br>&#125;<br><span class="hljs-keyword">if</span> (remoteSocketWapper.<span class="hljs-property">value</span>) &#123;<br><span class="hljs-comment">// 如果已有远程 Socket，直接写入数据</span><br><span class="hljs-keyword">const</span> writer = remoteSocketWapper.<span class="hljs-property">value</span>.<span class="hljs-property">writable</span>.<span class="hljs-title function_">getWriter</span>()<br><span class="hljs-keyword">await</span> writer.<span class="hljs-title function_">write</span>(chunk);<br>writer.<span class="hljs-title function_">releaseLock</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 处理 维列斯 协议头部</span><br><span class="hljs-keyword">const</span> &#123;<br>hasError,<br>message,<br>addressType,<br>portRemote = <span class="hljs-number">443</span>,<br>addressRemote = <span class="hljs-string">&#x27;&#x27;</span>,<br>rawDataIndex,<br>维列斯<span class="hljs-title class_">Version</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]),<br>isUDP,<br>&#125; = process维列斯<span class="hljs-title class_">Header</span>(chunk, userID);<br><span class="hljs-comment">// 设置地址和端口信息，用于日志</span><br>address = addressRemote;<br>portWithRandomLog = <span class="hljs-string">`<span class="hljs-subst">$&#123;portRemote&#125;</span>--<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.random()&#125;</span> <span class="hljs-subst">$&#123;isUDP ? <span class="hljs-string">&#x27;udp &#x27;</span> : <span class="hljs-string">&#x27;tcp &#x27;</span>&#125;</span> `</span>;<br><span class="hljs-keyword">if</span> (hasError) &#123;<br><span class="hljs-comment">// 如果有错误，抛出异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(message);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 如果是 UDP 且端口不是 DNS 端口（53），则关闭连接</span><br><span class="hljs-keyword">if</span> (isUDP) &#123;<br><span class="hljs-keyword">if</span> (portRemote === <span class="hljs-number">53</span>) &#123;<br>isDns = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;UDP 代理仅对 DNS（53 端口）启用&#x27;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 构建 维列斯 响应头部</span><br><span class="hljs-keyword">const</span> 维列斯<span class="hljs-title class_">ResponseHeader</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([维列斯<span class="hljs-title class_">Version</span>[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>]);<br><span class="hljs-comment">// 获取实际的客户端数据</span><br><span class="hljs-keyword">const</span> rawClientData = chunk.<span class="hljs-title function_">slice</span>(rawDataIndex);<br><br><span class="hljs-keyword">if</span> (isDns) &#123;<br><span class="hljs-comment">// 如果是 DNS 查询，调用 DNS 处理函数</span><br><span class="hljs-keyword">return</span> <span class="hljs-title function_">handleDNSQuery</span>(rawClientData, webSocket, 维列斯<span class="hljs-title class_">ResponseHeader</span>, log);<br>&#125;<br><span class="hljs-comment">// 处理 TCP 出站连接</span><br><span class="hljs-keyword">if</span> (!banHosts.<span class="hljs-title function_">includes</span>(addressRemote)) &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">`处理 TCP 出站连接 <span class="hljs-subst">$&#123;addressRemote&#125;</span>:<span class="hljs-subst">$&#123;portRemote&#125;</span>`</span>);<br><span class="hljs-title function_">handleTCPOutBound</span>(remoteSocketWapper, addressType, addressRemote, portRemote, rawClientData, webSocket, 维列斯<span class="hljs-title class_">ResponseHeader</span>, log);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`黑名单关闭 TCP 出站连接 <span class="hljs-subst">$&#123;addressRemote&#125;</span>:<span class="hljs-subst">$&#123;portRemote&#125;</span>`</span>);<br>&#125;<br>&#125;,<br><span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">`readableWebSocketStream 已关闭`</span>);<br>&#125;,<br><span class="hljs-title function_">abort</span>(<span class="hljs-params">reason</span>) &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">`readableWebSocketStream 已中止`</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(reason));<br>&#125;,<br>&#125;)).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;readableWebSocketStream 管道错误&#x27;</span>, err);<br>&#125;);<br><br><span class="hljs-comment">// 返回一个 WebSocket 升级的响应</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-literal">null</span>, &#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">101</span>,<br><span class="hljs-comment">// @ts-ignore</span><br><span class="hljs-attr">webSocket</span>: client,<br>&#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleTCPOutBound</span>(<span class="hljs-params">remoteSocket, addressType, addressRemote, portRemote, rawClientData, webSocket, 维列斯ResponseHeader, log,</span>) &#123;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useSocks5Pattern</span>(<span class="hljs-params">address</span>) &#123;<br><span class="hljs-keyword">if</span> (go2Socks5s.<span class="hljs-title function_">includes</span>(<span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;YWxsIGlu&#x27;</span>)) || go2Socks5s.<span class="hljs-title function_">includes</span>(<span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;Kg==&#x27;</span>))) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> go2Socks5s.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">pattern</span> =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> regexPattern = pattern.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\*/g</span>, <span class="hljs-string">&#x27;.*&#x27;</span>);<br><span class="hljs-keyword">let</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">`^<span class="hljs-subst">$&#123;regexPattern&#125;</span>$`</span>, <span class="hljs-string">&#x27;i&#x27;</span>);<br><span class="hljs-keyword">return</span> regex.<span class="hljs-title function_">test</span>(address);<br>&#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">connectAndWrite</span>(<span class="hljs-params">address, port, socks = <span class="hljs-literal">false</span></span>) &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">`connected to <span class="hljs-subst">$&#123;address&#125;</span>:<span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br><span class="hljs-comment">//if (/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(address)) address = `$&#123;atob(&#x27;d3d3Lg==&#x27;)&#125;$&#123;address&#125;$&#123;atob(&#x27;LmlwLjA5MDIyNy54eXo=&#x27;)&#125;`;</span><br><span class="hljs-comment">// 如果指定使用 SOCKS5 代理，则通过 SOCKS5 协议连接；否则直接连接</span><br><span class="hljs-keyword">const</span> tcpSocket = socks ? <span class="hljs-keyword">await</span> <span class="hljs-title function_">socks5Connect</span>(addressType, address, port, log)<br>: <span class="hljs-title function_">connect</span>(&#123;<br><span class="hljs-attr">hostname</span>: address,<br><span class="hljs-attr">port</span>: port,<br>&#125;);<br>remoteSocket.<span class="hljs-property">value</span> = tcpSocket;<br><span class="hljs-comment">//log(`connected to $&#123;address&#125;:$&#123;port&#125;`);</span><br><span class="hljs-keyword">const</span> writer = tcpSocket.<span class="hljs-property">writable</span>.<span class="hljs-title function_">getWriter</span>();<br><span class="hljs-comment">// 首次写入，通常是 TLS 客户端 Hello 消息</span><br><span class="hljs-keyword">await</span> writer.<span class="hljs-title function_">write</span>(rawClientData);<br>writer.<span class="hljs-title function_">releaseLock</span>();<br><span class="hljs-keyword">return</span> tcpSocket;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 重试函数：当 Cloudflare 的 TCP Socket 没有传入数据时，我们尝试重定向 IP</span><br><span class="hljs-comment"> * 这可能是因为某些网络问题导致的连接失败</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">retry</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (enableSocks) &#123;<br><span class="hljs-comment">// 如果启用了 SOCKS5，通过 SOCKS5 代理重试连接</span><br>tcpSocket = <span class="hljs-keyword">await</span> <span class="hljs-title function_">connectAndWrite</span>(addressRemote, portRemote, <span class="hljs-literal">true</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 否则，尝试使用预设的代理 IP（如果有）或原始地址重试连接</span><br><span class="hljs-keyword">if</span> (!proxyIP || proxyIP == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>proxyIP = <span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;UFJPWFlJUC50cDEuMDkwMjI3Lnh5eg==&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (proxyIP.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;]:&#x27;</span>)) &#123;<br>portRemote = proxyIP.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;]:&#x27;</span>)[<span class="hljs-number">1</span>] || portRemote;<br>proxyIP = proxyIP.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;]:&#x27;</span>)[<span class="hljs-number">0</span>] || proxyIP;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (proxyIP.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>).<span class="hljs-property">length</span> === <span class="hljs-number">2</span>) &#123;<br>portRemote = proxyIP.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">1</span>] || portRemote;<br>proxyIP = proxyIP.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">0</span>] || proxyIP;<br>&#125;<br><span class="hljs-keyword">if</span> (proxyIP.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;.tp&#x27;</span>)) portRemote = proxyIP.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.tp&#x27;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>] || portRemote;<br>tcpSocket = <span class="hljs-keyword">await</span> <span class="hljs-title function_">connectAndWrite</span>(proxyIP || addressRemote, portRemote);<br>&#125;<br><span class="hljs-comment">// 无论重试是否成功，都要关闭 WebSocket（可能是为了重新建立连接）</span><br>tcpSocket.<span class="hljs-property">closed</span>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;retry tcpSocket closed error&#x27;</span>, error);<br>&#125;).<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">safeCloseWebSocket</span>(webSocket);<br>&#125;)<br><span class="hljs-comment">// 建立从远程 Socket 到 WebSocket 的数据流</span><br><span class="hljs-title function_">remoteSocketToWS</span>(tcpSocket, webSocket, 维列斯<span class="hljs-title class_">ResponseHeader</span>, <span class="hljs-literal">null</span>, log);<br>&#125;<br><br><span class="hljs-keyword">let</span> useSocks = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (go2Socks5s.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; enableSocks) useSocks = <span class="hljs-keyword">await</span> <span class="hljs-title function_">useSocks5Pattern</span>(addressRemote);<br><span class="hljs-comment">// 首次尝试连接远程服务器</span><br><span class="hljs-keyword">let</span> tcpSocket = <span class="hljs-keyword">await</span> <span class="hljs-title function_">connectAndWrite</span>(addressRemote, portRemote, useSocks);<br><br><span class="hljs-comment">// 当远程 Socket 就绪时，将其传递给 WebSocket</span><br><span class="hljs-comment">// 建立从远程服务器到 WebSocket 的数据流，用于将远程服务器的响应发送回客户端</span><br><span class="hljs-comment">// 如果连接失败或无数据，retry 函数将被调用进行重试</span><br><span class="hljs-title function_">remoteSocketToWS</span>(tcpSocket, webSocket, 维列斯<span class="hljs-title class_">ResponseHeader</span>, retry, log);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeReadableWebSocketStream</span>(<span class="hljs-params">webSocketServer, earlyDataHeader, log</span>) &#123;<br><span class="hljs-comment">// 标记可读流是否已被取消</span><br><span class="hljs-keyword">let</span> readableStreamCancel = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 创建一个新的可读流</span><br><span class="hljs-keyword">const</span> stream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadableStream</span>(&#123;<br><span class="hljs-comment">// 当流开始时的初始化函数</span><br><span class="hljs-title function_">start</span>(<span class="hljs-params">controller</span>) &#123;<br><span class="hljs-comment">// 监听 WebSocket 的消息事件</span><br>webSocketServer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 如果流已被取消，不再处理新消息</span><br><span class="hljs-keyword">if</span> (readableStreamCancel) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">const</span> message = event.<span class="hljs-property">data</span>;<br><span class="hljs-comment">// 将消息加入流的队列中</span><br>controller.<span class="hljs-title function_">enqueue</span>(message);<br>&#125;);<br><br><span class="hljs-comment">// 监听 WebSocket 的关闭事件</span><br><span class="hljs-comment">// 注意：这个事件意味着客户端关闭了客户端 -&gt; 服务器的流</span><br><span class="hljs-comment">// 但是，服务器 -&gt; 客户端的流仍然打开，直到在服务器端调用 close()</span><br><span class="hljs-comment">// WebSocket 协议要求在每个方向上都要发送单独的关闭消息，以完全关闭 Socket</span><br>webSocketServer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">// 客户端发送了关闭信号，需要关闭服务器端</span><br><span class="hljs-title function_">safeCloseWebSocket</span>(webSocketServer);<br><span class="hljs-comment">// 如果流未被取消，则关闭控制器</span><br><span class="hljs-keyword">if</span> (readableStreamCancel) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>controller.<span class="hljs-title function_">close</span>();<br>&#125;);<br><br><span class="hljs-comment">// 监听 WebSocket 的错误事件</span><br>webSocketServer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;WebSocket 服务器发生错误&#x27;</span>);<br><span class="hljs-comment">// 将错误传递给控制器</span><br>controller.<span class="hljs-title function_">error</span>(err);<br>&#125;);<br><br><span class="hljs-comment">// 处理 WebSocket 0-RTT（零往返时间）的早期数据</span><br><span class="hljs-comment">// 0-RTT 允许在完全建立连接之前发送数据，提高了效率</span><br><span class="hljs-keyword">const</span> &#123; earlyData, error &#125; = <span class="hljs-title function_">base64ToArrayBuffer</span>(earlyDataHeader);<br><span class="hljs-keyword">if</span> (error) &#123;<br><span class="hljs-comment">// 如果解码早期数据时出错，将错误传递给控制器</span><br>controller.<span class="hljs-title function_">error</span>(error);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (earlyData) &#123;<br><span class="hljs-comment">// 如果有早期数据，将其加入流的队列中</span><br>controller.<span class="hljs-title function_">enqueue</span>(earlyData);<br>&#125;<br>&#125;,<br><br><span class="hljs-comment">// 当使用者从流中拉取数据时调用</span><br><span class="hljs-title function_">pull</span>(<span class="hljs-params">controller</span>) &#123;<br><span class="hljs-comment">// 这里可以实现反压机制</span><br><span class="hljs-comment">// 如果 WebSocket 可以在流满时停止读取，我们就可以实现反压</span><br><span class="hljs-comment">// 参考：https://streams.spec.whatwg.org/#example-rs-push-backpressure</span><br>&#125;,<br><br><span class="hljs-comment">// 当流被取消时调用</span><br><span class="hljs-title function_">cancel</span>(<span class="hljs-params">reason</span>) &#123;<br><span class="hljs-comment">// 流被取消的几种情况：</span><br><span class="hljs-comment">// 1. 当管道的 WritableStream 有错误时，这个取消函数会被调用，所以在这里处理 WebSocket 服务器的关闭</span><br><span class="hljs-comment">// 2. 如果 ReadableStream 被取消，所有 controller.close/enqueue 都需要跳过</span><br><span class="hljs-comment">// 3. 但是经过测试，即使 ReadableStream 被取消，controller.error 仍然有效</span><br><span class="hljs-keyword">if</span> (readableStreamCancel) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">`可读流被取消，原因是 <span class="hljs-subst">$&#123;reason&#125;</span>`</span>);<br>readableStreamCancel = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// 安全地关闭 WebSocket</span><br><span class="hljs-title function_">safeCloseWebSocket</span>(webSocketServer);<br>&#125;<br>&#125;);<br><br><span class="hljs-keyword">return</span> stream;<br>&#125;<br><br><span class="hljs-comment">// https://xtls.github.io/development/protocols/维列斯.html</span><br><span class="hljs-comment">// https://github.com/zizifn/excalidraw-backup/blob/main/v2ray-protocol.excalidraw</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解析 维列斯 协议的头部数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type"> ArrayBuffer</span>&#125; 维列斯Buffer 维列斯 协议的原始头部数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; userID 用于验证的用户 ID</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Object</span>&#125; 解析结果，包括是否有错误、错误信息、远程地址信息等</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> process维列斯<span class="hljs-title class_">Header</span>(维列斯<span class="hljs-title class_">Buffer</span>, userID) &#123;<br><span class="hljs-comment">// 检查数据长度是否足够（至少需要 24 字节）</span><br><span class="hljs-keyword">if</span> (维列斯<span class="hljs-title class_">Buffer</span>.<span class="hljs-property">byteLength</span> &lt; <span class="hljs-number">24</span>) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;invalid data&#x27;</span>,<br>&#125;;<br>&#125;<br><br><span class="hljs-comment">// 解析 维列斯 协议版本（第一个字节）</span><br><span class="hljs-keyword">const</span> version = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(维列斯<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>));<br><br><span class="hljs-keyword">let</span> isValidUser = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">let</span> isUDP = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 验证用户 ID（接下来的 16 个字节）</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isUserIDValid</span>(<span class="hljs-params">userID, userIDLow, buffer</span>) &#123;<br><span class="hljs-keyword">const</span> userIDArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(buffer.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">17</span>));<br><span class="hljs-keyword">const</span> userIDString = <span class="hljs-title function_">stringify</span>(userIDArray);<br><span class="hljs-keyword">return</span> userIDString === userID || userIDString === userIDLow;<br>&#125;<br><br><span class="hljs-comment">// 使用函数验证</span><br>isValidUser = <span class="hljs-title function_">isUserIDValid</span>(userID, userIDLow, 维列斯<span class="hljs-title class_">Buffer</span>);<br><br><span class="hljs-comment">// 如果用户 ID 无效，返回错误</span><br><span class="hljs-keyword">if</span> (!isValidUser) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">message</span>: <span class="hljs-string">`invalid user <span class="hljs-subst">$&#123;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(维列斯Buffer.slice(<span class="hljs-number">1</span>, <span class="hljs-number">17</span>)))&#125;</span>`</span>,<br>&#125;;<br>&#125;<br><br><span class="hljs-comment">// 获取附加选项的长度（第 17 个字节）</span><br><span class="hljs-keyword">const</span> optLength = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(维列斯<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">17</span>, <span class="hljs-number">18</span>))[<span class="hljs-number">0</span>];<br><span class="hljs-comment">// 暂时跳过附加选项</span><br><br><span class="hljs-comment">// 解析命令（紧跟在选项之后的 1 个字节）</span><br><span class="hljs-comment">// 0x01: TCP, 0x02: UDP, 0x03: MUX（多路复用）</span><br><span class="hljs-keyword">const</span> command = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<br>维列斯<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">18</span> + optLength, <span class="hljs-number">18</span> + optLength + <span class="hljs-number">1</span>)<br>)[<span class="hljs-number">0</span>];<br><br><span class="hljs-comment">// 0x01 TCP</span><br><span class="hljs-comment">// 0x02 UDP</span><br><span class="hljs-comment">// 0x03 MUX</span><br><span class="hljs-keyword">if</span> (command === <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// TCP 命令，不需特殊处理</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (command === <span class="hljs-number">2</span>) &#123;<br><span class="hljs-comment">// UDP 命令</span><br>isUDP = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 不支持的命令</span><br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">message</span>: <span class="hljs-string">`command <span class="hljs-subst">$&#123;command&#125;</span> is not support, command 01-tcp,02-udp,03-mux`</span>,<br>&#125;;<br>&#125;<br><br><span class="hljs-comment">// 解析远程端口（大端序，2 字节）</span><br><span class="hljs-keyword">const</span> portIndex = <span class="hljs-number">18</span> + optLength + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> portBuffer = 维列斯<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">slice</span>(portIndex, portIndex + <span class="hljs-number">2</span>);<br><span class="hljs-comment">// port is big-Endian in raw data etc 80 == 0x005d</span><br><span class="hljs-keyword">const</span> portRemote = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(portBuffer).<span class="hljs-title function_">getUint16</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 解析地址类型和地址</span><br><span class="hljs-keyword">let</span> addressIndex = portIndex + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">const</span> addressBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<br>维列斯<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">slice</span>(addressIndex, addressIndex + <span class="hljs-number">1</span>)<br>);<br><br><span class="hljs-comment">// 地址类型：1-IPv4(4字节), 2-域名(可变长), 3-IPv6(16字节)</span><br><span class="hljs-keyword">const</span> addressType = addressBuffer[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">let</span> addressLength = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> addressValueIndex = addressIndex + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> addressValue = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">switch</span> (addressType) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-comment">// IPv4 地址</span><br>addressLength = <span class="hljs-number">4</span>;<br><span class="hljs-comment">// 将 4 个字节转为点分十进制格式</span><br>addressValue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<br>维列斯<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">slice</span>(addressValueIndex, addressValueIndex + addressLength)<br>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-comment">// 域名</span><br><span class="hljs-comment">// 第一个字节是域名长度</span><br>addressLength = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<br>维列斯<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">slice</span>(addressValueIndex, addressValueIndex + <span class="hljs-number">1</span>)<br>)[<span class="hljs-number">0</span>];<br>addressValueIndex += <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 解码域名</span><br>addressValue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextDecoder</span>().<span class="hljs-title function_">decode</span>(<br>维列斯<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">slice</span>(addressValueIndex, addressValueIndex + addressLength)<br>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-comment">// IPv6 地址</span><br>addressLength = <span class="hljs-number">16</span>;<br><span class="hljs-keyword">const</span> dataView = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(<br>维列斯<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">slice</span>(addressValueIndex, addressValueIndex + addressLength)<br>);<br><span class="hljs-comment">// 每 2 字节构成 IPv6 地址的一部分</span><br><span class="hljs-keyword">const</span> ipv6 = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>ipv6.<span class="hljs-title function_">push</span>(dataView.<span class="hljs-title function_">getUint16</span>(i * <span class="hljs-number">2</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br>&#125;<br>addressValue = ipv6.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;:&#x27;</span>);<br><span class="hljs-comment">// seems no need add [] for ipv6</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-attr">default</span>:<br><span class="hljs-comment">// 无效的地址类型</span><br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">message</span>: <span class="hljs-string">`invild addressType is <span class="hljs-subst">$&#123;addressType&#125;</span>`</span>,<br>&#125;;<br>&#125;<br><br><span class="hljs-comment">// 确保地址不为空</span><br><span class="hljs-keyword">if</span> (!addressValue) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">message</span>: <span class="hljs-string">`addressValue is empty, addressType is <span class="hljs-subst">$&#123;addressType&#125;</span>`</span>,<br>&#125;;<br>&#125;<br><br><span class="hljs-comment">// 返回解析结果</span><br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">addressRemote</span>: addressValue,  <span class="hljs-comment">// 解析后的远程地址</span><br>addressType, <span class="hljs-comment">// 地址类型</span><br>portRemote, <span class="hljs-comment">// 远程端口</span><br><span class="hljs-attr">rawDataIndex</span>: addressValueIndex + addressLength,  <span class="hljs-comment">// 原始数据的实际起始位置</span><br>维列斯<span class="hljs-title class_">Version</span>: version,  <span class="hljs-comment">// 维列斯 协议版本</span><br>isUDP, <span class="hljs-comment">// 是否是 UDP 请求</span><br>&#125;;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">remoteSocketToWS</span>(<span class="hljs-params">remoteSocket, webSocket, 维列斯ResponseHeader, retry, log</span>) &#123;<br><span class="hljs-comment">// 将数据从远程服务器转发到 WebSocket</span><br><span class="hljs-keyword">let</span> remoteChunkCount = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> chunks = [];<br><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">ArrayBuffer | null</span>&#125; */</span><br><span class="hljs-keyword">let</span> 维列斯<span class="hljs-title class_">Header</span> = 维列斯<span class="hljs-title class_">ResponseHeader</span>;<br><span class="hljs-keyword">let</span> hasIncomingData = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 检查远程 Socket 是否有传入数据</span><br><br><span class="hljs-comment">// 使用管道将远程 Socket 的可读流连接到一个可写流</span><br><span class="hljs-keyword">await</span> remoteSocket.<span class="hljs-property">readable</span><br>.<span class="hljs-title function_">pipeTo</span>(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">WritableStream</span>(&#123;<br><span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 初始化时不需要任何操作</span><br>&#125;,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理每个数据块</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Uint8Array</span>&#125; chunk 数据块</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; controller 控制器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">chunk, controller</span>) &#123;<br>hasIncomingData = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 标记已收到数据</span><br><span class="hljs-comment">// remoteChunkCount++; // 用于流量控制，现在似乎不需要了</span><br><br><span class="hljs-comment">// 检查 WebSocket 是否处于开放状态</span><br><span class="hljs-keyword">if</span> (webSocket.<span class="hljs-property">readyState</span> !== <span class="hljs-variable constant_">WS_READY_STATE_OPEN</span>) &#123;<br>controller.<span class="hljs-title function_">error</span>(<br><span class="hljs-string">&#x27;webSocket.readyState is not open, maybe close&#x27;</span><br>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (维列斯<span class="hljs-title class_">Header</span>) &#123;<br><span class="hljs-comment">// 如果有 维列斯 响应头部，将其与第一个数据块一起发送</span><br>webSocket.<span class="hljs-title function_">send</span>(<span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([维列斯<span class="hljs-title class_">Header</span>, chunk]).<span class="hljs-title function_">arrayBuffer</span>());<br>维列斯<span class="hljs-title class_">Header</span> = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 清空头部，之后不再发送</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 直接发送数据块</span><br><span class="hljs-comment">// 以前这里有流量控制代码，限制大量数据的发送速率</span><br><span class="hljs-comment">// 但现在 Cloudflare 似乎已经修复了这个问题</span><br><span class="hljs-comment">// if (remoteChunkCount &gt; 20000) &#123;</span><br><span class="hljs-comment">// // cf one package is 4096 byte(4kb),  4096 * 20000 = 80M</span><br><span class="hljs-comment">// await delay(1);</span><br><span class="hljs-comment">// &#125;</span><br>webSocket.<span class="hljs-title function_">send</span>(chunk);<br>&#125;<br>&#125;,<br><span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 当远程连接的可读流关闭时</span><br><span class="hljs-title function_">log</span>(<span class="hljs-string">`remoteConnection!.readable is close with hasIncomingData is <span class="hljs-subst">$&#123;hasIncomingData&#125;</span>`</span>);<br><span class="hljs-comment">// 不需要主动关闭 WebSocket，因为这可能导致 HTTP ERR_CONTENT_LENGTH_MISMATCH 问题</span><br><span class="hljs-comment">// 客户端无论如何都会发送关闭事件</span><br><span class="hljs-comment">// safeCloseWebSocket(webSocket);</span><br>&#125;,<br><span class="hljs-title function_">abort</span>(<span class="hljs-params">reason</span>) &#123;<br><span class="hljs-comment">// 当远程连接的可读流中断时</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`remoteConnection!.readable abort`</span>, reason);<br>&#125;,<br>&#125;)<br>)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 捕获并记录任何异常</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<br><span class="hljs-string">`remoteSocketToWS has exception `</span>,<br>error.<span class="hljs-property">stack</span> || error<br>);<br><span class="hljs-comment">// 发生错误时安全地关闭 WebSocket</span><br><span class="hljs-title function_">safeCloseWebSocket</span>(webSocket);<br>&#125;);<br><br><span class="hljs-comment">// 处理 Cloudflare 连接 Socket 的特殊错误情况</span><br><span class="hljs-comment">// 1. Socket.closed 将有错误</span><br><span class="hljs-comment">// 2. Socket.readable 将关闭，但没有任何数据</span><br><span class="hljs-keyword">if</span> (hasIncomingData === <span class="hljs-literal">false</span> &amp;&amp; retry) &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">`retry`</span>);<br><span class="hljs-title function_">retry</span>(); <span class="hljs-comment">// 调用重试函数，尝试重新建立连接</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将 Base64 编码的字符串转换为 ArrayBuffer</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; base64Str Base64 编码的输入字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">&#123; earlyData: ArrayBuffer | undefined, error: Error | null </span>&#125;&#125; 返回解码后的 ArrayBuffer 或错误</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">base64ToArrayBuffer</span>(<span class="hljs-params">base64Str</span>) &#123;<br><span class="hljs-comment">// 如果输入为空，直接返回空结果</span><br><span class="hljs-keyword">if</span> (!base64Str) &#123;<br><span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">earlyData</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">error</span>: <span class="hljs-literal">null</span> &#125;;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// Go 语言使用了 URL 安全的 Base64 变体（RFC 4648）</span><br><span class="hljs-comment">// 这种变体使用 &#x27;-&#x27; 和 &#x27;_&#x27; 来代替标准 Base64 中的 &#x27;+&#x27; 和 &#x27;/&#x27;</span><br><span class="hljs-comment">// JavaScript 的 atob 函数不直接支持这种变体，所以我们需要先转换</span><br>base64Str = base64Str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/-/g</span>, <span class="hljs-string">&#x27;+&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/_/g</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br><br><span class="hljs-comment">// 使用 atob 函数解码 Base64 字符串</span><br><span class="hljs-comment">// atob 将 Base64 编码的 ASCII 字符串转换为原始的二进制字符串</span><br><span class="hljs-keyword">const</span> decode = <span class="hljs-title function_">atob</span>(base64Str);<br><br><span class="hljs-comment">// 将二进制字符串转换为 Uint8Array</span><br><span class="hljs-comment">// 这是通过遍历字符串中的每个字符并获取其 Unicode 编码值（0-255）来完成的</span><br><span class="hljs-keyword">const</span> arryBuffer = <span class="hljs-title class_">Uint8Array</span>.<span class="hljs-title function_">from</span>(decode, <span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>));<br><br><span class="hljs-comment">// 返回 Uint8Array 的底层 ArrayBuffer</span><br><span class="hljs-comment">// 这是实际的二进制数据，可以用于网络传输或其他二进制操作</span><br><span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">earlyData</span>: arryBuffer.<span class="hljs-property">buffer</span>, <span class="hljs-attr">error</span>: <span class="hljs-literal">null</span> &#125;;<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-comment">// 如果在任何步骤中出现错误（如非法 Base64 字符），则返回错误</span><br><span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">earlyData</span>: <span class="hljs-literal">undefined</span>, error &#125;;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这不是真正的 UUID 验证，而是一个简化的版本</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; uuid 要验证的 UUID 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">boolean</span>&#125; 如果字符串匹配 UUID 格式则返回 true，否则返回 false</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isValidUUID</span>(<span class="hljs-params">uuid</span>) &#123;<br><span class="hljs-comment">// 定义一个正则表达式来匹配 UUID 格式</span><br><span class="hljs-keyword">const</span> uuidRegex = <span class="hljs-regexp">/^[0-9a-f]&#123;8&#125;-[0-9a-f]&#123;4&#125;-[4][0-9a-f]&#123;3&#125;-[89ab][0-9a-f]&#123;3&#125;-[0-9a-f]&#123;12&#125;$/i</span>;<br><br><span class="hljs-comment">// 使用正则表达式测试 UUID 字符串</span><br><span class="hljs-keyword">return</span> uuidRegex.<span class="hljs-title function_">test</span>(uuid);<br>&#125;<br><br><span class="hljs-comment">// WebSocket 的两个重要状态常量</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">WS_READY_STATE_OPEN</span> = <span class="hljs-number">1</span>; <span class="hljs-comment">// WebSocket 处于开放状态，可以发送和接收消息</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">WS_READY_STATE_CLOSING</span> = <span class="hljs-number">2</span>;  <span class="hljs-comment">// WebSocket 正在关闭过程中</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">safeCloseWebSocket</span>(<span class="hljs-params">socket</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 只有在 WebSocket 处于开放或正在关闭状态时才调用 close()</span><br><span class="hljs-comment">// 这避免了在已关闭或连接中的 WebSocket 上调用 close()</span><br><span class="hljs-keyword">if</span> (socket.<span class="hljs-property">readyState</span> === <span class="hljs-variable constant_">WS_READY_STATE_OPEN</span> || socket.<span class="hljs-property">readyState</span> === <span class="hljs-variable constant_">WS_READY_STATE_CLOSING</span>) &#123;<br>socket.<span class="hljs-title function_">close</span>();<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-comment">// 记录任何可能发生的错误，虽然按照规范不应该有错误</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;safeCloseWebSocket error&#x27;</span>, error);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 预计算 0-255 每个字节的十六进制表示</span><br><span class="hljs-keyword">const</span> byteToHex = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; ++i) &#123;<br><span class="hljs-comment">// (i + 256).toString(16) 确保总是得到两位数的十六进制</span><br><span class="hljs-comment">// .slice(1) 删除前导的 &quot;1&quot;，只保留两位十六进制数</span><br>byteToHex.<span class="hljs-title function_">push</span>((i + <span class="hljs-number">256</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>));<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 快速地将字节数组转换为 UUID 字符串，不进行有效性检查</span><br><span class="hljs-comment"> * 这是一个底层函数，直接操作字节，不做任何验证</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Uint8Array</span>&#125; arr 包含 UUID 字节的数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; offset 数组中 UUID 开始的位置，默认为 0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">string</span>&#125; UUID 字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unsafeStringify</span>(<span class="hljs-params">arr, offset = <span class="hljs-number">0</span></span>) &#123;<br><span class="hljs-comment">// 直接从查找表中获取每个字节的十六进制表示，并拼接成 UUID 格式</span><br><span class="hljs-comment">// 8-4-4-4-12 的分组是通过精心放置的连字符 &quot;-&quot; 实现的</span><br><span class="hljs-comment">// toLowerCase() 确保整个 UUID 是小写的</span><br><span class="hljs-keyword">return</span> (byteToHex[arr[offset + <span class="hljs-number">0</span>]] + byteToHex[arr[offset + <span class="hljs-number">1</span>]] + byteToHex[arr[offset + <span class="hljs-number">2</span>]] + byteToHex[arr[offset + <span class="hljs-number">3</span>]] + <span class="hljs-string">&quot;-&quot;</span> +<br>byteToHex[arr[offset + <span class="hljs-number">4</span>]] + byteToHex[arr[offset + <span class="hljs-number">5</span>]] + <span class="hljs-string">&quot;-&quot;</span> +<br>byteToHex[arr[offset + <span class="hljs-number">6</span>]] + byteToHex[arr[offset + <span class="hljs-number">7</span>]] + <span class="hljs-string">&quot;-&quot;</span> +<br>byteToHex[arr[offset + <span class="hljs-number">8</span>]] + byteToHex[arr[offset + <span class="hljs-number">9</span>]] + <span class="hljs-string">&quot;-&quot;</span> +<br>byteToHex[arr[offset + <span class="hljs-number">10</span>]] + byteToHex[arr[offset + <span class="hljs-number">11</span>]] + byteToHex[arr[offset + <span class="hljs-number">12</span>]] +<br>byteToHex[arr[offset + <span class="hljs-number">13</span>]] + byteToHex[arr[offset + <span class="hljs-number">14</span>]] + byteToHex[arr[offset + <span class="hljs-number">15</span>]]).<span class="hljs-title function_">toLowerCase</span>();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将字节数组转换为 UUID 字符串，并验证其有效性</span><br><span class="hljs-comment"> * 这是一个安全的函数，它确保返回的 UUID 格式正确</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Uint8Array</span>&#125; arr 包含 UUID 字节的数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; offset 数组中 UUID 开始的位置，默认为 0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">string</span>&#125; 有效的 UUID 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> &#123;<span class="hljs-type">TypeError</span>&#125; 如果生成的 UUID 字符串无效</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">stringify</span>(<span class="hljs-params">arr, offset = <span class="hljs-number">0</span></span>) &#123;<br><span class="hljs-comment">// 使用不安全的函数快速生成 UUID 字符串</span><br><span class="hljs-keyword">const</span> uuid = <span class="hljs-title function_">unsafeStringify</span>(arr, offset);<br><span class="hljs-comment">// 验证生成的 UUID 是否有效</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isValidUUID</span>(uuid)) &#123;<br><span class="hljs-comment">// 原：throw TypeError(&quot;Stringified UUID is invalid&quot;);</span><br><span class="hljs-keyword">throw</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">`生成的 UUID 不符合规范 <span class="hljs-subst">$&#123;uuid&#125;</span>`</span>);<br><span class="hljs-comment">//uuid = userID;</span><br>&#125;<br><span class="hljs-keyword">return</span> uuid;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理 DNS 查询的函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">ArrayBuffer</span>&#125; <span class="hljs-variable">udpChunk</span> - 客户端发送的 DNS 查询数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">ArrayBuffer</span>&#125; 维列斯ResponseHeader - 维列斯 协议的响应头部数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">(string)=&gt; void</span>&#125; <span class="hljs-variable">log</span> - 日志记录函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDNSQuery</span>(<span class="hljs-params">udpChunk, webSocket, 维列斯ResponseHeader, log</span>) &#123;<br><span class="hljs-comment">// 无论客户端发送到哪个 DNS 服务器，我们总是使用硬编码的服务器</span><br><span class="hljs-comment">// 因为有些 DNS 服务器不支持 DNS over TCP</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 选用 Google 的 DNS 服务器（注：后续可能会改为 Cloudflare 的 1.1.1.1）</span><br><span class="hljs-keyword">const</span> dnsServer = <span class="hljs-string">&#x27;8.8.4.4&#x27;</span>; <span class="hljs-comment">// 在 Cloudflare 修复连接自身 IP 的 bug 后，将改为 1.1.1.1</span><br><span class="hljs-keyword">const</span> dnsPort = <span class="hljs-number">53</span>; <span class="hljs-comment">// DNS 服务的标准端口</span><br><br><span class="hljs-keyword">let</span> 维列斯<span class="hljs-title class_">Header</span> = 维列斯<span class="hljs-title class_">ResponseHeader</span>; <span class="hljs-comment">// 保存 维列斯 响应头部，用于后续发送</span><br><br><span class="hljs-comment">// 与指定的 DNS 服务器建立 TCP 连接</span><br><span class="hljs-keyword">const</span> tcpSocket = <span class="hljs-title function_">connect</span>(&#123;<br><span class="hljs-attr">hostname</span>: dnsServer,<br><span class="hljs-attr">port</span>: dnsPort,<br>&#125;);<br><br><span class="hljs-title function_">log</span>(<span class="hljs-string">`连接到 <span class="hljs-subst">$&#123;dnsServer&#125;</span>:<span class="hljs-subst">$&#123;dnsPort&#125;</span>`</span>); <span class="hljs-comment">// 记录连接信息</span><br><span class="hljs-keyword">const</span> writer = tcpSocket.<span class="hljs-property">writable</span>.<span class="hljs-title function_">getWriter</span>();<br><span class="hljs-keyword">await</span> writer.<span class="hljs-title function_">write</span>(udpChunk); <span class="hljs-comment">// 将客户端的 DNS 查询数据发送给 DNS 服务器</span><br>writer.<span class="hljs-title function_">releaseLock</span>(); <span class="hljs-comment">// 释放写入器，允许其他部分使用</span><br><br><span class="hljs-comment">// 将从 DNS 服务器接收到的响应数据通过 WebSocket 发送回客户端</span><br><span class="hljs-keyword">await</span> tcpSocket.<span class="hljs-property">readable</span>.<span class="hljs-title function_">pipeTo</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WritableStream</span>(&#123;<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">chunk</span>) &#123;<br><span class="hljs-keyword">if</span> (webSocket.<span class="hljs-property">readyState</span> === <span class="hljs-variable constant_">WS_READY_STATE_OPEN</span>) &#123;<br><span class="hljs-keyword">if</span> (维列斯<span class="hljs-title class_">Header</span>) &#123;<br><span class="hljs-comment">// 如果有 维列斯 头部，则将其与 DNS 响应数据合并后发送</span><br>webSocket.<span class="hljs-title function_">send</span>(<span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([维列斯<span class="hljs-title class_">Header</span>, chunk]).<span class="hljs-title function_">arrayBuffer</span>());<br>维列斯<span class="hljs-title class_">Header</span> = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 头部只发送一次，之后置为 null</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 否则直接发送 DNS 响应数据</span><br>webSocket.<span class="hljs-title function_">send</span>(chunk);<br>&#125;<br>&#125;<br>&#125;,<br><span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">`DNS 服务器(<span class="hljs-subst">$&#123;dnsServer&#125;</span>) TCP 连接已关闭`</span>); <span class="hljs-comment">// 记录连接关闭信息</span><br>&#125;,<br><span class="hljs-title function_">abort</span>(<span class="hljs-params">reason</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`DNS 服务器(<span class="hljs-subst">$&#123;dnsServer&#125;</span>) TCP 连接异常中断`</span>, reason); <span class="hljs-comment">// 记录异常中断原因</span><br>&#125;,<br>&#125;));<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-comment">// 捕获并记录任何可能发生的错误</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<br><span class="hljs-string">`handleDNSQuery 函数发生异常，错误信息: <span class="hljs-subst">$&#123;error.message&#125;</span>`</span><br>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 建立 SOCKS5 代理连接</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; addressType 目标地址类型（1: IPv4, 2: 域名, 3: IPv6）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; addressRemote 目标地址（可以是 IP 或域名）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; portRemote 目标端口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">function</span>&#125; log 日志记录函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">socks5Connect</span>(<span class="hljs-params">addressType, addressRemote, portRemote, log</span>) &#123;<br><span class="hljs-keyword">const</span> &#123; username, password, hostname, port &#125; = parsedSocks5Address;<br><span class="hljs-comment">// 连接到 SOCKS5 代理服务器</span><br><span class="hljs-keyword">const</span> socket = <span class="hljs-title function_">connect</span>(&#123;<br>hostname, <span class="hljs-comment">// SOCKS5 服务器的主机名</span><br>port,<span class="hljs-comment">// SOCKS5 服务器的端口</span><br>&#125;);<br><br><span class="hljs-comment">// 请求头格式（Worker -&gt; SOCKS5 服务器）:</span><br><span class="hljs-comment">// +----+----------+----------+</span><br><span class="hljs-comment">// |VER | NMETHODS | METHODS  |</span><br><span class="hljs-comment">// +----+----------+----------+</span><br><span class="hljs-comment">// | 1  |1 | 1 to 255 |</span><br><span class="hljs-comment">// +----+----------+----------+</span><br><br><span class="hljs-comment">// https://en.wikipedia.org/wiki/SOCKS#SOCKS5</span><br><span class="hljs-comment">// METHODS 字段的含义:</span><br><span class="hljs-comment">// 0x00 不需要认证</span><br><span class="hljs-comment">// 0x02 用户名/密码认证 https://datatracker.ietf.org/doc/html/rfc1929</span><br><span class="hljs-keyword">const</span> socksGreeting = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>]);<br><span class="hljs-comment">// 5: SOCKS5 版本号, 2: 支持的认证方法数, 0和2: 两种认证方法（无认证和用户名/密码）</span><br><br><span class="hljs-keyword">const</span> writer = socket.<span class="hljs-property">writable</span>.<span class="hljs-title function_">getWriter</span>();<br><br><span class="hljs-keyword">await</span> writer.<span class="hljs-title function_">write</span>(socksGreeting);<br><span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;已发送 SOCKS5 问候消息&#x27;</span>);<br><br><span class="hljs-keyword">const</span> reader = socket.<span class="hljs-property">readable</span>.<span class="hljs-title function_">getReader</span>();<br><span class="hljs-keyword">const</span> encoder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextEncoder</span>();<br><span class="hljs-keyword">let</span> res = (<span class="hljs-keyword">await</span> reader.<span class="hljs-title function_">read</span>()).<span class="hljs-property">value</span>;<br><span class="hljs-comment">// 响应格式（SOCKS5 服务器 -&gt; Worker）:</span><br><span class="hljs-comment">// +----+--------+</span><br><span class="hljs-comment">// |VER | METHOD |</span><br><span class="hljs-comment">// +----+--------+</span><br><span class="hljs-comment">// | 1  |   1|</span><br><span class="hljs-comment">// +----+--------+</span><br><span class="hljs-keyword">if</span> (res[<span class="hljs-number">0</span>] !== <span class="hljs-number">0x05</span>) &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">`SOCKS5 服务器版本错误: 收到 <span class="hljs-subst">$&#123;res[<span class="hljs-number">0</span>]&#125;</span>，期望是 5`</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (res[<span class="hljs-number">1</span>] === <span class="hljs-number">0xff</span>) &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器不接受任何认证方法&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 如果返回 0x0502，表示需要用户名/密码认证</span><br><span class="hljs-keyword">if</span> (res[<span class="hljs-number">1</span>] === <span class="hljs-number">0x02</span>) &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;SOCKS5 服务器需要认证&quot;</span>);<br><span class="hljs-keyword">if</span> (!username || !password) &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;请提供用户名和密码&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 认证请求格式:</span><br><span class="hljs-comment">// +----+------+----------+------+----------+</span><br><span class="hljs-comment">// |VER | ULEN |  UNAME   | PLEN |  PASSWD  |</span><br><span class="hljs-comment">// +----+------+----------+------+----------+</span><br><span class="hljs-comment">// | 1  |  1   | 1 to 255 |  1   | 1 to 255 |</span><br><span class="hljs-comment">// +----+------+----------+------+----------+</span><br><span class="hljs-keyword">const</span> authRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<br><span class="hljs-number">1</span>,   <span class="hljs-comment">// 认证子协议版本</span><br>username.<span class="hljs-property">length</span>,<span class="hljs-comment">// 用户名长度</span><br>...encoder.<span class="hljs-title function_">encode</span>(username), <span class="hljs-comment">// 用户名</span><br>password.<span class="hljs-property">length</span>,<span class="hljs-comment">// 密码长度</span><br>...encoder.<span class="hljs-title function_">encode</span>(password)  <span class="hljs-comment">// 密码</span><br>]);<br><span class="hljs-keyword">await</span> writer.<span class="hljs-title function_">write</span>(authRequest);<br>res = (<span class="hljs-keyword">await</span> reader.<span class="hljs-title function_">read</span>()).<span class="hljs-property">value</span>;<br><span class="hljs-comment">// 期望返回 0x0100 表示认证成功</span><br><span class="hljs-keyword">if</span> (res[<span class="hljs-number">0</span>] !== <span class="hljs-number">0x01</span> || res[<span class="hljs-number">1</span>] !== <span class="hljs-number">0x00</span>) &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;SOCKS5 服务器认证失败&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 请求数据格式（Worker -&gt; SOCKS5 服务器）:</span><br><span class="hljs-comment">// +----+-----+-------+------+----------+----------+</span><br><span class="hljs-comment">// |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |</span><br><span class="hljs-comment">// +----+-----+-------+------+----------+----------+</span><br><span class="hljs-comment">// | 1  |  1  | X&#x27;00&#x27; |  1   | Variable |2 |</span><br><span class="hljs-comment">// +----+-----+-------+------+----------+----------+</span><br><span class="hljs-comment">// ATYP: 地址类型</span><br><span class="hljs-comment">// 0x01: IPv4 地址</span><br><span class="hljs-comment">// 0x03: 域名</span><br><span class="hljs-comment">// 0x04: IPv6 地址</span><br><span class="hljs-comment">// DST.ADDR: 目标地址</span><br><span class="hljs-comment">// DST.PORT: 目标端口（网络字节序）</span><br><br><span class="hljs-comment">// addressType</span><br><span class="hljs-comment">// 1 --&gt; IPv4  地址长度 = 4</span><br><span class="hljs-comment">// 2 --&gt; 域名</span><br><span class="hljs-comment">// 3 --&gt; IPv6  地址长度 = 16</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable constant_">DSTADDR</span>;<span class="hljs-comment">// DSTADDR = ATYP + DST.ADDR</span><br><span class="hljs-keyword">switch</span> (addressType) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">// IPv4</span><br><span class="hljs-variable constant_">DSTADDR</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<br>[<span class="hljs-number">1</span>, ...addressRemote.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Number</span>)]<br>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">// 域名</span><br><span class="hljs-variable constant_">DSTADDR</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<br>[<span class="hljs-number">3</span>, addressRemote.<span class="hljs-property">length</span>, ...encoder.<span class="hljs-title function_">encode</span>(addressRemote)]<br>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-comment">// IPv6</span><br><span class="hljs-variable constant_">DSTADDR</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<br>[<span class="hljs-number">4</span>, ...addressRemote.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>).<span class="hljs-title function_">flatMap</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> [<span class="hljs-built_in">parseInt</span>(x.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>), <span class="hljs-number">16</span>), <span class="hljs-built_in">parseInt</span>(x.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>)])]<br>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-attr">default</span>:<br><span class="hljs-title function_">log</span>(<span class="hljs-string">`无效的地址类型: <span class="hljs-subst">$&#123;addressType&#125;</span>`</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">const</span> socksRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, ...<span class="hljs-variable constant_">DSTADDR</span>, portRemote &gt;&gt; <span class="hljs-number">8</span>, portRemote &amp; <span class="hljs-number">0xff</span>]);<br><span class="hljs-comment">// 5: SOCKS5版本, 1: 表示CONNECT请求, 0: 保留字段</span><br><span class="hljs-comment">// ...DSTADDR: 目标地址, portRemote &gt;&gt; 8 和 &amp; 0xff: 将端口转为网络字节序</span><br><span class="hljs-keyword">await</span> writer.<span class="hljs-title function_">write</span>(socksRequest);<br><span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;已发送 SOCKS5 请求&#x27;</span>);<br><br>res = (<span class="hljs-keyword">await</span> reader.<span class="hljs-title function_">read</span>()).<span class="hljs-property">value</span>;<br><span class="hljs-comment">// 响应格式（SOCKS5 服务器 -&gt; Worker）:</span><br><span class="hljs-comment">//  +----+-----+-------+------+----------+----------+</span><br><span class="hljs-comment">// |VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |</span><br><span class="hljs-comment">// +----+-----+-------+------+----------+----------+</span><br><span class="hljs-comment">// | 1  |  1  | X&#x27;00&#x27; |  1   | Variable |2 |</span><br><span class="hljs-comment">// +----+-----+-------+------+----------+----------+</span><br><span class="hljs-keyword">if</span> (res[<span class="hljs-number">1</span>] === <span class="hljs-number">0x00</span>) &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;SOCKS5 连接已建立&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;SOCKS5 连接建立失败&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>writer.<span class="hljs-title function_">releaseLock</span>();<br>reader.<span class="hljs-title function_">releaseLock</span>();<br><span class="hljs-keyword">return</span> socket;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SOCKS5 代理地址解析器</span><br><span class="hljs-comment"> * 此函数用于解析 SOCKS5 代理地址字符串，提取出用户名、密码、主机名和端口号</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; address SOCKS5 代理地址，格式可以是：</span><br><span class="hljs-comment"> *   - &quot;username:password<span class="hljs-doctag">@hostname</span>:port&quot; （带认证）</span><br><span class="hljs-comment"> *   - &quot;hostname:port&quot; （不需认证）</span><br><span class="hljs-comment"> *   - &quot;username:password@[ipv6]:port&quot; （IPv6 地址需要用方括号括起来）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">socks5AddressParser</span>(<span class="hljs-params">address</span>) &#123;<br><span class="hljs-comment">// 使用 &quot;@&quot; 分割地址，分为认证部分和服务器地址部分</span><br><span class="hljs-comment">// reverse() 是为了处理没有认证信息的情况，确保 latter 总是包含服务器地址</span><br><span class="hljs-keyword">let</span> [latter, former] = address.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;@&quot;</span>).<span class="hljs-title function_">reverse</span>();<br><span class="hljs-keyword">let</span> username, password, hostname, port;<br><br><span class="hljs-comment">// 如果存在 former 部分，说明提供了认证信息</span><br><span class="hljs-keyword">if</span> (former) &#123;<br><span class="hljs-keyword">const</span> formers = former.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>);<br><span class="hljs-keyword">if</span> (formers.<span class="hljs-property">length</span> !== <span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;无效的 SOCKS 地址格式：认证部分必须是 &quot;username:password&quot; 的形式&#x27;</span>);<br>&#125;<br>[username, password] = formers;<br>&#125;<br><br><span class="hljs-comment">// 解析服务器地址部分</span><br><span class="hljs-keyword">const</span> latters = latter.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>);<br><span class="hljs-comment">// 从末尾提取端口号（因为 IPv6 地址中也包含冒号）</span><br>port = <span class="hljs-title class_">Number</span>(latters.<span class="hljs-title function_">pop</span>());<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(port)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;无效的 SOCKS 地址格式：端口号必须是数字&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 剩余部分就是主机名（可能是域名、IPv4 或 IPv6 地址）</span><br>hostname = latters.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;:&quot;</span>);<br><br><span class="hljs-comment">// 处理 IPv6 地址的特殊情况</span><br><span class="hljs-comment">// IPv6 地址包含多个冒号，所以必须用方括号括起来，如 [2001:db8::1]</span><br><span class="hljs-keyword">const</span> regex = <span class="hljs-regexp">/^\[.*\]$/</span>;<br><span class="hljs-keyword">if</span> (hostname.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;:&quot;</span>) &amp;&amp; !regex.<span class="hljs-title function_">test</span>(hostname)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;无效的 SOCKS 地址格式：IPv6 地址必须用方括号括起来，如 [2001:db8::1]&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">//if (/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(hostname)) hostname = `$&#123;atob(&#x27;d3d3Lg==&#x27;)&#125;$&#123;hostname&#125;$&#123;atob(&#x27;LmlwLjA5MDIyNy54eXo=&#x27;)&#125;`;</span><br><span class="hljs-comment">// 返回解析后的结果</span><br><span class="hljs-keyword">return</span> &#123;<br>username,  <span class="hljs-comment">// 用户名，如果没有则为 undefined</span><br>password,  <span class="hljs-comment">// 密码，如果没有则为 undefined</span><br>hostname,  <span class="hljs-comment">// 主机名，可以是域名、IPv4 或 IPv6 地址</span><br>port, <span class="hljs-comment">// 端口号，已转换为数字类型</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 恢复被伪装的信息</span><br><span class="hljs-comment"> * 这个函数用于将内容中的假用户ID和假主机名替换回真实的值</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; content 需要处理的内容</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; userID 真实的用户ID</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; hostName 真实的主机名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">boolean</span>&#125; isBase64 内容是否是Base64编码的</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">string</span>&#125; 恢复真实信息后的内容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> 恢复伪装信息(content, userID, hostName, fakeUserID, fakeHostName, isBase64) &#123;<br><span class="hljs-keyword">if</span> (isBase64) content = <span class="hljs-title function_">atob</span>(content);  <span class="hljs-comment">// 如果内容是Base64编码的，先解码</span><br><br><span class="hljs-comment">// 使用正则表达式全局替换（&#x27;g&#x27;标志）</span><br><span class="hljs-comment">// 将所有出现的假用户ID和假主机名替换为真实的值</span><br>content = content.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(fakeUserID, <span class="hljs-string">&#x27;g&#x27;</span>), userID)<br>.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(fakeHostName, <span class="hljs-string">&#x27;g&#x27;</span>), hostName);<br><br><span class="hljs-keyword">if</span> (isBase64) content = <span class="hljs-title function_">btoa</span>(content);  <span class="hljs-comment">// 如果原内容是Base64编码的，处理完后再次编码</span><br><br><span class="hljs-keyword">return</span> content;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 双重MD5哈希函数</span><br><span class="hljs-comment"> * 这个函数对输入文本进行两次MD5哈希，增强安全性</span><br><span class="hljs-comment"> * 第二次哈希使用第一次哈希结果的一部分作为输入</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; 文本 要哈希的文本</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise&lt;string&gt;</span>&#125; 双重哈希后的小写十六进制字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> 双重哈希(文本) &#123;<br><span class="hljs-keyword">const</span> 编码器 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextEncoder</span>();<br><br><span class="hljs-keyword">const</span> 第一次哈希 = <span class="hljs-keyword">await</span> crypto.<span class="hljs-property">subtle</span>.<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;MD5&#x27;</span>, 编码器.<span class="hljs-title function_">encode</span>(文本));<br><span class="hljs-keyword">const</span> 第一次哈希数组 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(第一次哈希));<br><span class="hljs-keyword">const</span> 第一次十六进制 = 第一次哈希数组.<span class="hljs-title function_">map</span>(字节 =&gt; 字节.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br><span class="hljs-keyword">const</span> 第二次哈希 = <span class="hljs-keyword">await</span> crypto.<span class="hljs-property">subtle</span>.<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;MD5&#x27;</span>, 编码器.<span class="hljs-title function_">encode</span>(第一次十六进制.<span class="hljs-title function_">slice</span>(<span class="hljs-number">7</span>, <span class="hljs-number">27</span>)));<br><span class="hljs-keyword">const</span> 第二次哈希数组 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(第二次哈希));<br><span class="hljs-keyword">const</span> 第二次十六进制 = 第二次哈希数组.<span class="hljs-title function_">map</span>(字节 =&gt; 字节.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br><span class="hljs-keyword">return</span> 第二次十六进制.<span class="hljs-title function_">toLowerCase</span>();<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> 代理<span class="hljs-title function_">URL</span>(<span class="hljs-params">代理网址, 目标网址</span>) &#123;<br><span class="hljs-keyword">const</span> 网址列表 = <span class="hljs-keyword">await</span> 整理(代理网址);<br><span class="hljs-keyword">const</span> 完整网址 = 网址列表[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * 网址列表.<span class="hljs-property">length</span>)];<br><br><span class="hljs-comment">// 解析目标 URL</span><br><span class="hljs-keyword">let</span> 解析后的网址 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(完整网址);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(解析后的网址);<br><span class="hljs-comment">// 提取并可能修改 URL 组件</span><br><span class="hljs-keyword">let</span> 协议 = 解析后的网址.<span class="hljs-property">protocol</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>) || <span class="hljs-string">&#x27;https&#x27;</span>;<br><span class="hljs-keyword">let</span> 主机名 = 解析后的网址.<span class="hljs-property">hostname</span>;<br><span class="hljs-keyword">let</span> 路径名 = 解析后的网址.<span class="hljs-property">pathname</span>;<br><span class="hljs-keyword">let</span> 查询参数 = 解析后的网址.<span class="hljs-property">search</span>;<br><br><span class="hljs-comment">// 处理路径名</span><br><span class="hljs-keyword">if</span> (路径名.<span class="hljs-title function_">charAt</span>(路径名.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>路径名 = 路径名.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>&#125;<br>路径名 += 目标网址.<span class="hljs-property">pathname</span>;<br><br><span class="hljs-comment">// 构建新的 URL</span><br><span class="hljs-keyword">let</span> 新网址 = <span class="hljs-string">`<span class="hljs-subst">$&#123;协议&#125;</span>://<span class="hljs-subst">$&#123;主机名&#125;</span><span class="hljs-subst">$&#123;路径名&#125;</span><span class="hljs-subst">$&#123;查询参数&#125;</span>`</span>;<br><br><span class="hljs-comment">// 反向代理请求</span><br><span class="hljs-keyword">let</span> 响应 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(新网址);<br><br><span class="hljs-comment">// 创建新的响应</span><br><span class="hljs-keyword">let</span> 新响应 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(响应.<span class="hljs-property">body</span>, &#123;<br><span class="hljs-attr">status</span>: 响应.<span class="hljs-property">status</span>,<br><span class="hljs-attr">statusText</span>: 响应.<span class="hljs-property">statusText</span>,<br><span class="hljs-attr">headers</span>: 响应.<span class="hljs-property">headers</span><br>&#125;);<br><br><span class="hljs-comment">// 添加自定义头部，包含 URL 信息</span><br><span class="hljs-comment">//新响应.headers.set(&#x27;X-Proxied-By&#x27;, &#x27;Cloudflare Worker&#x27;);</span><br><span class="hljs-comment">//新响应.headers.set(&#x27;X-Original-URL&#x27;, 完整网址);</span><br>新响应.<span class="hljs-property">headers</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;X-New-URL&#x27;</span>, 新网址);<br><br><span class="hljs-keyword">return</span> 新响应;<br>&#125;<br><br><span class="hljs-keyword">const</span> 啥啥啥_写的这是啥啊 = <span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;ZG14bGMzTT0=&#x27;</span>);<br><span class="hljs-keyword">function</span> 配置信息(<span class="hljs-variable constant_">UUID</span>, 域名地址) &#123;<br><span class="hljs-keyword">const</span> 协议类型 = <span class="hljs-title function_">atob</span>(啥啥啥_写的这是啥啊);<br><br><span class="hljs-keyword">const</span> 别名 = <span class="hljs-title class_">FileName</span>;<br><span class="hljs-keyword">let</span> 地址 = 域名地址;<br><span class="hljs-keyword">let</span> 端口 = <span class="hljs-number">443</span>;<br><br><span class="hljs-keyword">const</span> 用户<span class="hljs-variable constant_">ID</span> = <span class="hljs-variable constant_">UUID</span>;<br><span class="hljs-keyword">const</span> 加密方式 = <span class="hljs-string">&#x27;none&#x27;</span>;<br><br><span class="hljs-keyword">const</span> 传输层协议 = <span class="hljs-string">&#x27;ws&#x27;</span>;<br><span class="hljs-keyword">const</span> 伪装域名 = 域名地址;<br><span class="hljs-keyword">const</span> 路径 = path;<br><br><span class="hljs-keyword">let</span> 传输层安全 = [<span class="hljs-string">&#x27;tls&#x27;</span>, <span class="hljs-literal">true</span>];<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SNI</span> = 域名地址;<br><span class="hljs-keyword">const</span> 指纹 = <span class="hljs-string">&#x27;randomized&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (域名地址.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;.workers.dev&#x27;</span>)) &#123;<br>地址 = <span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;dmlzYS5jbg==&#x27;</span>);<br>端口 = <span class="hljs-number">80</span>;<br>传输层安全 = [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-literal">false</span>];<br>&#125;<br><br><span class="hljs-keyword">const</span> 威图瑞 = <span class="hljs-string">`<span class="hljs-subst">$&#123;协议类型&#125;</span>://<span class="hljs-subst">$&#123;用户ID&#125;</span>@<span class="hljs-subst">$&#123;地址&#125;</span>:<span class="hljs-subst">$&#123;端口&#125;</span>\u003f\u0065\u006e\u0063\u0072\u0079`</span> + <span class="hljs-string">&#x27;p&#x27;</span> + <span class="hljs-string">`<span class="hljs-subst">$&#123;atob(<span class="hljs-string">&#x27;dGlvbj0=&#x27;</span>) + 加密方式&#125;</span>\u0026\u0073\u0065\u0063\u0075\u0072\u0069\u0074\u0079\u003d<span class="hljs-subst">$&#123;传输层安全[<span class="hljs-number">0</span>]&#125;</span>&amp;sni=<span class="hljs-subst">$&#123;SNI&#125;</span>&amp;fp=<span class="hljs-subst">$&#123;指纹&#125;</span>&amp;type=<span class="hljs-subst">$&#123;传输层协议&#125;</span>&amp;host=<span class="hljs-subst">$&#123;伪装域名&#125;</span>&amp;path=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(路径)&#125;</span>#<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(别名)&#125;</span>`</span>;<br><span class="hljs-keyword">const</span> 猫猫猫 = <span class="hljs-string">`- &#123;name: <span class="hljs-subst">$&#123;FileName&#125;</span>, server: <span class="hljs-subst">$&#123;地址&#125;</span>, port: <span class="hljs-subst">$&#123;端口&#125;</span>, type: <span class="hljs-subst">$&#123;协议类型&#125;</span>, uuid: <span class="hljs-subst">$&#123;用户ID&#125;</span>, tls: <span class="hljs-subst">$&#123;传输层安全[<span class="hljs-number">1</span>]&#125;</span>, alpn: [h3], udp: false, sni: <span class="hljs-subst">$&#123;SNI&#125;</span>, tfo: false, skip-cert-verify: true, servername: <span class="hljs-subst">$&#123;伪装域名&#125;</span>, client-fingerprint: <span class="hljs-subst">$&#123;指纹&#125;</span>, network: <span class="hljs-subst">$&#123;传输层协议&#125;</span>, ws-opts: &#123;path: &quot;<span class="hljs-subst">$&#123;路径&#125;</span>&quot;, headers: &#123;<span class="hljs-subst">$&#123;伪装域名&#125;</span>&#125;&#125;&#125;`</span>;<br><span class="hljs-keyword">return</span> [威图瑞, 猫猫猫];<br>&#125;<br><br><span class="hljs-keyword">let</span> subParams = [<span class="hljs-string">&#x27;sub&#x27;</span>, <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;b64&#x27;</span>, <span class="hljs-string">&#x27;clash&#x27;</span>, <span class="hljs-string">&#x27;singbox&#x27;</span>, <span class="hljs-string">&#x27;sb&#x27;</span>];<br><span class="hljs-keyword">const</span> cmad = <span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;dGVsZWdyYW0lMjAlRTQlQkElQTQlRTYlQjUlODElRTclQkUlQTQlMjAlRTYlOEElODAlRTYlOUMlQUYlRTUlQTQlQTclRTQlQkQlQUMlN0UlRTUlOUMlQTglRTclQkElQkYlRTUlOEYlOTElRTclODklOEMhJTNDYnIlM0UKJTNDYSUyMGhyZWYlM0QlMjdodHRwcyUzQSUyRiUyRnQubWUlMkZDTUxpdXNzc3MlMjclM0VodHRwcyUzQSUyRiUyRnQubWUlMkZDTUxpdXNzc3MlM0MlMkZhJTNFJTNDYnIlM0UKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJTNDYnIlM0UKZ2l0aHViJTIwJUU5JUExJUI5JUU3JTlCJUFFJUU1JTlDJUIwJUU1JTlEJTgwJTIwU3RhciFTdGFyIVN0YXIhISElM0NiciUzRQolM0NhJTIwaHJlZiUzRCUyN2h0dHBzJTNBJTJGJTJGZ2l0aHViLmNvbSUyRmNtbGl1JTJGZWRnZXR1bm5lbCUyNyUzRWh0dHBzJTNBJTJGJTJGZ2l0aHViLmNvbSUyRmNtbGl1JTJGZWRnZXR1bm5lbCUzQyUyRmElM0UlM0NiciUzRQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0lM0NiciUzRQolMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjM=&#x27;</span>));<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">userID</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string | null</span>&#125; <span class="hljs-variable">hostName</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">sub</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">UA</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise&lt;string&gt;</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> 生成配置信息(userID, hostName, sub, <span class="hljs-variable constant_">UA</span>, <span class="hljs-title class_">RproxyIP</span>, _url, fakeUserID, fakeHostName, env) &#123;<br><span class="hljs-keyword">if</span> (sub) &#123;<br><span class="hljs-keyword">const</span> match = sub.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^(?:https?:\/\/)?([^\/]+)/</span>);<br><span class="hljs-keyword">if</span> (match) &#123;<br>sub = match[<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">const</span> subs = <span class="hljs-keyword">await</span> 整理(sub);<br><span class="hljs-keyword">if</span> (subs.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>) sub = subs[<span class="hljs-number">0</span>];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">KV</span>) &#123;<br><span class="hljs-keyword">await</span> 迁移地址列表(env);<br><span class="hljs-keyword">const</span> 优选地址列表 = <span class="hljs-keyword">await</span> env.<span class="hljs-property">KV</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;ADD.txt&#x27;</span>);<br><span class="hljs-keyword">if</span> (优选地址列表) &#123;<br><span class="hljs-keyword">const</span> 优选地址数组 = <span class="hljs-keyword">await</span> 整理(优选地址列表);<br><span class="hljs-keyword">const</span> 分类地址 = &#123;<br>接口地址: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(),<br>链接地址: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(),<br>优选地址: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> 元素 <span class="hljs-keyword">of</span> 优选地址数组) &#123;<br><span class="hljs-keyword">if</span> (元素.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;https://&#x27;</span>)) &#123;<br>分类地址.接口地址.<span class="hljs-title function_">add</span>(元素);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (元素.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;://&#x27;</span>)) &#123;<br>分类地址.链接地址.<span class="hljs-title function_">add</span>(元素);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>分类地址.优选地址.<span class="hljs-title function_">add</span>(元素);<br>&#125;<br>&#125;<br><br>addressesapi = [...分类地址.接口地址];<br>link = [...分类地址.链接地址];<br>addresses = [...分类地址.优选地址];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> ((addresses.<span class="hljs-property">length</span> + addressesapi.<span class="hljs-property">length</span> + addressesnotls.<span class="hljs-property">length</span> + addressesnotlsapi.<span class="hljs-property">length</span> + addressescsv.<span class="hljs-property">length</span>) == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// 定义 Cloudflare IP 范围的 CIDR 列表</span><br><span class="hljs-keyword">let</span> cfips = [<br><span class="hljs-string">&#x27;103.21.244.0/24&#x27;</span>,<br><span class="hljs-string">&#x27;104.16.0.0/13&#x27;</span>,<br><span class="hljs-string">&#x27;104.24.0.0/14&#x27;</span>,<br><span class="hljs-string">&#x27;172.64.0.0/14&#x27;</span>,<br><span class="hljs-string">&#x27;104.16.0.0/14&#x27;</span>,<br><span class="hljs-string">&#x27;104.24.0.0/15&#x27;</span>,<br><span class="hljs-string">&#x27;141.101.64.0/19&#x27;</span>,<br><span class="hljs-string">&#x27;172.64.0.0/14&#x27;</span>,<br><span class="hljs-string">&#x27;188.114.96.0/21&#x27;</span>,<br><span class="hljs-string">&#x27;190.93.240.0/21&#x27;</span>,<br><span class="hljs-string">&#x27;162.159.152.0/23&#x27;</span>,<br><span class="hljs-string">&#x27;104.16.0.0/13&#x27;</span>,<br><span class="hljs-string">&#x27;104.24.0.0/14&#x27;</span>,<br><span class="hljs-string">&#x27;172.64.0.0/14&#x27;</span>,<br><span class="hljs-string">&#x27;104.16.0.0/14&#x27;</span>,<br><span class="hljs-string">&#x27;104.24.0.0/15&#x27;</span>,<br><span class="hljs-string">&#x27;141.101.64.0/19&#x27;</span>,<br><span class="hljs-string">&#x27;172.64.0.0/14&#x27;</span>,<br><span class="hljs-string">&#x27;188.114.96.0/21&#x27;</span>,<br><span class="hljs-string">&#x27;190.93.240.0/21&#x27;</span>,<br>];<br><br><span class="hljs-comment">// 生成符合给定 CIDR 范围的随机 IP 地址</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">generateRandomIPFromCIDR</span>(<span class="hljs-params">cidr</span>) &#123;<br><span class="hljs-keyword">const</span> [base, mask] = cidr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-keyword">const</span> baseIP = base.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Number</span>);<br><span class="hljs-keyword">const</span> subnetMask = <span class="hljs-number">32</span> - <span class="hljs-built_in">parseInt</span>(mask, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">const</span> maxHosts = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, subnetMask) - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> randomHost = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * maxHosts);<br><br><span class="hljs-keyword">const</span> randomIP = baseIP.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">octet, index</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> octet;<br><span class="hljs-keyword">if</span> (index === <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> (octet &amp; (<span class="hljs-number">255</span> &lt;&lt; (subnetMask - <span class="hljs-number">8</span>))) + ((randomHost &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">255</span>);<br><span class="hljs-keyword">return</span> (octet &amp; (<span class="hljs-number">255</span> &lt;&lt; subnetMask)) + (randomHost &amp; <span class="hljs-number">255</span>);<br>&#125;);<br><br><span class="hljs-keyword">return</span> randomIP.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>&#125;<br>addresses = addresses.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;127.0.0.1:1234#CFnat&#x27;</span>);<br><span class="hljs-keyword">let</span> counter = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (hostName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;worker&quot;</span>) || hostName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;notls&quot;</span>)) &#123;<br><span class="hljs-keyword">const</span> randomPorts = httpPorts.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;80&#x27;</span>);<br>addressesnotls = addressesnotls.<span class="hljs-title function_">concat</span>(<br>cfips.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">cidr</span> =&gt;</span> <span class="hljs-title function_">generateRandomIPFromCIDR</span>(cidr) + <span class="hljs-string">&#x27;:&#x27;</span> + randomPorts[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * randomPorts.<span class="hljs-property">length</span>)] + <span class="hljs-string">&#x27;#CF随机节点&#x27;</span> + <span class="hljs-title class_">String</span>(counter++).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>))<br>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">const</span> randomPorts = httpsPorts.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;443&#x27;</span>);<br>addresses = addresses.<span class="hljs-title function_">concat</span>(<br>cfips.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">cidr</span> =&gt;</span> <span class="hljs-title function_">generateRandomIPFromCIDR</span>(cidr) + <span class="hljs-string">&#x27;:&#x27;</span> + randomPorts[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * randomPorts.<span class="hljs-property">length</span>)] + <span class="hljs-string">&#x27;#CF随机节点&#x27;</span> + <span class="hljs-title class_">String</span>(counter++).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>))<br>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> uuid = (_url.<span class="hljs-property">pathname</span> == <span class="hljs-string">`/<span class="hljs-subst">$&#123;动态UUID&#125;</span>`</span>) ? 动态<span class="hljs-variable constant_">UUID</span> : userID;<br><span class="hljs-keyword">const</span> userAgent = <span class="hljs-variable constant_">UA</span>.<span class="hljs-title function_">toLowerCase</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Config</span> = 配置信息(userID, hostName);<br><span class="hljs-keyword">const</span> v2ray = <span class="hljs-title class_">Config</span>[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">const</span> clash = <span class="hljs-title class_">Config</span>[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">let</span> proxyhost = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span> (hostName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;.workers.dev&quot;</span>)) &#123;<br><span class="hljs-keyword">if</span> (proxyhostsURL &amp;&amp; (!proxyhosts || proxyhosts.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(proxyhostsURL);<br><br><span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;获取地址时出错:&#x27;</span>, response.<span class="hljs-property">status</span>, response.<span class="hljs-property">statusText</span>);<br><span class="hljs-keyword">return</span>; <span class="hljs-comment">// 如果有错误，直接返回</span><br>&#125;<br><br><span class="hljs-keyword">const</span> text = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">text</span>();<br><span class="hljs-keyword">const</span> lines = text.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-comment">// 过滤掉空行或只包含空白字符的行</span><br><span class="hljs-keyword">const</span> nonEmptyLines = lines.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">line</span> =&gt;</span> line.<span class="hljs-title function_">trim</span>() !== <span class="hljs-string">&#x27;&#x27;</span>);<br><br>proxyhosts = proxyhosts.<span class="hljs-title function_">concat</span>(nonEmptyLines);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-comment">//console.error(&#x27;获取地址时出错:&#x27;, error);</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (proxyhosts.<span class="hljs-property">length</span> != <span class="hljs-number">0</span>) proxyhost = proxyhosts[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * proxyhosts.<span class="hljs-property">length</span>)] + <span class="hljs-string">&quot;/&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (userAgent.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;mozilla&#x27;</span>) &amp;&amp; !subParams.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">_searchParams</span> =&gt;</span> _url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(_searchParams))) &#123;<br><span class="hljs-keyword">const</span> newSocks5s = socks5s.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">socks5Address</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (socks5Address.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;@&#x27;</span>)) <span class="hljs-keyword">return</span> socks5Address.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;@&#x27;</span>)[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (socks5Address.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;//&#x27;</span>)) <span class="hljs-keyword">return</span> socks5Address.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;//&#x27;</span>)[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> socks5Address;<br>&#125;);<br><br><span class="hljs-keyword">let</span> socks5List = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span> (go2Socks5s.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; enableSocks) &#123;<br>socks5List = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-string">&#x27;SOCKS5%EF%BC%88%E7%99%BD%E5%90%8D%E5%8D%95%EF%BC%89%3A%20&#x27;</span>)&#125;</span>`</span>;<br><span class="hljs-keyword">if</span> (go2Socks5s.<span class="hljs-title function_">includes</span>(<span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;YWxsIGlu&#x27;</span>)) || go2Socks5s.<span class="hljs-title function_">includes</span>(<span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;Kg==&#x27;</span>))) socks5List += <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-string">&#x27;%E6%89%80%E6%9C%89%E6%B5%81%E9%87%8F&#x27;</span>)&#125;</span>&lt;br&gt;`</span>;<br><span class="hljs-keyword">else</span> socks5List += <span class="hljs-string">`&lt;br&gt;&amp;nbsp;&amp;nbsp;<span class="hljs-subst">$&#123;go2Socks5s.join(<span class="hljs-string">&#x27;&lt;br&gt;&amp;nbsp;&amp;nbsp;&#x27;</span>)&#125;</span>&lt;br&gt;`</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> 订阅器 = <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span> (sub) &#123;<br><span class="hljs-keyword">if</span> (enableSocks) 订阅器 += <span class="hljs-string">`CFCDN（访问方式）: Socks5&lt;br&gt;&amp;nbsp;&amp;nbsp;<span class="hljs-subst">$&#123;newSocks5s.join(<span class="hljs-string">&#x27;&lt;br&gt;&amp;nbsp;&amp;nbsp;&#x27;</span>)&#125;</span>&lt;br&gt;<span class="hljs-subst">$&#123;socks5List&#125;</span>`</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (proxyIP &amp;&amp; proxyIP != <span class="hljs-string">&#x27;&#x27;</span>) 订阅器 += <span class="hljs-string">`CFCDN（访问方式）: ProxyIP&lt;br&gt;&amp;nbsp;&amp;nbsp;<span class="hljs-subst">$&#123;proxyIPs.join(<span class="hljs-string">&#x27;&lt;br&gt;&amp;nbsp;&amp;nbsp;&#x27;</span>)&#125;</span>&lt;br&gt;`</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title class_">RproxyIP</span> == <span class="hljs-string">&#x27;true&#x27;</span>) 订阅器 += <span class="hljs-string">`CFCDN（访问方式）: 自动获取ProxyIP&lt;br&gt;`</span>;<br><span class="hljs-keyword">else</span> 订阅器 += <span class="hljs-string">`CFCDN（访问方式）: 无法访问, 需要您设置 proxyIP/PROXYIP ！！！&lt;br&gt;`</span><br>订阅器 += <span class="hljs-string">`&lt;br&gt;SUB（优选订阅生成器）: <span class="hljs-subst">$&#123;sub&#125;</span>`</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (enableSocks) 订阅器 += <span class="hljs-string">`CFCDN（访问方式）: Socks5&lt;br&gt;&amp;nbsp;&amp;nbsp;<span class="hljs-subst">$&#123;newSocks5s.join(<span class="hljs-string">&#x27;&lt;br&gt;&amp;nbsp;&amp;nbsp;&#x27;</span>)&#125;</span>&lt;br&gt;<span class="hljs-subst">$&#123;socks5List&#125;</span>`</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (proxyIP &amp;&amp; proxyIP != <span class="hljs-string">&#x27;&#x27;</span>) 订阅器 += <span class="hljs-string">`CFCDN（访问方式）: ProxyIP&lt;br&gt;&amp;nbsp;&amp;nbsp;<span class="hljs-subst">$&#123;proxyIPs.join(<span class="hljs-string">&#x27;&lt;br&gt;&amp;nbsp;&amp;nbsp;&#x27;</span>)&#125;</span>&lt;br&gt;`</span>;<br><span class="hljs-keyword">else</span> 订阅器 += <span class="hljs-string">`CFCDN（访问方式）: 无法访问, 需要您设置 proxyIP/PROXYIP ！！！&lt;br&gt;`</span>;<br><span class="hljs-keyword">let</span> 判断是否绑定<span class="hljs-variable constant_">KV</span>空间 = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span> (env.<span class="hljs-property">KV</span>) 判断是否绑定<span class="hljs-variable constant_">KV</span>空间 = <span class="hljs-string">` &lt;a href=&#x27;<span class="hljs-subst">$&#123;_url.pathname&#125;</span>/edit&#x27;&gt;编辑优选列表&lt;/a&gt;`</span>;<br>订阅器 += <span class="hljs-string">`&lt;br&gt;您的订阅内容由 内置 addresses/ADD* 参数变量提供<span class="hljs-subst">$&#123;判断是否绑定KV空间&#125;</span>&lt;br&gt;`</span>;<br><span class="hljs-keyword">if</span> (addresses.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) 订阅器 += <span class="hljs-string">`ADD（TLS优选域名&amp;IP）: &lt;br&gt;&amp;nbsp;&amp;nbsp;<span class="hljs-subst">$&#123;addresses.join(<span class="hljs-string">&#x27;&lt;br&gt;&amp;nbsp;&amp;nbsp;&#x27;</span>)&#125;</span>&lt;br&gt;`</span>;<br><span class="hljs-keyword">if</span> (addressesnotls.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) 订阅器 += <span class="hljs-string">`ADDNOTLS（noTLS优选域名&amp;IP）: &lt;br&gt;&amp;nbsp;&amp;nbsp;<span class="hljs-subst">$&#123;addressesnotls.join(<span class="hljs-string">&#x27;&lt;br&gt;&amp;nbsp;&amp;nbsp;&#x27;</span>)&#125;</span>&lt;br&gt;`</span>;<br><span class="hljs-keyword">if</span> (addressesapi.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) 订阅器 += <span class="hljs-string">`ADDAPI（TLS优选域名&amp;IP 的 API）: &lt;br&gt;&amp;nbsp;&amp;nbsp;<span class="hljs-subst">$&#123;addressesapi.join(<span class="hljs-string">&#x27;&lt;br&gt;&amp;nbsp;&amp;nbsp;&#x27;</span>)&#125;</span>&lt;br&gt;`</span>;<br><span class="hljs-keyword">if</span> (addressesnotlsapi.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) 订阅器 += <span class="hljs-string">`ADDNOTLSAPI（noTLS优选域名&amp;IP 的 API）: &lt;br&gt;&amp;nbsp;&amp;nbsp;<span class="hljs-subst">$&#123;addressesnotlsapi.join(<span class="hljs-string">&#x27;&lt;br&gt;&amp;nbsp;&amp;nbsp;&#x27;</span>)&#125;</span>&lt;br&gt;`</span>;<br><span class="hljs-keyword">if</span> (addressescsv.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) 订阅器 += <span class="hljs-string">`ADDCSV（IPTest测速csv文件 限速 <span class="hljs-subst">$&#123;DLS&#125;</span> ）: &lt;br&gt;&amp;nbsp;&amp;nbsp;<span class="hljs-subst">$&#123;addressescsv.join(<span class="hljs-string">&#x27;&lt;br&gt;&amp;nbsp;&amp;nbsp;&#x27;</span>)&#125;</span>&lt;br&gt;`</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (动态<span class="hljs-variable constant_">UUID</span> &amp;&amp; _url.<span class="hljs-property">pathname</span> !== <span class="hljs-string">`/<span class="hljs-subst">$&#123;动态UUID&#125;</span>`</span>) 订阅器 = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">else</span> 订阅器 += <span class="hljs-string">`&lt;br&gt;SUBAPI（订阅转换后端）: <span class="hljs-subst">$&#123;subProtocol&#125;</span>://<span class="hljs-subst">$&#123;subConverter&#125;</span>&lt;br&gt;SUBCONFIG（订阅转换配置文件）: <span class="hljs-subst">$&#123;subConfig&#125;</span>`</span>;<br><span class="hljs-keyword">const</span> 动态<span class="hljs-variable constant_">UUID</span>信息 = (uuid != userID) ? <span class="hljs-string">`TOKEN: <span class="hljs-subst">$&#123;uuid&#125;</span>&lt;br&gt;UUIDNow: <span class="hljs-subst">$&#123;userID&#125;</span>&lt;br&gt;UUIDLow: <span class="hljs-subst">$&#123;userIDLow&#125;</span>&lt;br&gt;<span class="hljs-subst">$&#123;userIDTime&#125;</span>TIME（动态UUID有效时间）: <span class="hljs-subst">$&#123;有效时间&#125;</span> 天&lt;br&gt;UPTIME（动态UUID更新时间）: <span class="hljs-subst">$&#123;更新时间&#125;</span> 时（北京时间）&lt;br&gt;&lt;br&gt;`</span> : <span class="hljs-string">`<span class="hljs-subst">$&#123;userIDTime&#125;</span>`</span>;<br><span class="hljs-keyword">const</span> 节点配置页 = <span class="hljs-string">`</span><br><span class="hljs-string">################################################################&lt;br&gt;</span><br><span class="hljs-string">Subscribe / sub 订阅地址, 点击链接自动 &lt;strong&gt;复制订阅链接&lt;/strong&gt; 并 &lt;strong&gt;生成订阅二维码&lt;/strong&gt; &lt;br&gt;</span><br><span class="hljs-string">---------------------------------------------------------------&lt;br&gt;</span><br><span class="hljs-string">自适应订阅地址:&lt;br&gt;</span><br><span class="hljs-string">&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;copyToClipboard(&#x27;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>?sub&#x27;,&#x27;qrcode_0&#x27;)&quot; style=&quot;color:blue;text-decoration:underline;cursor:pointer;&quot;&gt;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>&lt;/a&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;div id=&quot;qrcode_0&quot; style=&quot;margin: 10px 10px 10px 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">Base64订阅地址:&lt;br&gt;</span><br><span class="hljs-string">&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;copyToClipboard(&#x27;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>?b64&#x27;,&#x27;qrcode_1&#x27;)&quot; style=&quot;color:blue;text-decoration:underline;cursor:pointer;&quot;&gt;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>?b64&lt;/a&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;div id=&quot;qrcode_1&quot; style=&quot;margin: 10px 10px 10px 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">clash订阅地址:&lt;br&gt;</span><br><span class="hljs-string">&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;copyToClipboard(&#x27;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>?clash&#x27;,&#x27;qrcode_2&#x27;)&quot; style=&quot;color:blue;text-decoration:underline;cursor:pointer;&quot;&gt;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>?clash&lt;/a&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;div id=&quot;qrcode_2&quot; style=&quot;margin: 10px 10px 10px 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">singbox订阅地址:&lt;br&gt;</span><br><span class="hljs-string">&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;copyToClipboard(&#x27;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>?sb&#x27;,&#x27;qrcode_3&#x27;)&quot; style=&quot;color:blue;text-decoration:underline;cursor:pointer;&quot;&gt;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>?sb&lt;/a&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;div id=&quot;qrcode_3&quot; style=&quot;margin: 10px 10px 10px 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">loon订阅地址:&lt;br&gt;</span><br><span class="hljs-string">&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;copyToClipboard(&#x27;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>?loon&#x27;,&#x27;qrcode_5&#x27;)&quot; style=&quot;color:blue;text-decoration:underline;cursor:pointer;&quot;&gt;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>?loon&lt;/a&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;div id=&quot;qrcode_5&quot; style=&quot;margin: 10px 10px 10px 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">&lt;strong&gt;&lt;a href=&quot;javascript:void(0);&quot; id=&quot;noticeToggle&quot; onclick=&quot;toggleNotice()&quot;&gt;实用订阅技巧∨&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;div id=&quot;noticeContent&quot; class=&quot;notice-content&quot; style=&quot;display: none;&quot;&gt;</span><br><span class="hljs-string">&lt;strong&gt;1.&lt;/strong&gt; 如您使用的是 PassWall、PassWall2 路由插件，订阅编辑的 &lt;strong&gt;用户代理(User-Agent)&lt;/strong&gt; 设置为 &lt;strong&gt;PassWall&lt;/strong&gt; 即可；&lt;br&gt;</span><br><span class="hljs-string">&lt;br&gt;</span><br><span class="hljs-string">&lt;strong&gt;2.&lt;/strong&gt; 如您使用的是 SSR+ 路由插件，推荐使用 &lt;strong&gt;Base64订阅地址&lt;/strong&gt; 进行订阅；&lt;br&gt;</span><br><span class="hljs-string">&lt;br&gt;</span><br><span class="hljs-string">&lt;strong&gt;3.&lt;/strong&gt; 快速切换 &lt;a href=&#x27;<span class="hljs-subst">$&#123;atob(<span class="hljs-string">&#x27;aHR0cHM6Ly9naXRodWIuY29tL2NtbGl1L1dvcmtlclZsZXNzMnN1Yg==&#x27;</span>)&#125;</span>&#x27;&gt;优选订阅生成器&lt;/a&gt; 至：sub.google.com，您可将&quot;?sub=sub.google.com&quot;参数添加到链接末尾，例如：&lt;br&gt;</span><br><span class="hljs-string">&amp;nbsp;&amp;nbsp;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>&lt;strong&gt;?sub=sub.google.com&lt;/strong&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;br&gt;</span><br><span class="hljs-string">&lt;strong&gt;4.&lt;/strong&gt; 快速更换 PROXYIP 至：proxyip.cmliussss.net:443，您可将&quot;?proxyip=proxyip.cmliussss.net:443&quot;参数添加到链接末尾，例如：&lt;br&gt;</span><br><span class="hljs-string">&amp;nbsp;&amp;nbsp; https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>&lt;strong&gt;?proxyip=proxyip.cmliussss.net:443&lt;/strong&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;br&gt;</span><br><span class="hljs-string">&lt;strong&gt;5.&lt;/strong&gt; 快速更换 SOCKS5 至：user:password@127.0.0.1:1080，您可将&quot;?socks5=user:password@127.0.0.1:1080&quot;参数添加到链接末尾，例如：&lt;br&gt;</span><br><span class="hljs-string">&amp;nbsp;&amp;nbsp;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>&lt;strong&gt;?socks5=user:password@127.0.0.1:1080&lt;/strong&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;br&gt;</span><br><span class="hljs-string">&lt;strong&gt;6.&lt;/strong&gt; 如需指定多个参数则需要使用&#x27;&amp;&#x27;做间隔，例如：&lt;br&gt;</span><br><span class="hljs-string">&amp;nbsp;&amp;nbsp;https://<span class="hljs-subst">$&#123;proxyhost&#125;</span><span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>?sub=sub.google.com&lt;strong&gt;&amp;&lt;/strong&gt;proxyip=proxyip.cmliussss.net&lt;br&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/@keeex/qrcodejs-kx@1.0.2/qrcode.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;script&gt;</span><br><span class="hljs-string">function copyToClipboard(text, qrcode) &#123;</span><br><span class="hljs-string">navigator.clipboard.writeText(text).then(() =&gt; &#123;</span><br><span class="hljs-string">alert(&#x27;已复制到剪贴板&#x27;);</span><br><span class="hljs-string">&#125;).catch(err =&gt; &#123;</span><br><span class="hljs-string">console.error(&#x27;复制失败:&#x27;, err);</span><br><span class="hljs-string">&#125;);</span><br><span class="hljs-string">const qrcodeDiv = document.getElementById(qrcode);</span><br><span class="hljs-string">qrcodeDiv.innerHTML = &#x27;&#x27;;</span><br><span class="hljs-string">new QRCode(qrcodeDiv, &#123;</span><br><span class="hljs-string">text: text,</span><br><span class="hljs-string">width: 220, // 调整宽度</span><br><span class="hljs-string">height: 220, // 调整高度</span><br><span class="hljs-string">colorDark: &quot;#000000&quot;, // 二维码颜色</span><br><span class="hljs-string">colorLight: &quot;#ffffff&quot;, // 背景颜色</span><br><span class="hljs-string">correctLevel: QRCode.CorrectLevel.Q, // 设置纠错级别</span><br><span class="hljs-string">scale: 1 // 调整像素颗粒度</span><br><span class="hljs-string">&#125;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">function toggleNotice() &#123;</span><br><span class="hljs-string">const noticeContent = document.getElementById(&#x27;noticeContent&#x27;);</span><br><span class="hljs-string">const noticeToggle = document.getElementById(&#x27;noticeToggle&#x27;);</span><br><span class="hljs-string">if (noticeContent.style.display === &#x27;none&#x27;) &#123;</span><br><span class="hljs-string">noticeContent.style.display = &#x27;block&#x27;;</span><br><span class="hljs-string">noticeToggle.textContent = &#x27;实用订阅技巧∧&#x27;;</span><br><span class="hljs-string">&#125; else &#123;</span><br><span class="hljs-string">noticeContent.style.display = &#x27;none&#x27;; </span><br><span class="hljs-string">noticeToggle.textContent = &#x27;实用订阅技巧∨&#x27;;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&lt;/script&gt;</span><br><span class="hljs-string">---------------------------------------------------------------&lt;br&gt;</span><br><span class="hljs-string">################################################################&lt;br&gt;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;FileName&#125;</span> 配置信息&lt;br&gt;</span><br><span class="hljs-string">---------------------------------------------------------------&lt;br&gt;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;动态UUID信息&#125;</span>HOST: <span class="hljs-subst">$&#123;hostName&#125;</span>&lt;br&gt;</span><br><span class="hljs-string">UUID: <span class="hljs-subst">$&#123;userID&#125;</span>&lt;br&gt;</span><br><span class="hljs-string">FKID: <span class="hljs-subst">$&#123;fakeUserID&#125;</span>&lt;br&gt;</span><br><span class="hljs-string">UA: <span class="hljs-subst">$&#123;UA&#125;</span>&lt;br&gt;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;订阅器&#125;</span>&lt;br&gt;</span><br><span class="hljs-string">---------------------------------------------------------------&lt;br&gt;</span><br><span class="hljs-string">################################################################&lt;br&gt;</span><br><span class="hljs-string">v2ray&lt;br&gt;</span><br><span class="hljs-string">---------------------------------------------------------------&lt;br&gt;</span><br><span class="hljs-string">&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;copyToClipboard(&#x27;<span class="hljs-subst">$&#123;v2ray&#125;</span>&#x27;,&#x27;qrcode_v2ray&#x27;)&quot; style=&quot;color:blue;text-decoration:underline;cursor:pointer;&quot;&gt;<span class="hljs-subst">$&#123;v2ray&#125;</span>&lt;/a&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;div id=&quot;qrcode_v2ray&quot; style=&quot;margin: 10px 10px 10px 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">---------------------------------------------------------------&lt;br&gt;</span><br><span class="hljs-string">################################################################&lt;br&gt;</span><br><span class="hljs-string">clash-meta&lt;br&gt;</span><br><span class="hljs-string">---------------------------------------------------------------&lt;br&gt;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;clash&#125;</span>&lt;br&gt;</span><br><span class="hljs-string">---------------------------------------------------------------&lt;br&gt;</span><br><span class="hljs-string">################################################################&lt;br&gt;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;cmad&#125;</span></span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div style=&quot;font-size:13px;&quot;&gt;<span class="hljs-subst">$&#123;节点配置页&#125;</span>&lt;/div&gt;`</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> fetch != <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Error: fetch is not available in this environment.&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> newAddressesapi = [];<br><span class="hljs-keyword">let</span> newAddressescsv = [];<br><span class="hljs-keyword">let</span> newAddressesnotlsapi = [];<br><span class="hljs-keyword">let</span> newAddressesnotlscsv = [];<br><br><span class="hljs-comment">// 如果是使用默认域名，则改成一个workers的域名，订阅器会加上代理</span><br><span class="hljs-keyword">if</span> (hostName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;.workers.dev&quot;</span>)) &#123;<br>noTLS = <span class="hljs-string">&#x27;true&#x27;</span>;<br>fakeHostName = <span class="hljs-string">`<span class="hljs-subst">$&#123;fakeHostName&#125;</span>.workers.dev`</span>;<br>newAddressesnotlsapi = <span class="hljs-keyword">await</span> 整理优选列表(addressesnotlsapi);<br>newAddressesnotlscsv = <span class="hljs-keyword">await</span> 整理测速结果(<span class="hljs-string">&#x27;FALSE&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hostName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;.pages.dev&quot;</span>)) &#123;<br>fakeHostName = <span class="hljs-string">`<span class="hljs-subst">$&#123;fakeHostName&#125;</span>.pages.dev`</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hostName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;worker&quot;</span>) || hostName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;notls&quot;</span>) || noTLS == <span class="hljs-string">&#x27;true&#x27;</span>) &#123;<br>noTLS = <span class="hljs-string">&#x27;true&#x27;</span>;<br>fakeHostName = <span class="hljs-string">`notls<span class="hljs-subst">$&#123;fakeHostName&#125;</span>.net`</span>;<br>newAddressesnotlsapi = <span class="hljs-keyword">await</span> 整理优选列表(addressesnotlsapi);<br>newAddressesnotlscsv = <span class="hljs-keyword">await</span> 整理测速结果(<span class="hljs-string">&#x27;FALSE&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fakeHostName = <span class="hljs-string">`<span class="hljs-subst">$&#123;fakeHostName&#125;</span>.xyz`</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`虚假HOST: <span class="hljs-subst">$&#123;fakeHostName&#125;</span>`</span>);<br><span class="hljs-keyword">let</span> url = <span class="hljs-string">`<span class="hljs-subst">$&#123;subProtocol&#125;</span>://<span class="hljs-subst">$&#123;sub&#125;</span>/sub?host=<span class="hljs-subst">$&#123;fakeHostName&#125;</span>&amp;uuid=<span class="hljs-subst">$&#123;fakeUserID + atob(<span class="hljs-string">&#x27;JmVkZ2V0dW5uZWw9Y21saXUmcHJveHlpcD0=&#x27;</span>) + RproxyIP&#125;</span>&amp;path=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(path)&#125;</span>`</span>;<br><span class="hljs-keyword">let</span> isBase64 = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">if</span> (!sub || sub == <span class="hljs-string">&quot;&quot;</span>) &#123;<br><span class="hljs-keyword">if</span> (hostName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;workers.dev&#x27;</span>)) &#123;<br><span class="hljs-keyword">if</span> (proxyhostsURL &amp;&amp; (!proxyhosts || proxyhosts.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(proxyhostsURL);<br><br><span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;获取地址时出错:&#x27;</span>, response.<span class="hljs-property">status</span>, response.<span class="hljs-property">statusText</span>);<br><span class="hljs-keyword">return</span>; <span class="hljs-comment">// 如果有错误，直接返回</span><br>&#125;<br><br><span class="hljs-keyword">const</span> text = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">text</span>();<br><span class="hljs-keyword">const</span> lines = text.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-comment">// 过滤掉空行或只包含空白字符的行</span><br><span class="hljs-keyword">const</span> nonEmptyLines = lines.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">line</span> =&gt;</span> line.<span class="hljs-title function_">trim</span>() !== <span class="hljs-string">&#x27;&#x27;</span>);<br><br>proxyhosts = proxyhosts.<span class="hljs-title function_">concat</span>(nonEmptyLines);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;获取地址时出错:&#x27;</span>, error);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 使用Set对象去重</span><br>proxyhosts = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(proxyhosts)];<br>&#125;<br><br>newAddressesapi = <span class="hljs-keyword">await</span> 整理优选列表(addressesapi);<br>newAddressescsv = <span class="hljs-keyword">await</span> 整理测速结果(<span class="hljs-string">&#x27;TRUE&#x27;</span>);<br>url = <span class="hljs-string">`https://<span class="hljs-subst">$&#123;hostName&#125;</span>/<span class="hljs-subst">$&#123;fakeUserID + _url.search&#125;</span>`</span>;<br><span class="hljs-keyword">if</span> (hostName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;worker&quot;</span>) || hostName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;notls&quot;</span>) || noTLS == <span class="hljs-string">&#x27;true&#x27;</span>) &#123;<br><span class="hljs-keyword">if</span> (_url.<span class="hljs-property">search</span>) url += <span class="hljs-string">&#x27;&amp;notls&#x27;</span>;<br><span class="hljs-keyword">else</span> url += <span class="hljs-string">&#x27;?notls&#x27;</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`虚假订阅: <span class="hljs-subst">$&#123;url&#125;</span>`</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!userAgent.<span class="hljs-title function_">includes</span>((<span class="hljs-string">&#x27;CF-Workers-SUB&#x27;</span>).<span class="hljs-title function_">toLowerCase</span>()) &amp;&amp; !_url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;b64&#x27;</span>) &amp;&amp; !_url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;base64&#x27;</span>)) &#123;<br><span class="hljs-keyword">if</span> ((userAgent.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;clash&#x27;</span>) &amp;&amp; !userAgent.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;nekobox&#x27;</span>)) || (_url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;clash&#x27;</span>) &amp;&amp; !userAgent.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;subconverter&#x27;</span>))) &#123;<br>url = <span class="hljs-string">`<span class="hljs-subst">$&#123;subProtocol&#125;</span>://<span class="hljs-subst">$&#123;subConverter&#125;</span>/sub?target=clash&amp;url=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(url)&#125;</span>&amp;insert=false&amp;config=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(subConfig)&#125;</span>&amp;emoji=<span class="hljs-subst">$&#123;subEmoji&#125;</span>&amp;list=false&amp;tfo=false&amp;scv=true&amp;fdn=false&amp;sort=false&amp;new_name=true`</span>;<br>isBase64 = <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (userAgent.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;sing-box&#x27;</span>) || userAgent.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;singbox&#x27;</span>) || ((_url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;singbox&#x27;</span>) || _url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;sb&#x27;</span>)) &amp;&amp; !userAgent.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;subconverter&#x27;</span>))) &#123;<br>url = <span class="hljs-string">`<span class="hljs-subst">$&#123;subProtocol&#125;</span>://<span class="hljs-subst">$&#123;subConverter&#125;</span>/sub?target=singbox&amp;url=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(url)&#125;</span>&amp;insert=false&amp;config=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(subConfig)&#125;</span>&amp;emoji=<span class="hljs-subst">$&#123;subEmoji&#125;</span>&amp;list=false&amp;tfo=false&amp;scv=true&amp;fdn=false&amp;sort=false&amp;new_name=true`</span>;<br>isBase64 = <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (userAgent.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;loon&#x27;</span>) || (_url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;loon&#x27;</span>) &amp;&amp; !userAgent.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;subconverter&#x27;</span>))) &#123;<br>url = <span class="hljs-string">`<span class="hljs-subst">$&#123;subProtocol&#125;</span>://<span class="hljs-subst">$&#123;subConverter&#125;</span>/sub?target=loon&amp;url=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(url)&#125;</span>&amp;insert=false&amp;config=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(subConfig)&#125;</span>&amp;emoji=<span class="hljs-subst">$&#123;subEmoji&#125;</span>&amp;list=false&amp;tfo=false&amp;scv=true&amp;fdn=false&amp;sort=false&amp;new_name=true`</span>;<br>isBase64 = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">let</span> content;<br><span class="hljs-keyword">if</span> ((!sub || sub == <span class="hljs-string">&quot;&quot;</span>) &amp;&amp; isBase64 == <span class="hljs-literal">true</span>) &#123;<br>content = <span class="hljs-keyword">await</span> 生成本地订阅(fakeHostName, fakeUserID, noTLS, newAddressesapi, newAddressescsv, newAddressesnotlsapi, newAddressesnotlscsv);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url, &#123;<br><span class="hljs-attr">headers</span>: &#123;<br><span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-variable constant_">UA</span> + <span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;IENGLVdvcmtlcnMtZWRnZXR1bm5lbC9jbWxpdQ==&#x27;</span>)<br>&#125;<br>&#125;);<br>content = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">text</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (_url.<span class="hljs-property">pathname</span> == <span class="hljs-string">`/<span class="hljs-subst">$&#123;fakeUserID&#125;</span>`</span>) <span class="hljs-keyword">return</span> content;<br><br><span class="hljs-keyword">return</span> 恢复伪装信息(content, userID, hostName, fakeUserID, fakeHostName, isBase64);<br><br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error fetching content:&#x27;</span>, error);<br><span class="hljs-keyword">return</span> <span class="hljs-string">`Error fetching content: <span class="hljs-subst">$&#123;error.message&#125;</span>`</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> 整理优选列表(api) &#123;<br><span class="hljs-keyword">if</span> (!api || api.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> [];<br><br><span class="hljs-keyword">let</span> newapi = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">// 创建一个AbortController对象，用于控制fetch请求的取消</span><br><span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br><br><span class="hljs-keyword">const</span> timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>controller.<span class="hljs-title function_">abort</span>(); <span class="hljs-comment">// 取消所有请求</span><br>&#125;, <span class="hljs-number">2000</span>); <span class="hljs-comment">// 2秒后触发</span><br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 使用Promise.allSettled等待所有API请求完成，无论成功或失败</span><br><span class="hljs-comment">// 对api数组进行遍历，对每个API地址发起fetch请求</span><br><span class="hljs-keyword">const</span> responses = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>(api.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">apiUrl</span> =&gt;</span> <span class="hljs-title function_">fetch</span>(apiUrl, &#123;<br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br><span class="hljs-attr">headers</span>: &#123;<br><span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;&#x27;</span>,<br><span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-title function_">atob</span>(<span class="hljs-string">&#x27;Q0YtV29ya2Vycy1lZGdldHVubmVsL2NtbGl1&#x27;</span>)<br>&#125;,<br><span class="hljs-attr">signal</span>: controller.<span class="hljs-property">signal</span> <span class="hljs-comment">// 将AbortController的信号量添加到fetch请求中，以便于需要时可以取消请求</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-property">ok</span> ? response.<span class="hljs-title function_">text</span>() : <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>())));<br><br><span class="hljs-comment">// 遍历所有响应</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [index, response] <span class="hljs-keyword">of</span> responses.<span class="hljs-title function_">entries</span>()) &#123;<br><span class="hljs-comment">// 检查响应状态是否为&#x27;fulfilled&#x27;，即请求成功完成</span><br><span class="hljs-keyword">if</span> (response.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) &#123;<br><span class="hljs-comment">// 获取响应的内容</span><br><span class="hljs-keyword">const</span> content = <span class="hljs-keyword">await</span> response.<span class="hljs-property">value</span>;<br><br><span class="hljs-keyword">const</span> lines = content.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/\r?\n/</span>);<br><span class="hljs-keyword">let</span> 节点备注 = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">let</span> 测速端口 = <span class="hljs-string">&#x27;443&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (lines[<span class="hljs-number">0</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>).<span class="hljs-property">length</span> &gt; <span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">const</span> idMatch = api[index].<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/id=([^&amp;]*)/</span>);<br><span class="hljs-keyword">if</span> (idMatch) 节点备注 = idMatch[<span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">const</span> portMatch = api[index].<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/port=([^&amp;]*)/</span>);<br><span class="hljs-keyword">if</span> (portMatch) 测速端口 = portMatch[<span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; lines.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-keyword">const</span> columns = lines[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">if</span> (columns) &#123;<br>newapi += <span class="hljs-string">`<span class="hljs-subst">$&#123;columns&#125;</span>:<span class="hljs-subst">$&#123;测速端口&#125;</span><span class="hljs-subst">$&#123;节点备注 ? <span class="hljs-string">`#<span class="hljs-subst">$&#123;节点备注&#125;</span>`</span> : <span class="hljs-string">&#x27;&#x27;</span>&#125;</span>\n`</span>;<br><span class="hljs-keyword">if</span> (api[index].<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;proxyip=true&#x27;</span>)) proxyIPPool.<span class="hljs-title function_">push</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;columns&#125;</span>:<span class="hljs-subst">$&#123;测速端口&#125;</span>`</span>);<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 验证当前apiUrl是否带有&#x27;proxyip=true&#x27;</span><br><span class="hljs-keyword">if</span> (api[index].<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;proxyip=true&#x27;</span>)) &#123;<br><span class="hljs-comment">// 如果URL带有&#x27;proxyip=true&#x27;，则将内容添加到proxyIPPool</span><br>proxyIPPool = proxyIPPool.<span class="hljs-title function_">concat</span>((<span class="hljs-keyword">await</span> 整理(content)).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> baseItem = item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;#&#x27;</span>)[<span class="hljs-number">0</span>] || item;<br><span class="hljs-keyword">if</span> (baseItem.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;:&#x27;</span>)) &#123;<br><span class="hljs-keyword">const</span> port = baseItem.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (!httpsPorts.<span class="hljs-title function_">includes</span>(port)) &#123;<br><span class="hljs-keyword">return</span> baseItem;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;baseItem&#125;</span>:443`</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 不符合条件时返回 null</span><br>&#125;).<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>)); <span class="hljs-comment">// 过滤掉 null 值</span><br>&#125;<br><span class="hljs-comment">// 将内容添加到newapi中</span><br>newapi += content + <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 无论成功或失败，最后都清除设置的超时定时器</span><br><span class="hljs-built_in">clearTimeout</span>(timeout);<br>&#125;<br><br><span class="hljs-keyword">const</span> newAddressesapi = <span class="hljs-keyword">await</span> 整理(newapi);<br><br><span class="hljs-comment">// 返回处理后的结果</span><br><span class="hljs-keyword">return</span> newAddressesapi;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> 整理测速结果(tls) &#123;<br><span class="hljs-keyword">if</span> (!addressescsv || addressescsv.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> [];<br>&#125;<br><br><span class="hljs-keyword">let</span> newAddressescsv = [];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> csvUrl <span class="hljs-keyword">of</span> addressescsv) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(csvUrl);<br><br><span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;获取CSV地址时出错:&#x27;</span>, response.<span class="hljs-property">status</span>, response.<span class="hljs-property">statusText</span>);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> text = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">text</span>();<span class="hljs-comment">// 使用正确的字符编码解析文本内容</span><br><span class="hljs-keyword">let</span> lines;<br><span class="hljs-keyword">if</span> (text.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;\r\n&#x27;</span>)) &#123;<br>lines = text.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\r\n&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>lines = text.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 检查CSV头部是否包含必需字段</span><br><span class="hljs-keyword">const</span> header = lines[<span class="hljs-number">0</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br><span class="hljs-keyword">const</span> tlsIndex = header.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;TLS&#x27;</span>);<br><br><span class="hljs-keyword">const</span> ipAddressIndex = <span class="hljs-number">0</span>;<span class="hljs-comment">// IP地址在 CSV 头部的位置</span><br><span class="hljs-keyword">const</span> portIndex = <span class="hljs-number">1</span>;<span class="hljs-comment">// 端口在 CSV 头部的位置</span><br><span class="hljs-keyword">const</span> dataCenterIndex = tlsIndex + remarkIndex; <span class="hljs-comment">// 数据中心是 TLS 的后一个字段</span><br><br><span class="hljs-keyword">if</span> (tlsIndex === -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;CSV文件缺少必需的字段&#x27;</span>);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-comment">// 从第二行开始遍历CSV行</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; lines.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-keyword">const</span> columns = lines[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br><span class="hljs-keyword">const</span> speedIndex = columns.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; <span class="hljs-comment">// 最后一个字段</span><br><span class="hljs-comment">// 检查TLS是否为&quot;TRUE&quot;且速度大于DLS</span><br><span class="hljs-keyword">if</span> (columns[tlsIndex].<span class="hljs-title function_">toUpperCase</span>() === tls &amp;&amp; <span class="hljs-built_in">parseFloat</span>(columns[speedIndex]) &gt; <span class="hljs-variable constant_">DLS</span>) &#123;<br><span class="hljs-keyword">const</span> ipAddress = columns[ipAddressIndex];<br><span class="hljs-keyword">const</span> port = columns[portIndex];<br><span class="hljs-keyword">const</span> dataCenter = columns[dataCenterIndex];<br><br><span class="hljs-keyword">const</span> formattedAddress = <span class="hljs-string">`<span class="hljs-subst">$&#123;ipAddress&#125;</span>:<span class="hljs-subst">$&#123;port&#125;</span>#<span class="hljs-subst">$&#123;dataCenter&#125;</span>`</span>;<br>newAddressescsv.<span class="hljs-title function_">push</span>(formattedAddress);<br><span class="hljs-keyword">if</span> (csvUrl.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;proxyip=true&#x27;</span>) &amp;&amp; columns[tlsIndex].<span class="hljs-title function_">toUpperCase</span>() == <span class="hljs-string">&#x27;true&#x27;</span> &amp;&amp; !httpsPorts.<span class="hljs-title function_">includes</span>(port)) &#123;<br><span class="hljs-comment">// 如果URL带有&#x27;proxyip=true&#x27;，则将内容添加到proxyIPPool</span><br>proxyIPPool.<span class="hljs-title function_">push</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;ipAddress&#125;</span>:<span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;获取CSV地址时出错:&#x27;</span>, error);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> newAddressescsv;<br>&#125;<br><br><span class="hljs-keyword">function</span> 生成本地订阅(host, <span class="hljs-variable constant_">UUID</span>, noTLS, newAddressesapi, newAddressescsv, newAddressesnotlsapi, newAddressesnotlscsv) &#123;<br><span class="hljs-keyword">const</span> regex = <span class="hljs-regexp">/^(\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;|\[.*\]):?(\d+)?#?(.*)?$/</span>;<br>addresses = addresses.<span class="hljs-title function_">concat</span>(newAddressesapi);<br>addresses = addresses.<span class="hljs-title function_">concat</span>(newAddressescsv);<br><span class="hljs-keyword">let</span> notlsresponseBody;<br><span class="hljs-keyword">if</span> (noTLS == <span class="hljs-string">&#x27;true&#x27;</span>) &#123;<br>addressesnotls = addressesnotls.<span class="hljs-title function_">concat</span>(newAddressesnotlsapi);<br>addressesnotls = addressesnotls.<span class="hljs-title function_">concat</span>(newAddressesnotlscsv);<br><span class="hljs-keyword">const</span> uniqueAddressesnotls = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(addressesnotls)];<br><br>notlsresponseBody = uniqueAddressesnotls.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">address</span> =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> port = <span class="hljs-string">&quot;-1&quot;</span>;<br><span class="hljs-keyword">let</span> addressid = address;<br><br><span class="hljs-keyword">const</span> match = addressid.<span class="hljs-title function_">match</span>(regex);<br><span class="hljs-keyword">if</span> (!match) &#123;<br><span class="hljs-keyword">if</span> (address.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;:&#x27;</span>) &amp;&amp; address.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;#&#x27;</span>)) &#123;<br><span class="hljs-keyword">const</span> parts = address.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>);<br>address = parts[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">const</span> subParts = parts[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;#&#x27;</span>);<br>port = subParts[<span class="hljs-number">0</span>];<br>addressid = subParts[<span class="hljs-number">1</span>];<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (address.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;:&#x27;</span>)) &#123;<br><span class="hljs-keyword">const</span> parts = address.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>);<br>address = parts[<span class="hljs-number">0</span>];<br>port = parts[<span class="hljs-number">1</span>];<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (address.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;#&#x27;</span>)) &#123;<br><span class="hljs-keyword">const</span> parts = address.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;#&#x27;</span>);<br>address = parts[<span class="hljs-number">0</span>];<br>addressid = parts[<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-keyword">if</span> (addressid.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;:&#x27;</span>)) &#123;<br>addressid = addressid.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">0</span>];<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>address = match[<span class="hljs-number">1</span>];<br>port = match[<span class="hljs-number">2</span>] || port;<br>addressid = match[<span class="hljs-number">3</span>] || address;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isValidIPv4</span>(address) &amp;&amp; port == <span class="hljs-string">&quot;-1&quot;</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> httpPort <span class="hljs-keyword">of</span> httpPorts) &#123;<br><span class="hljs-keyword">if</span> (address.<span class="hljs-title function_">includes</span>(httpPort)) &#123;<br>port = httpPort;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (port == <span class="hljs-string">&quot;-1&quot;</span>) port = <span class="hljs-string">&quot;80&quot;</span>;<br><br><span class="hljs-keyword">let</span> 伪装域名 = host;<br><span class="hljs-keyword">let</span> 最终路径 = path;<br><span class="hljs-keyword">let</span> 节点备注 = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">const</span> 协议类型 = <span class="hljs-title function_">atob</span>(啥啥啥_写的这是啥啊);<br><br><span class="hljs-keyword">const</span> 维列斯<span class="hljs-title class_">Link</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;协议类型&#125;</span>://<span class="hljs-subst">$&#123;UUID&#125;</span>@<span class="hljs-subst">$&#123;address&#125;</span>:<span class="hljs-subst">$&#123;port + atob(<span class="hljs-string">&#x27;P2VuY3J5cHRpb249bm9uZSZzZWN1cml0eT0mdHlwZT13cyZob3N0PQ==&#x27;</span>) + 伪装域名&#125;</span>&amp;path=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(最终路径)&#125;</span>#<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(addressid + 节点备注)&#125;</span>`</span>;<br><br><span class="hljs-keyword">return</span> 维列斯<span class="hljs-title class_">Link</span>;<br><br>&#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><br>&#125;<br><br><span class="hljs-comment">// 使用Set对象去重</span><br><span class="hljs-keyword">const</span> uniqueAddresses = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(addresses)];<br><br><span class="hljs-keyword">const</span> responseBody = uniqueAddresses.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">address</span> =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> port = <span class="hljs-string">&quot;-1&quot;</span>;<br><span class="hljs-keyword">let</span> addressid = address;<br><br><span class="hljs-keyword">const</span> match = addressid.<span class="hljs-title function_">match</span>(regex);<br><span class="hljs-keyword">if</span> (!match) &#123;<br><span class="hljs-keyword">if</span> (address.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;:&#x27;</span>) &amp;&amp; address.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;#&#x27;</span>)) &#123;<br><span class="hljs-keyword">const</span> parts = address.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>);<br>address = parts[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">const</span> subParts = parts[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;#&#x27;</span>);<br>port = subParts[<span class="hljs-number">0</span>];<br>addressid = subParts[<span class="hljs-number">1</span>];<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (address.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;:&#x27;</span>)) &#123;<br><span class="hljs-keyword">const</span> parts = address.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>);<br>address = parts[<span class="hljs-number">0</span>];<br>port = parts[<span class="hljs-number">1</span>];<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (address.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;#&#x27;</span>)) &#123;<br><span class="hljs-keyword">const</span> parts = address.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;#&#x27;</span>);<br>address = parts[<span class="hljs-number">0</span>];<br>addressid = parts[<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-keyword">if</span> (addressid.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;:&#x27;</span>)) &#123;<br>addressid = addressid.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">0</span>];<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>address = match[<span class="hljs-number">1</span>];<br>port = match[<span class="hljs-number">2</span>] || port;<br>addressid = match[<span class="hljs-number">3</span>] || address;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isValidIPv4</span>(address) &amp;&amp; port == <span class="hljs-string">&quot;-1&quot;</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> httpsPort <span class="hljs-keyword">of</span> httpsPorts) &#123;<br><span class="hljs-keyword">if</span> (address.<span class="hljs-title function_">includes</span>(httpsPort)) &#123;<br>port = httpsPort;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (port == <span class="hljs-string">&quot;-1&quot;</span>) port = <span class="hljs-string">&quot;443&quot;</span>;<br><br><span class="hljs-keyword">let</span> 伪装域名 = host;<br><span class="hljs-keyword">let</span> 最终路径 = path;<br><span class="hljs-keyword">let</span> 节点备注 = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">const</span> matchingProxyIP = proxyIPPool.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">proxyIP</span> =&gt;</span> proxyIP.<span class="hljs-title function_">includes</span>(address));<br><span class="hljs-keyword">if</span> (matchingProxyIP) 最终路径 += <span class="hljs-string">`&amp;proxyip=<span class="hljs-subst">$&#123;matchingProxyIP&#125;</span>`</span>;<br><br><span class="hljs-keyword">if</span> (proxyhosts.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; (伪装域名.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;.workers.dev&#x27;</span>))) &#123;<br>最终路径 = <span class="hljs-string">`/<span class="hljs-subst">$&#123;伪装域名&#125;</span><span class="hljs-subst">$&#123;最终路径&#125;</span>`</span>;<br>伪装域名 = proxyhosts[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * proxyhosts.<span class="hljs-property">length</span>)];<br>节点备注 = <span class="hljs-string">` 已启用临时域名中转服务，请尽快绑定自定义域！`</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> 协议类型 = <span class="hljs-title function_">atob</span>(啥啥啥_写的这是啥啊);<br><span class="hljs-keyword">const</span> 维列斯<span class="hljs-title class_">Link</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;协议类型&#125;</span>://<span class="hljs-subst">$&#123;UUID&#125;</span>@<span class="hljs-subst">$&#123;address&#125;</span>:<span class="hljs-subst">$&#123;port + atob(<span class="hljs-string">&#x27;P2VuY3J5cHRpb249bm9uZSZzZWN1cml0eT10bHMmc25pPQ==&#x27;</span>) + 伪装域名&#125;</span>&amp;fp=random&amp;type=ws&amp;host=<span class="hljs-subst">$&#123;伪装域名&#125;</span>&amp;path=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(最终路径)&#125;</span>#<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(addressid + 节点备注)&#125;</span>`</span>;<br><br><span class="hljs-keyword">return</span> 维列斯<span class="hljs-title class_">Link</span>;<br>&#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><br><span class="hljs-keyword">let</span> base64Response = responseBody; <span class="hljs-comment">// 重新进行 Base64 编码</span><br><span class="hljs-keyword">if</span> (noTLS == <span class="hljs-string">&#x27;true&#x27;</span>) base64Response += <span class="hljs-string">`\n<span class="hljs-subst">$&#123;notlsresponseBody&#125;</span>`</span>;<br><span class="hljs-keyword">if</span> (link.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) base64Response += <span class="hljs-string">&#x27;\n&#x27;</span> + link.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">btoa</span>(base64Response);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> 整理(内容) &#123;<br><span class="hljs-comment">// 将制表符、双引号、单引号和换行符都替换为逗号</span><br><span class="hljs-comment">// 然后将连续的多个逗号替换为单个逗号</span><br><span class="hljs-keyword">var</span> 替换后的内容 = 内容.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[|&quot;&#x27;\r\n]+/g</span>, <span class="hljs-string">&#x27;,&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/,+/g</span>, <span class="hljs-string">&#x27;,&#x27;</span>);<br><br><span class="hljs-comment">// 删除开头和结尾的逗号（如果有的话）</span><br><span class="hljs-keyword">if</span> (替换后的内容.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;,&#x27;</span>) 替换后的内容 = 替换后的内容.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (替换后的内容.<span class="hljs-title function_">charAt</span>(替换后的内容.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;,&#x27;</span>) 替换后的内容 = 替换后的内容.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, 替换后的内容.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 使用逗号分割字符串，得到地址数组</span><br><span class="hljs-keyword">const</span> 地址数组 = 替换后的内容.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br><br><span class="hljs-keyword">return</span> 地址数组;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params">type, ip, add_data = <span class="hljs-string">&quot;&quot;</span></span>) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title class_">BotToken</span> || !<span class="hljs-title class_">ChatID</span>) <span class="hljs-keyword">return</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">let</span> msg = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`http://ip-api.com/json/<span class="hljs-subst">$&#123;ip&#125;</span>?lang=zh-CN`</span>);<br><span class="hljs-keyword">if</span> (response.<span class="hljs-property">ok</span>) &#123;<br><span class="hljs-keyword">const</span> ipInfo = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br>msg = <span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>\nIP: <span class="hljs-subst">$&#123;ip&#125;</span>\n国家: <span class="hljs-subst">$&#123;ipInfo.country&#125;</span>\n&lt;tg-spoiler&gt;城市: <span class="hljs-subst">$&#123;ipInfo.city&#125;</span>\n组织: <span class="hljs-subst">$&#123;ipInfo.org&#125;</span>\nASN: <span class="hljs-subst">$&#123;ipInfo.<span class="hljs-keyword">as</span>&#125;</span>\n<span class="hljs-subst">$&#123;add_data&#125;</span>`</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>msg = <span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>\nIP: <span class="hljs-subst">$&#123;ip&#125;</span>\n&lt;tg-spoiler&gt;<span class="hljs-subst">$&#123;add_data&#125;</span>`</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> url = <span class="hljs-string">`https://api.telegram.org/bot<span class="hljs-subst">$&#123;BotToken&#125;</span>/sendMessage?chat_id=<span class="hljs-subst">$&#123;ChatID&#125;</span>&amp;parse_mode=HTML&amp;text=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(msg)&#125;</span>`</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(url, &#123;<br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br><span class="hljs-attr">headers</span>: &#123;<br><span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;&#x27;</span>,<br><span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate, br&#x27;</span>,<br><span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 Chrome/90.0.4430.72&#x27;</span><br>&#125;<br>&#125;);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error sending message:&#x27;</span>, error);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isValidIPv4</span>(<span class="hljs-params">address</span>) &#123;<br><span class="hljs-keyword">const</span> ipv4Regex = <span class="hljs-regexp">/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</span>;<br><span class="hljs-keyword">return</span> ipv4Regex.<span class="hljs-title function_">test</span>(address);<br>&#125;<br><br><span class="hljs-keyword">function</span> 生成动态<span class="hljs-title function_">UUID</span>(<span class="hljs-params">密钥</span>) &#123;<br><span class="hljs-keyword">const</span> 时区偏移 = <span class="hljs-number">8</span>; <span class="hljs-comment">// 北京时间相对于UTC的时区偏移+8小时</span><br><span class="hljs-keyword">const</span> 起始日期 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2007</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, 更新时间, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 固定起始日期为2007年7月7日的凌晨3点</span><br><span class="hljs-keyword">const</span> 一周的毫秒数 = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * 有效时间;<br><br><span class="hljs-keyword">function</span> 获取当前周数() &#123;<br><span class="hljs-keyword">const</span> 现在 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-keyword">const</span> 调整后的现在 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(现在.<span class="hljs-title function_">getTime</span>() + 时区偏移 * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br><span class="hljs-keyword">const</span> 时间差 = <span class="hljs-title class_">Number</span>(调整后的现在) - <span class="hljs-title class_">Number</span>(起始日期);<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(时间差 / 一周的毫秒数);<br>&#125;<br><br><span class="hljs-keyword">function</span> 生成<span class="hljs-title function_">UUID</span>(<span class="hljs-params">基础字符串</span>) &#123;<br><span class="hljs-keyword">const</span> 哈希缓冲区 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextEncoder</span>().<span class="hljs-title function_">encode</span>(基础字符串);<br><span class="hljs-keyword">return</span> crypto.<span class="hljs-property">subtle</span>.<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;SHA-256&#x27;</span>, 哈希缓冲区).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">哈希</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> 哈希数组 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(哈希));<br><span class="hljs-keyword">const</span> 十六进制哈希 = 哈希数组.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">b</span> =&gt;</span> b.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;十六进制哈希.substr(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>)&#125;</span>-<span class="hljs-subst">$&#123;十六进制哈希.substr(<span class="hljs-number">8</span>, <span class="hljs-number">4</span>)&#125;</span>-4<span class="hljs-subst">$&#123;十六进制哈希.substr(<span class="hljs-number">13</span>, <span class="hljs-number">3</span>)&#125;</span>-<span class="hljs-subst">$&#123;(<span class="hljs-built_in">parseInt</span>(十六进制哈希.substr(<span class="hljs-number">16</span>, <span class="hljs-number">2</span>), <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0x3f</span> | <span class="hljs-number">0x80</span>).toString(<span class="hljs-number">16</span>)&#125;</span><span class="hljs-subst">$&#123;十六进制哈希.substr(<span class="hljs-number">18</span>, <span class="hljs-number">2</span>)&#125;</span>-<span class="hljs-subst">$&#123;十六进制哈希.substr(<span class="hljs-number">20</span>, <span class="hljs-number">12</span>)&#125;</span>`</span>;<br>&#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> 当前周数 = 获取当前周数(); <span class="hljs-comment">// 获取当前周数</span><br><span class="hljs-keyword">const</span> 结束时间 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(起始日期.<span class="hljs-title function_">getTime</span>() + 当前周数 * 一周的毫秒数);<br><br><span class="hljs-comment">// 生成两个 UUID</span><br><span class="hljs-keyword">const</span> 当前<span class="hljs-title class_">UUIDPromise</span> = 生成<span class="hljs-title function_">UUID</span>(密钥 + 当前周数);<br><span class="hljs-keyword">const</span> 上一个<span class="hljs-title class_">UUIDPromise</span> = 生成<span class="hljs-title function_">UUID</span>(密钥 + (当前周数 - <span class="hljs-number">1</span>));<br><br><span class="hljs-comment">// 格式化到期时间</span><br><span class="hljs-keyword">const</span> 到期时间<span class="hljs-variable constant_">UTC</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(结束时间.<span class="hljs-title function_">getTime</span>() - 时区偏移 * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>); <span class="hljs-comment">// UTC时间</span><br><span class="hljs-keyword">const</span> 到期时间字符串 = <span class="hljs-string">`到期时间(UTC): <span class="hljs-subst">$&#123;到期时间UTC.toISOString().slice(<span class="hljs-number">0</span>, <span class="hljs-number">19</span>).replace(<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)&#125;</span> (UTC+8): <span class="hljs-subst">$&#123;结束时间.toISOString().slice(<span class="hljs-number">0</span>, <span class="hljs-number">19</span>).replace(<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)&#125;</span>\n`</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([当前<span class="hljs-title class_">UUIDPromise</span>, 上一个<span class="hljs-title class_">UUIDPromise</span>, 到期时间字符串]);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> 迁移地址列表(env, txt = <span class="hljs-string">&#x27;ADD.txt&#x27;</span>) &#123;<br><span class="hljs-keyword">const</span> 旧数据 = <span class="hljs-keyword">await</span> env.<span class="hljs-property">KV</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/<span class="hljs-subst">$&#123;txt&#125;</span>`</span>);<br><span class="hljs-keyword">const</span> 新数据 = <span class="hljs-keyword">await</span> env.<span class="hljs-property">KV</span>.<span class="hljs-title function_">get</span>(txt);<br><br><span class="hljs-keyword">if</span> (旧数据 &amp;&amp; !新数据) &#123;<br><span class="hljs-comment">// 写入新位置</span><br><span class="hljs-keyword">await</span> env.<span class="hljs-property">KV</span>.<span class="hljs-title function_">put</span>(txt, 旧数据);<br><span class="hljs-comment">// 删除旧数据</span><br><span class="hljs-keyword">await</span> env.<span class="hljs-property">KV</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-string">`/<span class="hljs-subst">$&#123;txt&#125;</span>`</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">KV</span>(<span class="hljs-params">request, env, txt = <span class="hljs-string">&#x27;ADD.txt&#x27;</span></span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// POST请求处理</span><br><span class="hljs-keyword">if</span> (request.<span class="hljs-property">method</span> === <span class="hljs-string">&quot;POST&quot;</span>) &#123;<br><span class="hljs-keyword">if</span> (!env.<span class="hljs-property">KV</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&quot;未绑定KV空间&quot;</span>, &#123; <span class="hljs-attr">status</span>: <span class="hljs-number">400</span> &#125;);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> content = <span class="hljs-keyword">await</span> request.<span class="hljs-title function_">text</span>();<br><span class="hljs-keyword">await</span> env.<span class="hljs-property">KV</span>.<span class="hljs-title function_">put</span>(txt, content);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&quot;保存成功&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;保存KV时发生错误:&#x27;</span>, error);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&quot;保存失败: &quot;</span> + error.<span class="hljs-property">message</span>, &#123; <span class="hljs-attr">status</span>: <span class="hljs-number">500</span> &#125;);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// GET请求部分</span><br><span class="hljs-keyword">let</span> content = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">let</span> hasKV = !!env.<span class="hljs-property">KV</span>;<br><br><span class="hljs-keyword">if</span> (hasKV) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>content = <span class="hljs-keyword">await</span> env.<span class="hljs-property">KV</span>.<span class="hljs-title function_">get</span>(txt) || <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;读取KV时发生错误:&#x27;</span>, error);<br>content = <span class="hljs-string">&#x27;读取数据时发生错误: &#x27;</span> + error.<span class="hljs-property">message</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> html = <span class="hljs-string">`</span><br><span class="hljs-string">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">&lt;title&gt;优选订阅列表&lt;/title&gt;</span><br><span class="hljs-string">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="hljs-string">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="hljs-string">&lt;style&gt;</span><br><span class="hljs-string">body &#123;</span><br><span class="hljs-string">margin: 0;</span><br><span class="hljs-string">padding: 15px; /* 调整padding */</span><br><span class="hljs-string">box-sizing: border-box;</span><br><span class="hljs-string">font-size: 13px; /* 设置全局字体大小 */</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">.editor-container &#123;</span><br><span class="hljs-string">width: 100%;</span><br><span class="hljs-string">max-width: 100%;</span><br><span class="hljs-string">margin: 0 auto;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">.editor &#123;</span><br><span class="hljs-string">width: 100%;</span><br><span class="hljs-string">height: 520px; /* 调整高度 */</span><br><span class="hljs-string">margin: 15px 0; /* 调整margin */</span><br><span class="hljs-string">padding: 10px; /* 调整padding */</span><br><span class="hljs-string">box-sizing: border-box;</span><br><span class="hljs-string">border: 1px solid #ccc;</span><br><span class="hljs-string">border-radius: 4px;</span><br><span class="hljs-string">font-size: 13px;</span><br><span class="hljs-string">line-height: 1.5;</span><br><span class="hljs-string">overflow-y: auto;</span><br><span class="hljs-string">resize: none;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">.save-container &#123;</span><br><span class="hljs-string">margin-top: 8px; /* 调整margin */</span><br><span class="hljs-string">display: flex;</span><br><span class="hljs-string">align-items: center;</span><br><span class="hljs-string">gap: 10px; /* 调整gap */</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">.save-btn, .back-btn &#123;</span><br><span class="hljs-string">padding: 6px 15px; /* 调整padding */</span><br><span class="hljs-string">color: white;</span><br><span class="hljs-string">border: none;</span><br><span class="hljs-string">border-radius: 4px;</span><br><span class="hljs-string">cursor: pointer;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">.save-btn &#123;</span><br><span class="hljs-string">background: #4CAF50;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">.save-btn:hover &#123;</span><br><span class="hljs-string">background: #45a049;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">.back-btn &#123;</span><br><span class="hljs-string">background: #666;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">.back-btn:hover &#123;</span><br><span class="hljs-string">background: #555;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">.save-status &#123;</span><br><span class="hljs-string">color: #666;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">.notice-content &#123;</span><br><span class="hljs-string">display: none;</span><br><span class="hljs-string">margin-top: 10px;</span><br><span class="hljs-string">font-size: 13px;</span><br><span class="hljs-string">color: #333;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&lt;/style&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">################################################################&lt;br&gt;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;FileName&#125;</span> 优选订阅列表:&lt;br&gt;</span><br><span class="hljs-string">---------------------------------------------------------------&lt;br&gt;</span><br><span class="hljs-string">&amp;nbsp;&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;javascript:void(0);&quot; id=&quot;noticeToggle&quot; onclick=&quot;toggleNotice()&quot;&gt;注意事项∨&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;div id=&quot;noticeContent&quot; class=&quot;notice-content&quot;&gt;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;<span class="hljs-built_in">decodeURIComponent</span>(atob(<span class="hljs-string">&#x27;JTA5JTA5JTA5JTA5JTA5JTNDc3Ryb25nJTNFMS4lM0MlMkZzdHJvbmclM0UlMjBBRERBUEklMjAlRTUlQTYlODIlRTYlOUUlOUMlRTYlOTglQUYlRTUlOEYlOEQlRTQlQkIlQTNJUCVFRiVCQyU4QyVFNSU4RiVBRiVFNCVCRCU5QyVFNCVCOCVCQVBST1hZSVAlRTclOUElODQlRTglQUYlOUQlRUYlQkMlOEMlRTUlOEYlQUYlRTUlQjAlODYlMjIlM0Zwcm94eWlwJTNEdHJ1ZSUyMiVFNSU4RiU4MiVFNiU5NSVCMCVFNiVCNyVCQiVFNSU4QSVBMCVFNSU4OCVCMCVFOSU5MyVCRSVFNiU4RSVBNSVFNiU5QyVBQiVFNSVCMCVCRSVFRiVCQyU4QyVFNCVCRSU4QiVFNSVBNiU4MiVFRiVCQyU5QSUzQ2JyJTNFCiUwOSUwOSUwOSUwOSUwOSUyNm5ic3AlM0IlMjZuYnNwJTNCaHR0cHMlM0ElMkYlMkZyYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tJTJGY21saXUlMkZXb3JrZXJWbGVzczJzdWIlMkZtYWluJTJGYWRkcmVzc2VzYXBpLnR4dCUzQ3N0cm9uZyUzRSUzRnByb3h5aXAlM0R0cnVlJTNDJTJGc3Ryb25nJTNFJTNDYnIlM0UlM0NiciUzRQolMDklMDklMDklMDklMDklM0NzdHJvbmclM0UyLiUzQyUyRnN0cm9uZyUzRSUyMEFEREFQSSUyMCVFNSVBNiU4MiVFNiU5RSU5QyVFNiU5OCVBRiUyMCUzQ2ElMjBocmVmJTNEJTI3aHR0cHMlM0ElMkYlMkZnaXRodWIuY29tJTJGWElVMiUyRkNsb3VkZmxhcmVTcGVlZFRlc3QlMjclM0VDbG91ZGZsYXJlU3BlZWRUZXN0JTNDJTJGYSUzRSUyMCVFNyU5QSU4NCUyMGNzdiUyMCVFNyVCQiU5MyVFNiU5RSU5QyVFNiU5NiU4NyVFNCVCQiVCNiVFRiVCQyU4QyVFNCVCRSU4QiVFNSVBNiU4MiVFRiVCQyU5QSUzQ2JyJTNFCiUwOSUwOSUwOSUwOSUwOSUyNm5ic3AlM0IlMjZuYnNwJTNCaHR0cHMlM0ElMkYlMkZyYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tJTJGY21saXUlMkZXb3JrZXJWbGVzczJzdWIlMkZtYWluJTJGQ2xvdWRmbGFyZVNwZWVkVGVzdC5jc3YlM0NiciUzRSUzQ2JyJTNFCiUwOSUwOSUwOSUwOSUwOSUyNm5ic3AlM0IlMjZuYnNwJTNCLSUyMCVFNSVBNiU4MiVFOSU5QyU4MCVFNiU4QyU4NyVFNSVBRSU5QTIwNTMlRTclQUIlQUYlRTUlOEYlQTMlRTUlOEYlQUYlRTUlQjAlODYlMjIlM0Zwb3J0JTNEMjA1MyUyMiVFNSU4RiU4MiVFNiU5NSVCMCVFNiVCNyVCQiVFNSU4QSVBMCVFNSU4OCVCMCVFOSU5MyVCRSVFNiU4RSVBNSVFNiU5QyVBQiVFNSVCMCVCRSVFRiVCQyU4QyVFNCVCRSU4QiVFNSVBNiU4MiVFRiVCQyU5QSUzQ2JyJTNFCiUwOSUwOSUwOSUwOSUwOSUyNm5ic3AlM0IlMjZuYnNwJTNCaHR0cHMlM0ElMkYlMkZyYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tJTJGY21saXUlMkZXb3JrZXJWbGVzczJzdWIlMkZtYWluJTJGQ2xvdWRmbGFyZVNwZWVkVGVzdC5jc3YlM0NzdHJvbmclM0UlM0Zwb3J0JTNEMjA1MyUzQyUyRnN0cm9uZyUzRSUzQ2JyJTNFJTNDYnIlM0UKJTA5JTA5JTA5JTA5JTA5JTI2bmJzcCUzQiUyNm5ic3AlM0ItJTIwJUU1JUE2JTgyJUU5JTlDJTgwJUU2JThDJTg3JUU1JUFFJTlBJUU4JThBJTgyJUU3JTgyJUI5JUU1JUE0JTg3JUU2JUIzJUE4JUU1JThGJUFGJUU1JUIwJTg2JTIyJTNGaWQlM0RDRiVFNCVCQyU5OCVFOSU4MCU4OSUyMiVFNSU4RiU4MiVFNiU5NSVCMCVFNiVCNyVCQiVFNSU4QSVBMCVFNSU4OCVCMCVFOSU5MyVCRSVFNiU4RSVBNSVFNiU5QyVBQiVFNSVCMCVCRSVFRiVCQyU4QyVFNCVCRSU4QiVFNSVBNiU4MiVFRiVCQyU5QSUzQ2JyJTNFCiUwOSUwOSUwOSUwOSUwOSUyNm5ic3AlM0IlMjZuYnNwJTNCaHR0cHMlM0ElMkYlMkZyYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tJTJGY21saXUlMkZXb3JrZXJWbGVzczJzdWIlMkZtYWluJTJGQ2xvdWRmbGFyZVNwZWVkVGVzdC5jc3YlM0NzdHJvbmclM0UlM0ZpZCUzRENGJUU0JUJDJTk4JUU5JTgwJTg5JTNDJTJGc3Ryb25nJTNFJTNDYnIlM0UlM0NiciUzRQolMDklMDklMDklMDklMDklMjZuYnNwJTNCJTI2bmJzcCUzQi0lMjAlRTUlQTYlODIlRTklOUMlODAlRTYlOEMlODclRTUlQUUlOUElRTUlQTQlOUElRTQlQjglQUElRTUlOEYlODIlRTYlOTUlQjAlRTUlODglOTklRTklOUMlODAlRTglQTYlODElRTQlQkQlQkYlRTclOTQlQTglMjclMjYlMjclRTUlODElOUElRTklOTclQjQlRTklOUElOTQlRUYlQkMlOEMlRTQlQkUlOEIlRTUlQTYlODIlRUYlQkMlOUElM0NiciUzRQolMDklMDklMDklMDklMDklMjZuYnNwJTNCJTI2bmJzcCUzQmh0dHBzJTNBJTJGJTJGcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSUyRmNtbGl1JTJGV29ya2VyVmxlc3Myc3ViJTJGbWFpbiUyRkNsb3VkZmxhcmVTcGVlZFRlc3QuY3N2JTNGaWQlM0RDRiVFNCVCQyU5OCVFOSU4MCU4OSUzQ3N0cm9uZyUzRSUyNiUzQyUyRnN0cm9uZyUzRXBvcnQlM0QyMDUzJTNDYnIlM0U=&#x27;</span>))&#125;</span></span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&lt;div class=&quot;editor-container&quot;&gt;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;hasKV ? <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">&lt;textarea class=&quot;editor&quot; </span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">placeholder=&quot;<span class="hljs-subst">$&#123;<span class="hljs-built_in">decodeURIComponent</span>(atob(<span class="hljs-string">&#x27;QUREJUU3JUE0JUJBJUU0JUJFJThCJUVGJUJDJTlBCnZpc2EuY24lMjMlRTQlQkMlOTglRTklODAlODklRTUlOUYlOUYlRTUlOTAlOEQKMTI3LjAuMC4xJTNBMTIzNCUyM0NGbmF0CiU1QjI2MDYlM0E0NzAwJTNBJTNBJTVEJTNBMjA1MyUyM0lQdjYKCiVFNiVCMyVBOCVFNiU4NCU4RiVFRiVCQyU5QQolRTYlQUYlOEYlRTglQTElOEMlRTQlQjglODAlRTQlQjglQUElRTUlOUMlQjAlRTUlOUQlODAlRUYlQkMlOEMlRTYlQTAlQkMlRTUlQkMlOEYlRTQlQjglQkElMjAlRTUlOUMlQjAlRTUlOUQlODAlM0ElRTclQUIlQUYlRTUlOEYlQTMlMjMlRTUlQTQlODclRTYlQjMlQTgKSVB2NiVFNSU5QyVCMCVFNSU5RCU4MCVFOSU5QyU4MCVFOCVBNiU4MSVFNyU5NCVBOCVFNCVCOCVBRCVFNiU4QiVBQyVFNSU4RiVCNyVFNiU4QiVBQyVFOCVCNSVCNyVFNiU5RCVBNSVFRiVCQyU4QyVFNSVBNiU4MiVFRiVCQyU5QSU1QjI2MDYlM0E0NzAwJTNBJTNBJTVEJTNBMjA1MwolRTclQUIlQUYlRTUlOEYlQTMlRTQlQjglOEQlRTUlODYlOTklRUYlQkMlOEMlRTklQkIlOTglRTglQUUlQTQlRTQlQjglQkElMjA0NDMlMjAlRTclQUIlQUYlRTUlOEYlQTMlRUYlQkMlOEMlRTUlQTYlODIlRUYlQkMlOUF2aXNhLmNuJTIzJUU0JUJDJTk4JUU5JTgwJTg5JUU1JTlGJTlGJUU1JTkwJThECgoKQUREQVBJJUU3JUE0JUJBJUU0JUJFJThCJUVGJUJDJTlBCmh0dHBzJTNBJTJGJTJGcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSUyRmNtbGl1JTJGV29ya2VyVmxlc3Myc3ViJTJGcmVmcyUyRmhlYWRzJTJGbWFpbiUyRmFkZHJlc3Nlc2FwaS50eHQKCiVFNiVCMyVBOCVFNiU4NCU4RiVFRiVCQyU5QUFEREFQSSVFNyU5QiVCNCVFNiU4RSVBNSVFNiVCNyVCQiVFNSU4QSVBMCVFNyU5QiVCNCVFOSU5MyVCRSVFNSU4RCVCMyVFNSU4RiVBRg==&#x27;</span>))&#125;</span>&quot;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">id=&quot;content&quot;&gt;<span class="hljs-subst">$&#123;content&#125;</span>&lt;/textarea&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">&lt;div class=&quot;save-container&quot;&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">&lt;button class=&quot;back-btn&quot; onclick=&quot;goBack()&quot;&gt;返回配置页&lt;/button&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">&lt;button class=&quot;save-btn&quot; onclick=&quot;saveContent(this)&quot;&gt;保存&lt;/button&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">&lt;span class=&quot;save-status&quot; id=&quot;saveStatus&quot;&gt;&lt;/span&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">&lt;/div&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">&lt;br&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">################################################################&lt;br&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string"><span class="hljs-subst">$&#123;cmad&#125;</span></span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">`</span> : <span class="hljs-string">&#x27;&lt;p&gt;未绑定KV空间&lt;/p&gt;&#x27;</span>&#125;</span></span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;script&gt;</span><br><span class="hljs-string">if (document.querySelector(&#x27;.editor&#x27;)) &#123;</span><br><span class="hljs-string">let timer;</span><br><span class="hljs-string">const textarea = document.getElementById(&#x27;content&#x27;);</span><br><span class="hljs-string">const originalContent = textarea.value;</span><br><span class="hljs-string"></span><br><span class="hljs-string">function goBack() &#123;</span><br><span class="hljs-string">const currentUrl = window.location.href;</span><br><span class="hljs-string">const parentUrl = currentUrl.substring(0, currentUrl.lastIndexOf(&#x27;/&#x27;));</span><br><span class="hljs-string">window.location.href = parentUrl;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">function replaceFullwidthColon() &#123;</span><br><span class="hljs-string">const text = textarea.value;</span><br><span class="hljs-string">textarea.value = text.replace(/：/g, &#x27;:&#x27;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">function saveContent(button) &#123;</span><br><span class="hljs-string">try &#123;</span><br><span class="hljs-string">const updateButtonText = (step) =&gt; &#123;</span><br><span class="hljs-string">button.textContent = \`保存中: \$&#123;step&#125;\`;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">// 检测是否为iOS设备</span><br><span class="hljs-string">const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);</span><br><span class="hljs-string"></span><br><span class="hljs-string">// 仅在非iOS设备上执行replaceFullwidthColon</span><br><span class="hljs-string">if (!isIOS) &#123;</span><br><span class="hljs-string">replaceFullwidthColon();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">updateButtonText(&#x27;开始保存&#x27;);</span><br><span class="hljs-string">button.disabled = true;</span><br><span class="hljs-string">// 获取textarea内容和原始内容</span><br><span class="hljs-string">const textarea = document.getElementById(&#x27;content&#x27;);</span><br><span class="hljs-string">if (!textarea) &#123;</span><br><span class="hljs-string">throw new Error(&#x27;找不到文本编辑区域&#x27;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">updateButtonText(&#x27;获取内容&#x27;);</span><br><span class="hljs-string">let newContent;</span><br><span class="hljs-string">let originalContent;</span><br><span class="hljs-string">try &#123;</span><br><span class="hljs-string">newContent = textarea.value || &#x27;&#x27;;</span><br><span class="hljs-string">originalContent = textarea.defaultValue || &#x27;&#x27;;</span><br><span class="hljs-string">&#125; catch (e) &#123;</span><br><span class="hljs-string">console.error(&#x27;获取内容错误:&#x27;, e);</span><br><span class="hljs-string">throw new Error(&#x27;无法获取编辑内容&#x27;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">updateButtonText(&#x27;准备状态更新函数&#x27;);</span><br><span class="hljs-string">const updateStatus = (message, isError = false) =&gt; &#123;</span><br><span class="hljs-string">const statusElem = document.getElementById(&#x27;saveStatus&#x27;);</span><br><span class="hljs-string">if (statusElem) &#123;</span><br><span class="hljs-string">statusElem.textContent = message;</span><br><span class="hljs-string">statusElem.style.color = isError ? &#x27;red&#x27; : &#x27;#666&#x27;;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">updateButtonText(&#x27;准备按钮重置函数&#x27;);</span><br><span class="hljs-string">const resetButton = () =&gt; &#123;</span><br><span class="hljs-string">button.textContent = &#x27;保存&#x27;;</span><br><span class="hljs-string">button.disabled = false;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">if (newContent !== originalContent) &#123;</span><br><span class="hljs-string">updateButtonText(&#x27;发送保存请求&#x27;);</span><br><span class="hljs-string">fetch(window.location.href, &#123;</span><br><span class="hljs-string">method: &#x27;POST&#x27;,</span><br><span class="hljs-string">body: newContent,</span><br><span class="hljs-string">headers: &#123;</span><br><span class="hljs-string">&#x27;Content-Type&#x27;: &#x27;text/plain;charset=UTF-8&#x27;</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">cache: &#x27;no-cache&#x27;</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">.then(response =&gt; &#123;</span><br><span class="hljs-string">updateButtonText(&#x27;检查响应状态&#x27;);</span><br><span class="hljs-string">if (!response.ok) &#123;</span><br><span class="hljs-string">throw new Error(\`HTTP error! status: \$&#123;response.status&#125;\`);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">updateButtonText(&#x27;更新保存状态&#x27;);</span><br><span class="hljs-string">const now = new Date().toLocaleString();</span><br><span class="hljs-string">document.title = \`编辑已保存 \$&#123;now&#125;\`;</span><br><span class="hljs-string">updateStatus(\`已保存 \$&#123;now&#125;\`);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">.catch(error =&gt; &#123;</span><br><span class="hljs-string">updateButtonText(&#x27;处理错误&#x27;);</span><br><span class="hljs-string">console.error(&#x27;Save error:&#x27;, error);</span><br><span class="hljs-string">updateStatus(\`保存失败: \$&#123;error.message&#125;\`, true);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">.finally(() =&gt; &#123;</span><br><span class="hljs-string">resetButton();</span><br><span class="hljs-string">&#125;);</span><br><span class="hljs-string">&#125; else &#123;</span><br><span class="hljs-string">updateButtonText(&#x27;检查内容变化&#x27;);</span><br><span class="hljs-string">updateStatus(&#x27;内容未变化&#x27;);</span><br><span class="hljs-string">resetButton();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125; catch (error) &#123;</span><br><span class="hljs-string">console.error(&#x27;保存过程出错:&#x27;, error);</span><br><span class="hljs-string">button.textContent = &#x27;保存&#x27;;</span><br><span class="hljs-string">button.disabled = false;</span><br><span class="hljs-string">const statusElem = document.getElementById(&#x27;saveStatus&#x27;);</span><br><span class="hljs-string">if (statusElem) &#123;</span><br><span class="hljs-string">statusElem.textContent = \`错误: \$&#123;error.message&#125;\`;</span><br><span class="hljs-string">statusElem.style.color = &#x27;red&#x27;;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">textarea.addEventListener(&#x27;blur&#x27;, saveContent);</span><br><span class="hljs-string">textarea.addEventListener(&#x27;input&#x27;, () =&gt; &#123;</span><br><span class="hljs-string">clearTimeout(timer);</span><br><span class="hljs-string">timer = setTimeout(saveContent, 5000);</span><br><span class="hljs-string">&#125;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">function toggleNotice() &#123;</span><br><span class="hljs-string">const noticeContent = document.getElementById(&#x27;noticeContent&#x27;);</span><br><span class="hljs-string">const noticeToggle = document.getElementById(&#x27;noticeToggle&#x27;);</span><br><span class="hljs-string">if (noticeContent.style.display === &#x27;none&#x27; || noticeContent.style.display === &#x27;&#x27;) &#123;</span><br><span class="hljs-string">noticeContent.style.display = &#x27;block&#x27;;</span><br><span class="hljs-string">noticeToggle.textContent = &#x27;注意事项∧&#x27;;</span><br><span class="hljs-string">&#125; else &#123;</span><br><span class="hljs-string">noticeContent.style.display = &#x27;none&#x27;;</span><br><span class="hljs-string">noticeToggle.textContent = &#x27;注意事项∨&#x27;;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">// 初始化 noticeContent 的 display 属性</span><br><span class="hljs-string">document.addEventListener(&#x27;DOMContentLoaded&#x27;, () =&gt; &#123;</span><br><span class="hljs-string">document.getElementById(&#x27;noticeContent&#x27;).style.display = &#x27;none&#x27;;</span><br><span class="hljs-string">&#125;);</span><br><span class="hljs-string">&lt;/script&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(html, &#123;<br><span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span> &#125;<br>&#125;);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;处理请求时发生错误:&#x27;</span>, error);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&quot;服务器错误: &quot;</span> + error.<span class="hljs-property">message</span>, &#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">500</span>,<br><span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/plain;charset=utf-8&quot;</span> &#125;<br>&#125;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-返回worker界面点击设置-变量和机密-添加，设置一个密码"><a href="#8-返回worker界面点击设置-变量和机密-添加，设置一个密码" class="headerlink" title="8.返回worker界面点击设置-&gt;变量和机密-&gt;添加，设置一个密码"></a>8.返回worker界面点击设置-&gt;变量和机密-&gt;添加，设置一个密码</h3><img src="/2025/06/15/cloudflare-%E9%83%A8%E7%BD%B2workers%E8%8E%B7%E5%8F%96%E9%AB%98%E9%80%9F%E4%B8%8A%E7%BD%91%E8%8A%82%E7%82%B9/6.png" class><p><strong>变量名称PASSWORD全大写</strong></p><h3 id="9-返回worker界面，点击访问"><a href="#9-返回worker界面，点击访问" class="headerlink" title="9.返回worker界面，点击访问"></a>9.返回worker界面，点击访问</h3><img src="/2025/06/15/cloudflare-%E9%83%A8%E7%BD%B2workers%E8%8E%B7%E5%8F%96%E9%AB%98%E9%80%9F%E4%B8%8A%E7%BD%91%E8%8A%82%E7%82%B9/7.png" class><h3 id="10-按照图示访问"><a href="#10-按照图示访问" class="headerlink" title="10.按照图示访问"></a>10.按照图示访问</h3><img src="/2025/06/15/cloudflare-%E9%83%A8%E7%BD%B2workers%E8%8E%B7%E5%8F%96%E9%AB%98%E9%80%9F%E4%B8%8A%E7%BD%91%E8%8A%82%E7%82%B9/8.png" class><h3 id="11-选择对应的连接导入就可以使用了"><a href="#11-选择对应的连接导入就可以使用了" class="headerlink" title="11.选择对应的连接导入就可以使用了"></a>11.选择对应的连接导入就可以使用了</h3><img src="/2025/06/15/cloudflare-%E9%83%A8%E7%BD%B2workers%E8%8E%B7%E5%8F%96%E9%AB%98%E9%80%9F%E4%B8%8A%E7%BD%91%E8%8A%82%E7%82%B9/9.png" class>]]></content>
    
    
    <categories>
      
      <category>上网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>上网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AE-播放器模板</title>
    <link href="/2025/06/13/AE-%E6%92%AD%E6%94%BE%E5%99%A8%E6%A8%A1%E6%9D%BF/"/>
    <url>/2025/06/13/AE-%E6%92%AD%E6%94%BE%E5%99%A8%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<style>    #he{        color : yellow    }    #he:hover{        color: #1CE1EA    }    #first{        color:rgb(201, 52, 46)    }</style><h1 id="AE-音乐播放器模板"><a href="#AE-音乐播放器模板" class="headerlink" title="AE-音乐播放器模板"></a><div style="text-align:center"><font face="STCAIYUN">AE-音乐播放器模板</font></div></h1><h3 id="工程项目直接导入AE就可以用，导入自己的音频打关键帧就能做自己的作品"><a href="#工程项目直接导入AE就可以用，导入自己的音频打关键帧就能做自己的作品" class="headerlink" title="工程项目直接导入AE就可以用，导入自己的音频打关键帧就能做自己的作品"></a><div id="first">工程项目直接导入AE就可以用，导入自己的音频打关键帧就能做自己的作品</div></h3><p><strong>AE自行下载</strong></p><p><strong>样本👇</strong></p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=114674704128978&bvid=BV1uvMgzUER3&cid=30471095193&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500px"></iframe><h5 id="———————————————————————————————————————————————————————————"><a href="#———————————————————————————————————————————————————————————" class="headerlink" title="———————————————————————————————————————————————————————————"></a>———————————————————————————————————————————————————————————</h5><p><b><i><a id="he" href="https://share.weiyun.com/AacvCKUk">点击下载</a><div></div></i></b></p>]]></content>
    
    
    <categories>
      
      <category>AE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AE</tag>
      
      <tag>制作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件工程概论总结与复习</title>
    <link href="/2025/06/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%A6%82%E8%AE%BA%E6%80%BB%E7%BB%93%E4%B8%8E%E5%A4%8D%E4%B9%A0/"/>
    <url>/2025/06/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%A6%82%E8%AE%BA%E6%80%BB%E7%BB%93%E4%B8%8E%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="软件工程概论总结与复习"><a href="#软件工程概论总结与复习" class="headerlink" title="软件工程概论总结与复习&gt;"></a><font face="STCAIYUN">软件工程概论总结与复习</font>&gt;</h1><img src="/2025/06/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%A6%82%E8%AE%BA%E6%80%BB%E7%BB%93%E4%B8%8E%E5%A4%8D%E4%B9%A0/1.png" class>]]></content>
    
    
    <categories>
      
      <category>软件工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>张彤</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算题库</title>
    <link href="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E9%A2%98%E5%BA%93/"/>
    <url>/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E9%A2%98%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="云计算题库"><a href="#云计算题库" class="headerlink" title="云计算题库&gt;"></a><font face="STCAIYUN">云计算题库</font>&gt;</h1><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E9%A2%98%E5%BA%93/1.png" class><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E9%A2%98%E5%BA%93/2.png" class>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>胡博问</tag>
      
      <tag>云计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算题库答案</title>
    <link href="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E9%A2%98%E5%BA%93%E7%AD%94%E6%A1%88/"/>
    <url>/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E9%A2%98%E5%BA%93%E7%AD%94%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="云计算题库答案"><a href="#云计算题库答案" class="headerlink" title="云计算题库答案&gt;"></a><font face="STCAIYUN">云计算题库答案</font>&gt;</h1><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E9%A2%98%E5%BA%93%E7%AD%94%E6%A1%88/1.png" class>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>胡博问</tag>
      
      <tag>云计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算知识点</title>
    <link href="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="云计算知识点"><a href="#云计算知识点" class="headerlink" title="云计算知识点&gt;"></a><font face="STCAIYUN">云计算知识点</font>&gt;</h1><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9F%A5%E8%AF%86%E7%82%B9/1.png" class>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>胡博问</tag>
      
      <tag>云计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算试题（补考卷）</title>
    <link href="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/"/>
    <url>/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-2023学第一学期补考试卷"><a href="#2022-2023学第一学期补考试卷" class="headerlink" title="2022-2023学第一学期补考试卷&gt;"></a><font face="STCAIYUN">2022-2023学第一学期补考试卷</font>&gt;</h1><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/1.png" class><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/2.png" class><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/3.png" class><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/4.png" class><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/5.png" class><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/6.png" class><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/7.png" class><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/8.png" class><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/9.png" class><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/10.png" class><img src="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%95%E9%A2%98%EF%BC%88%E8%A1%A5%E8%80%83%E5%8D%B7%EF%BC%89/11.png" class>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>胡博问</tag>
      
      <tag>云计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算问题集合</title>
    <link href="/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"/>
    <url>/2025/06/11/%E4%BA%91%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="云计算重要问题"><a href="#云计算重要问题" class="headerlink" title="云计算重要问题"></a>云计算重要问题</h1><pre><code class="hljs">1.描述水平扩展与垂直扩展的概念，并举例说明两者的不同与特点2.描述三种不同的云交付模型，并对三种云交付模型给出自己的例子。指出用户对于三种不同云交付模型的可控程度。3.解释四种云部署模型，并突出四种模型之间的差别，举出四种模型的主要引用场合。4.解释电报交换，报文交换与分组交换，给出每一种交换的定义，并描述每一种交换的优点和缺点。5.解释OSI 7层网络模型，并分别给出数据链路层，网络层，传输层与应用层中的各两种协议6.描述不同的虚拟化层级，并给出每一种虚拟化层级的例子7.给出虚拟化和多租户技术的概念，并写出两者的相同点的不同点8.4种云安全的基本属性，以及每一种属性的基本概念9.给出4种不同的云安全威胁的种类，并为每一种云安全威胁给出一个例子10.描述非对称加密中，小红向小绿发送邮件的全过程11.描述与哈希碰撞相关的三种性质，并给出与三种性质相关的云攻击例子12. 描述非对称加密需要利用第三方机构CA来进行数字签名颁发的原因，并详细说明CA颁发数字证书的全过程13. 根据P82的图7-4，描述不同的逻辑网络边界所具有的功能，并指出逻辑网络边界在云安全上的应用14. 根据P86的图7-8，描述用户创建虚拟服务器的过程15. 给出三种云使用监控代理的基本概念，给出三者之间的区别，并为每一种代理举出一个引用场景16. 给出外层网络和内层网络出现服务故障时，SLA监控器记录日志的过程。17. 解释故障转移系统中，主动-主动与主动-被动的概念，联系与区别，并写出其对应的资源集群概念18. 给出云服务中管理系统的分类，并解释每一种管理系统的基本概念与核心组件19. 给出资源池的概念，举出三个资源池的例子；并给出同级资源池，嵌套资源池的概念，联系与区别20. 解释自动伸缩的概念，并解释动态可扩展架构，弹性资源容量架构与云爆发架构之间的区别与练习21. 解释弹性磁盘供给架构的基本概念，并结合P161图11-15给出弹性磁盘供给架构的整个过程。22. 给出四种不同的均衡负载架构，指出每一种不同均衡负载架构之间的区别。23. 解释不中断服务重定向架构以及零宕机架构的概念，区别和练习，并给出这两种架构所依赖的核心功能和架构</code></pre>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>胡博问</tag>
      
      <tag>云计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>临时邮箱</title>
    <link href="/2025/06/10/%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1/"/>
    <url>/2025/06/10/%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1/</url>
    
    <content type="html"><![CDATA[<style>    body{        text-align : center    }    #cc{        margin: auto;        width : 300px;        height : 650px             }    </style><p> <strong>无限临时邮箱，可以用来注册账号 —instant mail：</strong><br>    链接: <a href="https://pan.baidu.com/s/1-V-DTHjEbFopDNH9kuJpXA">https://pan.baidu.com/s/1-V-DTHjEbFopDNH9kuJpXA</a> 提取码: nqjy<br>   <div id="cc"> <img src="/2025/06/10/%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1/%E6%BC%94%E7%A4%BA.jpg" class> <div></div></div></p>]]></content>
    
    
    <categories>
      
      <category>安卓福利</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邮箱</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前沿技术习题二</title>
    <link href="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E4%B9%A0%E9%A2%98%E4%BA%8C/"/>
    <url>/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E4%B9%A0%E9%A2%98%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机前沿技术第二次测验"><a href="#计算机前沿技术第二次测验" class="headerlink" title="计算机前沿技术第二次测验"></a>计算机前沿技术第二次测验</h1><h2 id="单选题（共10题，每题2分）"><a href="#单选题（共10题，每题2分）" class="headerlink" title="单选题（共10题，每题2分）"></a>单选题（共10题，每题2分）</h2><h3 id="1-以下哪项不是人工智能的典型应用？"><a href="#1-以下哪项不是人工智能的典型应用？" class="headerlink" title="1. 以下哪项不是人工智能的典型应用？"></a>1. 以下哪项不是人工智能的典型应用？</h3><ul><li>A. 图像识别</li><li>B. 搜索引擎</li><li>C. 温度计</li><li>D. 智能客服</li></ul><p><strong>答案：C</strong></p><h3 id="2-以下哪位被认为是人工智能之父？"><a href="#2-以下哪位被认为是人工智能之父？" class="headerlink" title="2. 以下哪位被认为是人工智能之父？"></a>2. 以下哪位被认为是人工智能之父？</h3><ul><li>A. 图灵</li><li>B. 赫布</li><li>C. 约翰·麦卡锡</li><li>D. 马尔科夫</li></ul><p><strong>答案：A&#x2F;C ???</strong></p><h3 id="3-联结主义模型训练时最常用的优化方法是？"><a href="#3-联结主义模型训练时最常用的优化方法是？" class="headerlink" title="3. 联结主义模型训练时最常用的优化方法是？"></a>3. 联结主义模型训练时最常用的优化方法是？</h3><ul><li>A. 梯度下降</li><li>B. 遗传算法</li><li>C. 线性规划</li><li>D. 穷举法</li></ul><p><strong>答案：A</strong></p><h3 id="4-符号主义方法所使用的推理方式主要包括？"><a href="#4-符号主义方法所使用的推理方式主要包括？" class="headerlink" title="4. 符号主义方法所使用的推理方式主要包括？"></a>4. 符号主义方法所使用的推理方式主要包括？</h3><ul><li>A. 模糊推理</li><li>B. 模拟推理</li><li>C. 演绎推理</li><li>D. 强化推理</li></ul><p><strong>答案：C</strong></p><h3 id="5-行为主义方法代表性的系统是？"><a href="#5-行为主义方法代表性的系统是？" class="headerlink" title="5. 行为主义方法代表性的系统是？"></a>5. 行为主义方法代表性的系统是？</h3><ul><li>A. 图灵测试</li><li>B. 感知器</li><li>C. 行为树</li><li>D. Braitenberg车辆</li></ul><p><strong>答案：D</strong></p><h3 id="6-以下哪个不是深度学习的特点？"><a href="#6-以下哪个不是深度学习的特点？" class="headerlink" title="6. 以下哪个不是深度学习的特点？"></a>6. 以下哪个不是深度学习的特点？</h3><ul><li>A. 多层结构</li><li>B. 自动特征提取</li><li>C. 需要小样本数据</li><li>D. 参数众多</li></ul><p><strong>答案：C</strong></p><h3 id="7-Transformer模型最初用于哪个任务？"><a href="#7-Transformer模型最初用于哪个任务？" class="headerlink" title="7. Transformer模型最初用于哪个任务？"></a>7. Transformer模型最初用于哪个任务？</h3><ul><li>A. 图像识别</li><li>B. 自动驾驶</li><li>C. 机器翻译</li><li>D. 游戏对战</li></ul><p><strong>答案：C</strong></p><h3 id="8-强化学习中智能体通过什么与环境交互？"><a href="#8-强化学习中智能体通过什么与环境交互？" class="headerlink" title="8. 强化学习中智能体通过什么与环境交互？"></a>8. 强化学习中智能体通过什么与环境交互？</h3><ul><li>A. 模型</li><li>B. 策略</li><li>C. 观察</li><li>D. 特征</li></ul><p><strong>答案：B</strong></p><h3 id="9-知识图谱的表示形式主要是？"><a href="#9-知识图谱的表示形式主要是？" class="headerlink" title="9. 知识图谱的表示形式主要是？"></a>9. 知识图谱的表示形式主要是？</h3><ul><li>A. XML结构</li><li>B. 树形结构</li><li>C. 图结构</li><li>D. 向量结构</li></ul><p><strong>答案：C</strong></p><h3 id="10-以下哪个不属于当前人工智能的发展趋势？"><a href="#10-以下哪个不属于当前人工智能的发展趋势？" class="headerlink" title="10. 以下哪个不属于当前人工智能的发展趋势？"></a>10. 以下哪个不属于当前人工智能的发展趋势？</h3><ul><li>A. 可解释性增强</li><li>B. 多模态融合</li><li>C. 专家系统回潮</li><li>D. 通用人工智能探索</li></ul><p><strong>答案：C</strong></p><h2 id="多选题（共5题，每题4分）"><a href="#多选题（共5题，每题4分）" class="headerlink" title="多选题（共5题，每题4分）"></a>多选题（共5题，每题4分）</h2><h3 id="11-以下哪些属于人工智能的典型应用？"><a href="#11-以下哪些属于人工智能的典型应用？" class="headerlink" title="11. 以下哪些属于人工智能的典型应用？"></a>11. 以下哪些属于人工智能的典型应用？</h3><ul><li>A. 智能翻译</li><li>B. 无人驾驶</li><li>C. 人脸识别</li><li>D. 占星术</li><li>E. 智能推荐</li></ul><p><strong>答案：A、B、C、E</strong></p><h3 id="12-以下哪些是深度学习常用的神经网络结构？"><a href="#12-以下哪些是深度学习常用的神经网络结构？" class="headerlink" title="12. 以下哪些是深度学习常用的神经网络结构？"></a>12. 以下哪些是深度学习常用的神经网络结构？</h3><ul><li>A. 卷积神经网络</li><li>B. 决策树</li><li>C. 循环神经网络</li><li>D. 自注意力网络</li><li>E. 感知器</li></ul><p><strong>答案：A、C、D</strong></p><h3 id="13-知识图谱中常见的三元组结构包含？"><a href="#13-知识图谱中常见的三元组结构包含？" class="headerlink" title="13. 知识图谱中常见的三元组结构包含？"></a>13. 知识图谱中常见的三元组结构包含？</h3><ul><li>A. 实体</li><li>B. 属性</li><li>C. 关系</li><li>D. 主题</li><li>E. 语义</li></ul><p><strong>答案：A、B、C</strong></p><h3 id="14-人工智能发展的驱动因素包括？"><a href="#14-人工智能发展的驱动因素包括？" class="headerlink" title="14. 人工智能发展的驱动因素包括？"></a>14. 人工智能发展的驱动因素包括？</h3><ul><li>A. 算力提升</li><li>B. 大数据</li><li>C. 新算法</li><li>D. 传感器精度下降</li><li>E. 应用需求增长</li></ul><p><strong>答案：A、B、C、E</strong></p><h3 id="15-强化学习中的核心组件包括？"><a href="#15-强化学习中的核心组件包括？" class="headerlink" title="15. 强化学习中的核心组件包括？"></a>15. 强化学习中的核心组件包括？</h3><ul><li>A. 环境</li><li>B. 状态</li><li>C. 动作</li><li>D. 奖励</li><li>E. 推理器</li></ul><p><strong>答案：A、B、C、D</strong></p><h2 id="判断题（共4题，每题2分）"><a href="#判断题（共4题，每题2分）" class="headerlink" title="判断题（共4题，每题2分）"></a>判断题（共4题，每题2分）</h2><h3 id="16-人工智能中的符号主义方法完全依赖数据驱动。"><a href="#16-人工智能中的符号主义方法完全依赖数据驱动。" class="headerlink" title="16. 人工智能中的符号主义方法完全依赖数据驱动。"></a>16. 人工智能中的符号主义方法完全依赖数据驱动。</h3><p><strong>答案：错误</strong></p><p><strong>解析：符号主义方法主张通过显式公理和逻辑体系搭建系统，依赖演绎推理而非数据驱动。</strong></p><h3 id="17-强化学习适用于需要自主决策的情境。"><a href="#17-强化学习适用于需要自主决策的情境。" class="headerlink" title="17. 强化学习适用于需要自主决策的情境。"></a>17. 强化学习适用于需要自主决策的情境。</h3><p><strong>答案：正确</strong></p><p><strong>解析：强化学习通过策略与环境交互，适用于自动驾驶等需自主决策的场景。</strong></p><h3 id="18-知识图谱只能用于自然语言处理。"><a href="#18-知识图谱只能用于自然语言处理。" class="headerlink" title="18. 知识图谱只能用于自然语言处理。"></a>18. 知识图谱只能用于自然语言处理。</h3><p><strong>答案：错误</strong></p><p><strong>解析：知识图谱源自语义网络和链接数据，应用涵盖语义搜索、数据整合等，不限于自然语言处理。</strong></p><h3 id="19-深度学习的训练过程通常是可解释的。"><a href="#19-深度学习的训练过程通常是可解释的。" class="headerlink" title="19. 深度学习的训练过程通常是可解释的。"></a>19. 深度学习的训练过程通常是可解释的。</h3><p><strong>答案：错误</strong></p><p><strong>解析：深度学习以多层参数和自动特征提取为特点，训练过程通常缺乏可解释性。</strong></p><h2 id="填空题（共3题，每题2分）"><a href="#填空题（共3题，每题2分）" class="headerlink" title="填空题（共3题，每题2分）"></a>填空题（共3题，每题2分）</h2><h3 id="20-深度学习通常需要使用▁结构以自动提取特征。"><a href="#20-深度学习通常需要使用▁结构以自动提取特征。" class="headerlink" title="20. 深度学习通常需要使用▁结构以自动提取特征。"></a>20. 深度学习通常需要使用▁结构以自动提取特征。</h3><p><strong>答案：多层神经网络</strong></p><h3 id="21-强化学习中，▁函数用于评估动作的好坏。"><a href="#21-强化学习中，▁函数用于评估动作的好坏。" class="headerlink" title="21. 强化学习中，▁函数用于评估动作的好坏。"></a>21. 强化学习中，▁函数用于评估动作的好坏。</h3><p><strong>答案：价值</strong></p><h3 id="22-知识图谱通过▁对实体进行连接，形成语义网络。"><a href="#22-知识图谱通过▁对实体进行连接，形成语义网络。" class="headerlink" title="22. 知识图谱通过▁对实体进行连接，形成语义网络。"></a>22. 知识图谱通过▁对实体进行连接，形成语义网络。</h3><p><strong>答案：关系</strong></p><h2 id="简答题（共3题）"><a href="#简答题（共3题）" class="headerlink" title="简答题（共3题）"></a>简答题（共3题）</h2><h3 id="23-简述联结主义的基本思想及其代表模型。（15分）"><a href="#23-简述联结主义的基本思想及其代表模型。（15分）" class="headerlink" title="23. 简述联结主义的基本思想及其代表模型。（15分）"></a>23. 简述联结主义的基本思想及其代表模型。（15分）</h3><p><strong>答案：</strong></p><p><strong>联结主义基本思想：</strong></p><p>利用数学模型研究人类认知方法，通过神经元的连接机制实现人工智能。</p><p><strong>代表模型</strong></p><ul><li>神经网络</li><li>支持向量机（SVM）</li></ul><h3 id="24-请说明强化学习与监督学习的主要区别。（15分）"><a href="#24-请说明强化学习与监督学习的主要区别。（15分）" class="headerlink" title="24. 请说明强化学习与监督学习的主要区别。（15分）"></a>24. 请说明强化学习与监督学习的主要区别。（15分）</h3><p><strong>答案：</strong></p><p>强化学习与监督学习的主要区别：</p><p><strong>学习机制差异</strong></p><p><strong>1.监督学习</strong></p><ul><li>依赖标注数据（输入输出对）</li><li>通过教师提供的明确标签进行学习</li></ul><p><strong>2.强化学习</strong></p><ul><li>通过环境互动获得反馈</li><li>需要自主探索最优策略</li></ul><p><strong>反馈形式差异</strong></p><p><strong>1.监督学习</strong></p><ul><li>接收即时准确的目标输出</li><li>直接修正预测误差</li></ul><p><strong>2.强化学习</strong></p><ul><li>接收延迟的奖励信号</li><li>需处理奖励稀疏性问题</li></ul><p><strong>应用场景差异</strong></p><p><strong>1.监督学习</strong></p><ul><li>适用于静态数据模式识别</li></ul><p><strong>2.强化学习</strong></p><ul><li>适用于动态决策过程</li><li>典型案例：围棋对弈（如AlphaGo）</li></ul><h3 id="25-人工智能未来的发展趋势有哪些？（16分）"><a href="#25-人工智能未来的发展趋势有哪些？（16分）" class="headerlink" title="25. 人工智能未来的发展趋势有哪些？（16分）"></a>25. 人工智能未来的发展趋势有哪些？（16分）</h3><p><strong>答案：</strong></p><p>人工智能未来发展趋势包括：</p><p><strong>核心要素发展</strong></p><ul><li>数据、算力、算法三要素持续演进</li></ul><p>关键技术方向</p><ul><li>机器学习自动化（AutoML）：实现算法选择、特征预处理与超参数设置自动化</li><li>分布式隐私保护：通过联邦学习技术打破数据孤岛，实现多机构联合建模</li><li>多学派方法融合：互补不同算法优势，提升综合性能</li><li>大规模无监督预训练：解决标注数据不足问题，挖掘无标签数据价值</li><li>因果学习方法：建立跨分布工作的因果模型，实现干预与反事实推断</li><li>可解释性AI（XAI）：提升算法透明度，保障公平性、安全性及隐私性</li></ul><p>硬件基础突破</p><ul><li>GPU等并行计算芯片加速数据处理效率</li><li>量子计算技术突破算力瓶颈，实现指数级增长</li><li>GPU与传统CPU运算速度差距最高达近七十倍</li></ul>]]></content>
    
    
    <categories>
      
      <category>前沿技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邹建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前沿技术习题一</title>
    <link href="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E4%B9%A0%E9%A2%98%E4%B8%80/"/>
    <url>/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E4%B9%A0%E9%A2%98%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机前沿技术第一次测验"><a href="#计算机前沿技术第一次测验" class="headerlink" title="计算机前沿技术第一次测验"></a>计算机前沿技术第一次测验</h1><h2 id="单选题（共10题，每题2分）"><a href="#单选题（共10题，每题2分）" class="headerlink" title="单选题（共10题，每题2分）"></a>单选题（共10题，每题2分）</h2><h3 id="1-以下哪项最准确地描述了人工智能的目标？"><a href="#1-以下哪项最准确地描述了人工智能的目标？" class="headerlink" title="1. 以下哪项最准确地描述了人工智能的目标？"></a>1. 以下哪项最准确地描述了人工智能的目标？</h3><ul><li>A. 替代人类工作</li><li>B. 模拟和扩展人类智能</li><li>C. 提高计算速度</li><li>D. 实现网络安全</li></ul><p><strong>答案：B</strong></p><p><strong>解析：人工智能研究目的是扩展人类智能</strong></p><h3 id="2-联结主义理论主要借鉴于以下哪一领域的研究成果？"><a href="#2-联结主义理论主要借鉴于以下哪一领域的研究成果？" class="headerlink" title="2. 联结主义理论主要借鉴于以下哪一领域的研究成果？"></a>2. 联结主义理论主要借鉴于以下哪一领域的研究成果？</h3><ul><li>A. 数学</li><li>B. 哲学</li><li>C. 神经科学</li><li>D. 语言学</li></ul><p><strong>答案：C</strong></p><p><strong>解析：联结主义基于神经元的连接机制</strong></p><h3 id="3-行为主义人工智能的代表模型是？"><a href="#3-行为主义人工智能的代表模型是？" class="headerlink" title="3. 行为主义人工智能的代表模型是？"></a>3. 行为主义人工智能的代表模型是？</h3><ul><li>A. 逻辑推理系统</li><li>B. 专家系统</li><li>C. 感知-行动系统</li><li>D. 模糊控制系统</li></ul><p><strong>答案：C</strong></p><p><strong>解析：行为主义采用感知-动作型控制系统</strong></p><h3 id="4-符号主义方法最强调以下哪个方面？"><a href="#4-符号主义方法最强调以下哪个方面？" class="headerlink" title="4. 符号主义方法最强调以下哪个方面？"></a>4. 符号主义方法最强调以下哪个方面？</h3><ul><li>A. 数据驱动</li><li>B. 黑箱模型</li><li>C. 逻辑推理</li><li>D. 模仿行为</li></ul><p><strong>答案：C</strong></p><p><strong>解析：符号主义强调逻辑推理与显式公理</strong></p><h3 id="5-深度学习相较于传统机器学习的优势主要体现在哪？"><a href="#5-深度学习相较于传统机器学习的优势主要体现在哪？" class="headerlink" title="5. 深度学习相较于传统机器学习的优势主要体现在哪？"></a>5. 深度学习相较于传统机器学习的优势主要体现在哪？</h3><ul><li>A. 算法更简单</li><li>B. 不需要特征提取</li><li>C. 训练速度更快</li><li>D. 数据需求更少</li></ul><p><strong>答案：B</strong></p><p><strong>解析：深度学习自动提取特征</strong></p><h3 id="6-强化学习中的奖励函数的作用是？"><a href="#6-强化学习中的奖励函数的作用是？" class="headerlink" title="6. 强化学习中的奖励函数的作用是？"></a>6. 强化学习中的奖励函数的作用是？</h3><ul><li>A. 限制行为</li><li>B. 提供反馈信号</li><li>C. 表示模型结构</li><li>D. 加速训练</li></ul><p><strong>答案：B</strong></p><p><strong>解析：强化学习通过奖励信号优化行为</strong></p><h3 id="7-知识图谱中的边表示？"><a href="#7-知识图谱中的边表示？" class="headerlink" title="7. 知识图谱中的边表示？"></a>7. 知识图谱中的边表示？</h3><ul><li>A. 节点属性</li><li>B. 概念分类</li><li>C. 实体关系</li><li>D. 数据类型</li></ul><p><strong>答案：C</strong></p><p><strong>解析：知识图谱边表示实体间关系</strong></p><h3 id="8-哪个不属于深度学习常见模型？"><a href="#8-哪个不属于深度学习常见模型？" class="headerlink" title="8. 哪个不属于深度学习常见模型？"></a>8. 哪个不属于深度学习常见模型？</h3><ul><li>A. 卷积神经网络</li><li>B. 决策树</li><li>C. 循环神经网络</li><li>D. Transformer</li></ul><p><strong>答案：B</strong></p><p><strong>解析：决策树属于传统机器学习</strong></p><h3 id="9-以下哪一项不是人工智能的发展趋势？"><a href="#9-以下哪一项不是人工智能的发展趋势？" class="headerlink" title="9. 以下哪一项不是人工智能的发展趋势？"></a>9. 以下哪一项不是人工智能的发展趋势？</h3><ul><li>A. 泛化能力增强</li><li>B. 可解释性提升</li><li>C. 数据依赖减弱</li><li>D. 资源消耗增加</li></ul><p><strong>答案：D</strong></p><p><strong>解析：资源消耗增加是现实问题而非趋势</strong></p><h3 id="10-人工智能的英文缩写是？"><a href="#10-人工智能的英文缩写是？" class="headerlink" title="10. 人工智能的英文缩写是？"></a>10. 人工智能的英文缩写是？</h3><ul><li>A. AG</li><li>B. AI</li><li>C. AS</li><li>D. AM</li></ul><p><strong>答案：B</strong></p><p><strong>解析：AI是人工智能标准缩写</strong></p><h2 id="多选题（共5题，每题4分）"><a href="#多选题（共5题，每题4分）" class="headerlink" title="多选题（共5题，每题4分）"></a>多选题（共5题，每题4分）</h2><h3 id="11-以下哪些属于人工智能的三大学派？"><a href="#11-以下哪些属于人工智能的三大学派？" class="headerlink" title="11. 以下哪些属于人工智能的三大学派？"></a>11. 以下哪些属于人工智能的三大学派？</h3><ul><li>A. 行为主义</li><li>B. 符号主义</li><li>C. 联结主义</li><li>D. 生物主义</li><li>E. 技术主义</li></ul><p><strong>答案：A、B、C</strong></p><p><strong>解析：</strong></p><h3 id="12-以下哪些属于深度学习的常见应用？"><a href="#12-以下哪些属于深度学习的常见应用？" class="headerlink" title="12. 以下哪些属于深度学习的常见应用？"></a>12. 以下哪些属于深度学习的常见应用？</h3><ul><li>A. 图像识别</li><li>B. 语音识别</li><li>C. 逻辑归纳</li><li>D. 机器翻译</li><li>E. 自动驾驶</li></ul><p><strong>答案：A、B、D、E</strong></p><p><strong>解析：</strong></p><h3 id="13-强化学习中涉及哪些基本要素？"><a href="#13-强化学习中涉及哪些基本要素？" class="headerlink" title="13. 强化学习中涉及哪些基本要素？"></a>13. 强化学习中涉及哪些基本要素？</h3><ul><li>A. 状态</li><li>B. 动作</li><li>C. 奖励</li><li>D. 训练样本</li><li>E. 策略</li></ul><p><strong>答案：A、B、C、E</strong></p><p><strong>解析：</strong></p><h3 id="14-知识图谱中的基本组成部分包括哪些？"><a href="#14-知识图谱中的基本组成部分包括哪些？" class="headerlink" title="14. 知识图谱中的基本组成部分包括哪些？"></a>14. 知识图谱中的基本组成部分包括哪些？</h3><ul><li>A. 实体</li><li>B. 属性</li><li>C. 关系</li><li>D. 向量</li><li>E. 网络结构</li></ul><p><strong>答案：A、B、C</strong></p><p><strong>解析：</strong></p><h3 id="15-人工智能的早期成就包括哪些？"><a href="#15-人工智能的早期成就包括哪些？" class="headerlink" title="15. 人工智能的早期成就包括哪些？"></a>15. 人工智能的早期成就包括哪些？</h3><ul><li>A. 图灵测试</li><li>B. 逻辑理论家</li><li>C. 感知器</li><li>D. AlphaGo</li><li>E. BERT</li></ul><p><strong>答案：A、B、C</strong></p><p><strong>解析：</strong></p><h2 id="判断题（共4题，每题2分）"><a href="#判断题（共4题，每题2分）" class="headerlink" title="判断题（共4题，每题2分）"></a>判断题（共4题，每题2分）</h2><h3 id="16-深度学习模型通常需要大量的训练数据。"><a href="#16-深度学习模型通常需要大量的训练数据。" class="headerlink" title="16. 深度学习模型通常需要大量的训练数据。"></a>16. 深度学习模型通常需要大量的训练数据。</h3><p><strong>答案：正确</strong></p><p><strong>解析：深度学习依赖多层神经网络自动提取特征，其参数量大、模型复杂度高，需要大量训练数据以避免过拟合。</strong></p><h3 id="17-联结主义模型无法进行任何形式的学习。"><a href="#17-联结主义模型无法进行任何形式的学习。" class="headerlink" title="17. 联结主义模型无法进行任何形式的学习。"></a>17. 联结主义模型无法进行任何形式的学习。</h3><p><strong>答案：错误</strong></p><p><strong>解析： 联结主义（如神经网络）的核心正是通过调整神经元连接权重实现学习，例如反向传播算法即为其典型学习机制。</strong></p><h3 id="18-行为主义强调内部表示和推理。"><a href="#18-行为主义强调内部表示和推理。" class="headerlink" title="18. 行为主义强调内部表示和推理。"></a>18. 行为主义强调内部表示和推理。</h3><p><strong>答案：错误</strong></p><p><strong>解析：行为主义强调通过环境反馈（如强化学习中的奖励信号）调整行为，而否定对内部心智状态或符号化推理的依赖。</strong></p><h3 id="19-符号主义方法主要用于处理结构化规则推理问题。"><a href="#19-符号主义方法主要用于处理结构化规则推理问题。" class="headerlink" title="19. 符号主义方法主要用于处理结构化规则推理问题。"></a>19. 符号主义方法主要用于处理结构化规则推理问题。</h3><p><strong>答案：正确</strong></p><p><strong>解析：符号主义基于形式化符号系统（如逻辑规则、知识图谱），擅长处理定义明确的推理任务（如定理证明、专家系统）。</strong></p><h2 id="填空题（共3题，每题2分）"><a href="#填空题（共3题，每题2分）" class="headerlink" title="填空题（共3题，每题2分）"></a>填空题（共3题，每题2分）</h2><h3 id="20-符号主义人工智能方法依赖于对知识的▁和规则的执行。"><a href="#20-符号主义人工智能方法依赖于对知识的▁和规则的执行。" class="headerlink" title="20. 符号主义人工智能方法依赖于对知识的▁和规则的执行。"></a>20. 符号主义人工智能方法依赖于对知识的▁和规则的执行。</h3><p><strong>答案：表示</strong></p><h3 id="21-强化学习中，智能体的目标是最大化▁的期望总和。"><a href="#21-强化学习中，智能体的目标是最大化▁的期望总和。" class="headerlink" title="21. 强化学习中，智能体的目标是最大化▁的期望总和。"></a>21. 强化学习中，智能体的目标是最大化▁的期望总和。</h3><p><strong>答案：奖励</strong></p><h3 id="22-知识图谱以▁结构组织信息，便于语义理解和推理。"><a href="#22-知识图谱以▁结构组织信息，便于语义理解和推理。" class="headerlink" title="22. 知识图谱以▁结构组织信息，便于语义理解和推理。"></a>22. 知识图谱以▁结构组织信息，便于语义理解和推理。</h3><p><strong>答案：图</strong></p><h2 id="简答题（共3题）"><a href="#简答题（共3题）" class="headerlink" title="简答题（共3题）"></a>简答题（共3题）</h2><h3 id="23-简述知识图谱的基本概念及其主要应用领域。（15分）"><a href="#23-简述知识图谱的基本概念及其主要应用领域。（15分）" class="headerlink" title="23. 简述知识图谱的基本概念及其主要应用领域。（15分）"></a>23. 简述知识图谱的基本概念及其主要应用领域。（15分）</h3><p><strong>答案：</strong></p><p>知识图谱基本概念及其应用领域</p><p>一、基本概念</p><ol><li>本质特征：<br>由相互连接的实体及其属性构成，每条知识表示为SPO三元组（主体谓词客体）<br>强调”things not strings”理念，关注字符串背后的实体关联而非单纯文本匹配</li><li>技术渊源：<br>继承自语义网络（1950s）、专家系统、语义网（1989）和关联数据（2006）<br>采用RDF标准数据模型，使用IRI（国际资源标识符）实现资源唯一标识</li><li>核心能力：<br>支持语义搜索、知识链接与推理补全<br>兼容知识表示、自然语言处理、机器学习等多领域技术</li></ol><p>二、主要应用领域</p><ol><li>搜索引擎优化：<br>生成实体”知识卡片”，提供结构化信息展示<br>提升查询结果精准度与信息获取效率</li><li>专业领域应用：<br>金融领域：构建公司图谱、整合交易&#x2F;政策&#x2F;财务多维度数据<br>医疗领域：中医药知识服务平台整合文献资源与语义网络</li><li>智能服务：<br>支持常识推理与语义问答<br>辅助自然语言理解与多模态数据分析</li><li>数据整合：<br>实现跨源数据融合与虚拟仓库集成<br>支持企业级知识管理与业务决策分析</li></ol><h3 id="24-人工智能的三大学派有何异同？（16分）"><a href="#24-人工智能的三大学派有何异同？（16分）" class="headerlink" title="24. 人工智能的三大学派有何异同？（16分）"></a>24. 人工智能的三大学派有何异同？（16分）</h3><p><strong>答案：</strong></p><p>人工智能三大学派的异同点如下：</p><p>共同点：<br>• 均围绕人类智能的模拟与实现展开研究<br>• 产生于不同时代背景与学科交叉领域<br>• 均形成了系统的技术实现路径</p><p>差异对比：</p><table><thead><tr><th>学派名称</th><th>核心理念</th><th>典型方法</th></tr></thead><tbody><tr><td>联结主义</td><td>基于神经元连接机制构建数学模型模拟人类认知</td><td>神经网络、SVM</td></tr><tr><td>符号主义</td><td>通过符号推导与逻辑体系构建显式人工智能系统，将学习视为逆向演绎过程</td><td>专家系统、知识图谱</td></tr><tr><td>行为主义</td><td>依托控制论原理，通过感知动作型控制系统模拟智能行为</td><td>强化学习</td></tr></tbody></table><h3 id="25-深度学习与传统机器学习的主要区别有哪些？（15分）"><a href="#25-深度学习与传统机器学习的主要区别有哪些？（15分）" class="headerlink" title="25. 深度学习与传统机器学习的主要区别有哪些？（15分）"></a>25. 深度学习与传统机器学习的主要区别有哪些？（15分）</h3><p><strong>答案：</strong></p><p>深度学习与传统机器学习的主要区别体现在：</p><ol><li><p>算法层次结构</p><p> 传统机器学习主要采用浅层学习算法（如BP算法、SVM、Boosting等），其局限性在于对复杂函数的表示能力有限。而深度学习通过深层网络结构突破了这一瓶颈。</p></li><li><p>数据处理能力</p><p> 传统机器学习在有限样本和计算单元条件下，对复杂数据处理受到制约。深度学习能够通过多层非线性变换处理更复杂的非结构化数据。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前沿技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邹建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前沿技术第九章</title>
    <link href="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E4%B9%9D%E7%AB%A0/"/>
    <url>/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E4%B9%9D%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="9-知识图谱"><a href="#9-知识图谱" class="headerlink" title="9.知识图谱"></a>9.知识图谱</h1><p><a href="./9.%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1.pdf">9.知识图谱.pdf</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>总结：为什么需要知识图谱以及其相关概念</strong></p><p><strong>1知识图谱的必要性</strong></p><p>◦传统搜索引擎只能返回与查询字符串相关的网页，而无法理解查询背后的语义信息。知识图谱通过构建机器的先验知识，使计算机能够理解文本背后的含义。</p><p>◦知识图谱的核心理念是”things not strings”，即关注对象或事物本身，而非无意义的字符串。</p><p><strong>2知识图谱的概念</strong></p><p>◦知识图谱是由相互连接的实体及其属性构成，用SPO三元组（Subject-Predicate-Object）表示知识。</p><p>◦它的本质是为了表示知识，帮助机器理解文本背后的意义，并进行推理和关联。</p><p><strong>3发展历程</strong></p><p>◦知识图谱的思想可以追溯到上世纪五六十年代的语义网络（Semantic Network），后来发展出专家系统、语义网（Semantic Web）和关联数据（Linked Data）等。</p><p>◦Google于2012年发布知识图谱，旨在提升搜索引擎返回答案的质量和效率。</p><p><strong>4典型项目</strong></p><p><strong>◦Cyc</strong>：始于1984年，目标是建立最大的常识知识库，包含50万条术语和700万条断言，采用形式化知识表示方法。</p><p><strong>◦WordNet</strong>：由普林斯顿大学开发，主要用于词义消歧，定义了名词、动词、形容词和副词之间的语义关系。</p><p><strong>◦ConceptNet</strong>：基于众包构建的常识知识库，采用自然语言描述，支持多语言。</p><p><strong>◦DBPedia</strong>：从Wikipedia中抽取的链接数据集，采用RDF语义数据模型，包含30亿RDF三元组。</p><p><strong>◦YAGO</strong>：集成Wikipedia、WordNet和GeoNames的数据，包含时间和空间维度的属性描述。</p><p><strong>5技术概览</strong></p><p><strong>◦知识表示</strong>：包括语义网框架（如RDF、RDFS、OWL）和SPARQL查询语言。</p><p><strong>◦知识抽取</strong>：结合自然语言处理（NLP）和知识表示（KR）技术。</p><p><strong>◦知识存储</strong>：分为基于关系数据库和基于原生图的存储方式。</p><p><strong>◦知识问答（KBQA）</strong>：实现自然语言提问的自动回答。</p><p><strong>◦知识推理</strong>：基于已知事实推出未知事实。</p><p><strong>◦知识融合</strong>：整合不同数据源中的实体信息，形成更全面的描述。</p><p><strong>6典型案例</strong></p><p>◦知识图谱在搜索引擎、智能问答、推荐系统等领域有广泛应用，提升了用户体验和信息获取效率。</p><p>总结来说，知识图谱通过构建机器可理解的知识体系，帮助解决计算机对文本语义的理解问题，推动了人工智能和信息检索技术的发展。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><strong>为什么需要知识图谱</strong></p><p>•解决计算机无法获取网络文本语义信息的问题</p><p>•提升搜索引擎返回的答案质量和用户查询效率</p><p><strong>什么是知识图谱</strong></p><p>•知识图谱的核心概念</p><p>•“things not strings”：获取字符串背后隐含的对象或事物</p><p><strong>一、看到的不仅仅是字符串</strong></p><p>•计算机面临的困境：无法理解文本背后的含义</p><p>•通过实体建模、属性填充和关系拓展构建机器的先验知识</p><p>•Google知识图谱的应用场景及意义</p><p><strong>实体扩展示例</strong></p><p>•围绕罗纳尔多实体进行扩展，构建知识图</p><p>•机器能够理解文本背后的含义</p><p><strong>搜索引擎改进</strong></p><p>•Google知识图谱提升搜索结果质量</p><p>•返回结构化信息和相关对象的基本信息</p><p><strong>发展趋势</strong></p><p>•知识图谱符合计算机科学与互联网发展潮流</p><p><strong>二、知识图谱的前世今生</strong></p><p>•知识图谱的概念溯源</p><p>•与语义网络、专家系统、语义网、关联数据的关系</p><p><strong>知识图谱定义</strong></p><p>•知识图谱是由相互连接的实体及其属性构成</p><p>•SPO三元组形式表示知识</p><p><strong>RDF形式化表示</strong></p><p>•资源描述框架（RDF）标准数据模型</p><p>•IRI、blank node和literal类型说明</p><p>•SPO三元组类型约束</p><p><strong>示例</strong></p><p>•使用RDF表示”罗纳尔多的中文名是罗纳尔多·路易斯·纳扎里奥·达·利马”</p><p><strong>正式知识图表示</strong></p><p>•知识图的正式图形化表示</p><p><strong>三、典型知识库项目</strong></p><p><strong>Cyc</strong></p><p>•常识知识库项目</p><p>•包含术语和断言</p><p>•形式化知识表示方法支持复杂推理</p><p><strong>WordNet</strong></p><p>•词典知识库</p><p>•定义名词、动词、形容词和副词之间的语义关系</p><p><strong>ConceptNet</strong></p><p>•常识知识库</p><p>•非形式化描述，接近自然语言</p><p>•支持多种语言</p><p><strong>Freebase</strong></p><p>•开放式协作知识库</p><p><strong>Wikidata</strong></p><p>•维基百科的数据集</p><p><strong>DBPedia</strong></p><p>•数据库版本的Wikipedia</p><p>•包含严格本体和大量RDF三元组</p><p><strong>YAGO</strong></p><p>•链接数据库</p><p>•集成Wikipedia、WordNet和GeoNames数据</p><p>•具有时间和空间维度属性</p><p><strong>中文知识图谱资源</strong></p><p>•OpenKG.CN</p><p>•Zhishi.me</p><p><strong>四、知识图谱技术概览</strong></p><p><strong>知识表示</strong></p><p>•核心概念和技术框架</p><p><strong>语义网知识表示框架</strong></p><p>•RDF、RDFS、OWL</p><p>•SPARQL：访问和操作RDF数据的核心技术</p><p><strong>知识图谱的分布式表示</strong></p><p>•分布式存储和处理技术</p><p><strong>知识抽取</strong></p><p>•自然语言处理（NLP）和知识表示（KR）</p><p><strong>知识存储</strong></p><p>•图的特点、复杂知识结构存储、索引和查询优化</p><p><strong>典型引擎</strong></p><p>•基于关系数据库的存储</p><p>•基于原生图的存储</p><p><strong>知识问答KBQA</strong></p><p>•自动问答系统基本形态</p><p>•KBQA实现流程</p><p><strong>知识推理</strong></p><p>•推理过程定义</p><p>•搜索引擎支持的推理能力</p><p><strong>知识融合</strong></p><p>•不同数据源中实体信息整合</p><p>•形成更加全面的实体信息</p><p><strong>五、典型案例</strong></p><p>•知识图谱在各领域的实际应用</p>]]></content>
    
    
    <categories>
      
      <category>前沿技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邹建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前沿技术第八章</title>
    <link href="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/"/>
    <url>/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="8-强化学习"><a href="#8-强化学习" class="headerlink" title="8.强化学习"></a>8.强化学习</h1><p><a href="./8.%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0.pdf">8.强化学习.pdf</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以下是关于”行为主义（强化学习）和Deep Reinforcement Learning（深度强化学习）”内容的总结概括：</p><p><strong>强化学习概述</strong></p><p><strong>•核心概念</strong>：强化学习是一种机器学习方法，代理（Agent）通过与环境（Environment）交互，采取行动（Action），观察状态（State）并获得奖励（Reward），目标是最大化期望的奖励。</p><p><strong>•基本流程</strong>：代理从环境中接收观察结果，选择动作，执行后获得奖励和新的状态信息，从而不断优化策略。</p><p><strong>强化学习的特点</strong></p><p><strong>•奖励延迟</strong>：某些行为的长期影响可能在短期内无法显现，例如围棋中的早期牺牲可能带来后期优势。</p><p><strong>•行为序列学习</strong>：学习的是一系列行为，而非单一行为，目标是最大化整个过程的奖励。</p><p><strong>•动态互动</strong>：代理的行为会影响后续接收到的数据，需要持续与环境互动以更新算法。</p><p><strong>强化学习的应用</strong></p><p><strong>•游戏</strong>：如AlphaGo结合监督学习和强化学习，通过自我对弈提升能力。</p><p><strong>•机器人控制</strong>：如直升机、自动驾驶、机器人等领域的应用。</p><p><strong>•节能优化</strong>：谷歌使用DeepMind驱动的人工智能削减电费。</p><p><strong>•文本生成</strong>：通过强化学习生成自然语言文本。</p><p><strong>深度强化学习的核心方法</strong></p><p><strong>•Policy-based Approach</strong>：直接学习策略函数（Actor），输出每个动作的概率分布。</p><p><strong>•Value-based Approach</strong>：学习价值函数（Critic），评估策略的好坏，Q学习是典型代表。</p><p><strong>•Actor-Critic 方法</strong>：结合Policy-based和Value-based的优点，同时学习策略和价值函数。</p><p><strong>•A3C（Asynchronous Advantage Actor-Critic）</strong>：解决Actor-Critic难以收敛的问题，提供异步并发框架，显著提升训练效率。</p><p><strong>示例</strong></p><p><strong>•玩游戏</strong>：通过像素输入学习游戏操作，例如Space Invader中，代理通过观察屏幕像素选择移动或开火动作，并根据得分调整策略。</p><p><strong>•AlphaGo</strong>：结合Policy-based、Value-based和Model-based方法，通过大量自我对弈优化策略。</p><p><strong>参考资料</strong></p><p>•教材：《Reinforcement Learning: An Introduction》</p><p>•视频课程：David Silver和John Schulman的讲义及视频资源</p><p>•开源工具：OpenAI Gym和Universe，提供丰富的模拟环境供强化学习研究。</p><p>总结：强化学习通过代理与环境的交互，逐步优化策略以实现目标。深度强化学习结合神经网络，提升了复杂任务的学习能力，在游戏、机器人控制等领域展现出巨大潜力。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><strong>行为主义（强化学习）</strong></p><p><strong>主要参考资源</strong></p><p>•Textbook: Reinforcement Learning: An Introduction</p><p>•Lectures of David Silver</p><p>•Lectures of John Schulman</p><p><strong>强化学习的基本方案</strong></p><p>•Agent与Environment交互</p><p>◦Observation（观察）</p><p>◦Action（动作）</p><p>◦Reward（奖励）</p><p>◦State（状态）</p><p>•目标：最大化期望的奖励</p><p><strong>核心概念</strong></p><p>1机器学习 ≈ 寻找一个函数</p><p>◦Function input: Observation</p><p>◦Function output: Action &#x3D; π(Observation)</p><p>◦Actor&#x2F;Policy: 学习采取最佳行动</p><p><strong>具体应用案例</strong></p><p><strong>学习下围棋</strong></p><p>•环境与奖励机制</p><p>◦如果赢了，reward &#x3D; 1</p><p>◦如果输了，reward &#x3D; -1</p><p>◦大多数情况下，reward &#x3D; 0</p><p>•Alpha Go 的方法</p><p>◦监督学习 + 强化学习</p><p>◦Learning from teacher 和 Learning from experience</p><p><strong>更多应用领域</strong></p><p>1直升机控制</p><p>2自动驾驶</p><p>3机器人</p><p>4谷歌DeepMind削减电费</p><p>5文本生成</p><p><strong>强化学习的实际例子</strong></p><p><strong>打游戏</strong></p><p>•机器学习像人类玩家一样打游戏</p><p>◦观察像素</p><p>◦自主采取适当行动</p><p>•使用环境工具</p><p>◦OpenAI Gym</p><p>◦OpenAI Universe</p><p><strong>游戏示例：Space Invader</strong></p><p>•游戏流程</p><p>◦初始状态 (s1) → 行动 (a1) → 回馈 (r1) → 新状态 (s2) → 行动 (a2) → 回馈 (r2)</p><p>◦最终目标：最大化累积奖励</p><p><strong>强化学习的特性</strong></p><p>•奖励延迟</p><p>◦早期行为可能在后期产生重要影响</p><p>◦机器需要理解一系列行为的整体价值</p><p>•数据动态性</p><p>◦机器通过与环境互动获取数据并更新算法</p><p><strong>强化学习的核心方法</strong></p><p><strong>Policy-based Approach</strong></p><p>•学习一个Actor</p><p>◦神经网络作为Actor</p><p>▪输入：机器的观察表示为向量或矩阵</p><p>▪输出：每个行动相关的神经元概率分布</p><p><strong>Value-based Approach</strong></p><p>•学习一个Critic</p><p>◦Critic评估Actor的好坏</p><p>◦Q-学习方法</p><p><strong>Actor-Critic 方法</strong></p><p>•结合Policy-based和Value-based</p><p>◦TD或MC方法</p><p>◦A3C框架</p><p>▪每个worker从global network复制参数</p><p>▪不同worker与环境互动</p><p>▪计算各自梯度并传回global network进行更新</p><p><strong>Alpha Go 的综合方法</strong></p><p>•Policy-based + Value-based + Model-based</p>]]></content>
    
    
    <categories>
      
      <category>前沿技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邹建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前沿技术第七章</title>
    <link href="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/"/>
    <url>/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="7-深度学习框架"><a href="#7-深度学习框架" class="headerlink" title="7.深度学习框架"></a>7.深度学习框架</h1><p><a href="./7.%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6.pdf">7.深度学习框架.pdf</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>深度学习框架总结</strong></p><p><strong>1. 概述</strong></p><p>随着深度学习技术的发展，各大公司和高校推出了多种深度学习框架，如TensorFlow、PyTorch、Caffe、Theano、Keras等。这些框架广泛应用于计算机视觉、语音识别、自然语言处理等领域，并取得了显著效果。</p><p><strong>2. 主要深度学习框架介绍</strong></p><p><strong>•Theano</strong></p><p>◦开发于蒙特利尔大学LISA实验室，是首个有较大影响力的Python深度学习框架。</p><p>◦特点：支持数学表达式的定义、优化和计算，尤其擅长多维数组运算。</p><p>◦缺点：调试困难，构建图慢，已于2017年停止开发。</p><p>◦评价：作为先驱框架，为后续框架奠定了基础，但不建议继续学习。</p><p><strong>•TensorFlow</strong></p><p>◦由Google推出，基于DistBelief构建，是目前最流行的深度学习框架。</p><p>◦特点：基于计算图实现自动微分系统，支持多种编程接口（Python、C++等）。</p><p>◦缺点：系统设计复杂，接口变动频繁，文档混乱，学习曲线陡峭。</p><p>◦评价：尽管存在缺陷，但由于强大的社区支持和推广能力，适合生产环境。</p><p><strong>•PyTorch</strong></p><p>◦由Facebook人工智能研究院开源，迅速成为研究领域的热门框架。</p><p>◦特点：提供动态图机制和先进的自动求导系统，易于使用。</p><p>◦评价：因其灵活性和易用性，在研究领域广受欢迎，热度持续上升。</p><p><strong>•Keras</strong></p><p>◦高层神经网络API，支持快速实验，可使用TensorFlow、Theano、CNTK作为后端。</p><p>◦特点：简单易学，减少用户工作量。</p><p>◦缺点：过度封装导致灵活性不足，性能较慢。</p><p>◦评价：适合初学者入门，但在高级应用中受限。</p><p><strong>•Caffe&#x2F;Caffe2</strong></p><p>◦Caffe：清晰高效的框架，核心语言为C++，支持命令行、Python和MATLAB接口。</p><p>◦Caffe2：继承Caffe优点，注重轻量级和便携性，支持多平台部署。</p><p>◦缺点：Caffe灵活性不足，Caffe2文档不完善。</p><p>◦评价：Caffe在计算机视觉领域曾占重要地位，Caffe2适合生产环境。</p><p><strong>•MXNet</strong></p><p>◦支持多种编程语言，分布式性能强大，内存优化显著。</p><p>◦缺点：推广力度不足，文档更新滞后。</p><p>◦评价：适合AWS云平台使用，但流行度有限。</p><p><strong>•CNTK</strong></p><p>◦由微软开发，性能突出，尤其在语音领域表现优异。</p><p>◦缺点：社区活跃度低，推广不足。</p><p>◦评价：适合语音相关研究。</p><p><strong>3. 其他框架</strong></p><p>还有其他一些框架如PaddlePaddle、DyNet、DeepLearning4J等，各有特色，但流行度和关注度相对较低。</p><p><strong>4. AI实践：MNIST手写数字识别</strong></p><p>•使用Keras搭建卷积神经网络LeNet进行MNIST数据集的手写数字识别。</p><p>•Keras因其简洁易用的特点被选中，提供了简单的API来构建和训练神经网络。</p><p>•安装依赖库后，通过Keras-MNIST-LeNet.html文件实现具体操作。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><strong>深度学习框架概述</strong></p><p>•常见的深度学习框架及其应用领域</p><p>1框架：TensorFlow、PyTorch、Caffe、Theano、Keras等</p><p>2应用领域：计算机视觉、语音识别、自然语言处理与生物信息学</p><p><strong>Theano</strong></p><p><strong>核心特点</strong></p><p>•开发背景：诞生于蒙特利尔大学LISA实验室，2008年开始开发</p><p>•功能描述：支持定义、优化和计算数学表达式，特别是多维数组（numpy.ndarray）</p><p>•性能优势：通过GPU加速，速度远超基于CPU计算的C语言</p><p><strong>设计与局限</strong></p><p>•学术气息浓厚但工程设计有缺陷</p><p>•缺点：难调试、构建图慢</p><p>•第三方框架：Lasagne、Blocks、PyLearn2和Keras</p><p><strong>发展历程</strong></p><p>•2017年9月28日，Yoshua Bengio宣布Theano即将停止开发</p><p>•历史贡献：为深度学习研究人员早期研究提供了极大帮助</p><p><strong>点评</strong></p><p>•不建议作为研究工具继续学习</p><p><strong>TensorFlow</strong></p><p><strong>核心特点</strong></p><p>•开发背景：由Google Brain团队开发，2015年11月10日开源</p><p>•功能描述：支持机器学习和深度神经网络研究，可应用于众多领域</p><p>•技术特点：基于计算图实现自动微分系统，使用数据流图进行数值计算</p><p><strong>设计与局限</strong></p><p>•系统设计复杂：GitHub代码仓库总代码量超过100万行</p><p>•接口问题：频繁变动且向后兼容性差</p><p>•文档问题：缺乏条理和层次，入门教程不足</p><p>•第三方框架：Keras、Sonnet、TFLearn等</p><p><strong>发展现状</strong></p><p>•当前最流行的深度学习框架</p><p>•社区强大，适合生产环境</p><p><strong>点评</strong></p><p>•不完美但最流行的深度学习框架</p><p><strong>PyTorch</strong></p><p><strong>核心特点</strong></p><p>•开发背景：Facebook人工智能研究院（FAIR）团队于2017年1月开源</p><p>•功能描述：提供最先进的自动求导系统，成为动态图框架</p><p>•发展趋势：自发布起关注度持续上升</p><p><strong>设计与优势</strong></p><p>•易用性：Python接口友好，生态完整</p><p>•技术特点：重构Lua Torch模块，新增动态图支持</p><p><strong>点评</strong></p><p>•快速流行于研究领域</p><p><strong>Keras</strong></p><p><strong>核心特点</strong></p><p>•开发背景：纯Python编写，支持TensorFlow、Theano及CNTK作为后端</p><p>•功能描述：高层神经网络API，支持快速实验</p><p><strong>设计与局限</strong></p><p>•优点：一致而简洁的API，减少用户工作量</p><p>•缺点：过度封装导致灵活性丧失，程序运行缓慢</p><p><strong>点评</strong></p><p>•入门简单但不够灵活，使用受限</p><p><strong>Caffe&#x2F;Caffe2</strong></p><p><strong>核心特点</strong></p><p>•开发背景：核心语言为C++，支持命令行、Python和MATLAB接口</p><p>•功能描述：清晰高效的深度学习框架，支持CPU和GPU运行</p><p><strong>设计与局限</strong></p><p>•优点：简洁快速</p><p>•缺点：缺少灵活性，扩展困难，依赖环境配置复杂</p><p><strong>发展历程</strong></p><p>•曾占据计算机视觉研究领域的半壁江山</p><p>•Caffe2：继承Caffe优点，解决瓶颈问题，强调便携性和移动端部署</p><p><strong>点评</strong></p><p>•性能优异，几乎全平台支持，适合生产环境</p><p><strong>MXNet</strong></p><p><strong>核心特点</strong></p><p>•开发背景：由一群学生开发，后被AWS选为官方深度学习平台</p><p>•功能描述：支持多种编程语言，超强分布式支持和显存优化</p><p><strong>设计与局限</strong></p><p>•优点：内存和显存占用小，分布式性能优越</p><p>•缺点：推广不力，文档更新不及时</p><p><strong>生态建设</strong></p><p>•MinPy、Keras和Gluon接口推出</p><p>•Gluon模仿PyTorch接口设计，吸引新用户</p><p><strong>点评</strong></p><p>•文档略混乱，但分布式性能强大，适合AWS云平台使用</p><p><strong>CNTK</strong></p><p><strong>核心特点</strong></p><p>•开发背景：微软研究院开发，2015年8月开源</p><p>•功能描述：描述神经网络为计算图结构，支持CPU和GPU模式</p><p><strong>设计与优势</strong></p><p>•性能突出：比主流工具更强</p><p>•领域优势：在语音领域效果显著</p><p><strong>点评</strong></p><p>•社区不够活跃，但性能均衡，擅长语音相关研究</p><p><strong>其他框架</strong></p><p>•PaddlePaddle：百度开源</p><p>•DyNet：CMU开发</p><p>•tiny-dnn：简洁无依赖符合C++11标准</p><p>•DeepLearning4J：使用Java开发，文档优秀</p><p>•Nervana：英特尔开源</p><p>•DSSTNE：Amazon开源</p><p><strong>AI实践：MNIST手写数字识别</strong></p><p><strong>数据集描述</strong></p><p>•数据集规模：包含70000张手写数字图片，60000张训练图片和10000张测试图片</p><p>•数据来源：高中生和工作人员</p><p>•数据格式：每张图片为28x28像素，转成784的一维向量存储</p><p><strong>使用Keras搭建卷积神经网络</strong></p><p>•Keras优点：简洁好用，提供简单模块化API</p><p>•安装依赖库：Numpy、scipy、scikit-learn、matplotlib、pandas、graphviz、pydot、h5py、Theano、TensorFlow、Keras</p><p>•实现方法：搭建卷积神经网络LeNet用于手写数字识别</p>]]></content>
    
    
    <categories>
      
      <category>前沿技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邹建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前沿技术第六章</title>
    <link href="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/"/>
    <url>/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="6-表示学习和生成式模型"><a href="#6-表示学习和生成式模型" class="headerlink" title="6.表示学习和生成式模型"></a>6.表示学习和生成式模型</h1><p><a href="./6.%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0%E5%92%8C%E7%94%9F%E6%88%90%E5%BC%8F%E6%A8%A1%E5%9E%8B.pdf">6.表示学习和生成式模型.pdf</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="表示学习和生成式模型总结"><a href="#表示学习和生成式模型总结" class="headerlink" title="表示学习和生成式模型总结"></a><strong>表示学习和生成式模型总结</strong></h2><h3 id="1-表示学习（Representation-Learning）"><a href="#1-表示学习（Representation-Learning）" class="headerlink" title="1. 表示学习（Representation Learning）"></a><strong>1. 表示学习（Representation Learning）</strong></h3><ul><li><strong>定义与目标</strong>：表示学习是从未标记数据中提取特征的技术，旨在从未标注的数据中自动学习有用的特征表示。</li><li><strong>背景</strong>：大多数数据是非结构化和未标记的，获取新标签缓慢且昂贵。因此，能够从未标记数据中提取特征以提高数据有限任务性能的算法非常有价值。</li><li><strong>方法</strong>：通过在辅助监督学习任务上训练神经网络来实现特征提取。例如，词向量模型（Word2Vec）是表示学习的一个经典应用，用于自然语言处理（NLP）任务。</li><li><strong>优势</strong>：相比于传统的无监督学习技术，表示学习提供了更灵活和强大的特征提取能力。</li></ul><h3 id="2-生成模型（Generative-Model）"><a href="#2-生成模型（Generative-Model）" class="headerlink" title="2. 生成模型（Generative Model）"></a><strong>2. 生成模型（Generative Model）</strong></h3><ul><li><strong>定义与目标</strong>：生成模型通过学习训练数据的分布模型来生成新的、原创的数据。它不仅关注数据的分类或预测，还关注数据的生成过程。</li></ul><p><strong>频率学派与贝叶斯学派</strong>：</p><ul><li><strong>频率学派</strong>：基于大样本理论，将概率看作频率的极限，强调通过样本信息推断总体参数。</li><li><strong>贝叶斯学派</strong>：认为未知量是随机的，用概率分布描述未知参数，强调先验信息与后验信息的结合。</li></ul><p><strong>生成模型 vs 判别模型</strong>：</p><ul><li><strong>判别模型</strong>：直接学习决策函数 Y&#x3D;f(X) 或条件概率分布 P(Y|X)。</li><li><strong>生成模型</strong>：学习联合概率密度分布 P(X,Y)，然后求出条件概率分布 P(Y|X)。</li></ul><p><strong>生成模型类型</strong>：</p><ul><li><strong>GAN（生成对抗网络）</strong>：通过生成器和判别器的对抗训练来生成数据。</li><li><strong>VAE（变分自动编码器）</strong>：结合了自编码器和隐变量模型的思想，通过变分推断学习数据分布。</li><li><strong>扩散模型（Diffusion Model）</strong>：包括前向扩散过程（逐渐添加高斯噪音直至变成随机噪音）和反向生成过程（从随机噪音开始逐渐去噪音直至生成图像）。</li></ul><h3 id="3-关键技术与工具"><a href="#3-关键技术与工具" class="headerlink" title="3. 关键技术与工具"></a><strong>3. 关键技术与工具</strong></h3><ul><li><strong>降维</strong>：减少描述数据的特征数量的过程，可以通过选择或提取实现，用于数据可视化、数据存储和繁重计算等场景。</li><li><strong>奇异值分解（SVD）</strong>：一种矩阵因子分解方法，用于数据降维和特征提取。</li><li><strong>KL散度</strong>：用于度量两个分布之间的差距，帮助优化生成模型。</li><li><strong>Word2Vec</strong>：通过上下文学习词向量，捕捉词的语义信息。</li></ul><h3 id="4-应用"><a href="#4-应用" class="headerlink" title="4. 应用"></a><strong>4. 应用</strong></h3><ul><li><strong>生成式人工智能（GAI）</strong>：通过学习训练数据的分布模型生成新的、原创的数据。</li><li><strong>人工智能生成内容（AIGC）</strong>：利用人工智能技术生成各种形式的内容，如文字、图像、音频和视频等。</li></ul><p>以上是对表示学习和生成式模型的主要内容的概括，涵盖了基本概念、理论基础、关键技术和具体应用。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><strong>自编码器与生成式建模</strong></p><p>•传统自编码器用于降维或特征学习</p><p>•自编码器与潜变量模型理论的联系使其成为生成式建模的重要工具</p><p><strong>什么是降维？</strong></p><p>•定义：减少描述数据的特征数量的过程</p><p>•方法：选择（保留部分现有特征）或提取（基于旧特征生成新特征）</p><p>•应用场景：数据可视化、数据存储、繁重计算等</p><p>•编码器与解码器的概念：编码器压缩数据，解码器解压缩数据，可能有信息损失</p><p><strong>奇异值分解（SVD）</strong></p><p>•定义：将任意m×n矩阵分解为三个矩阵相乘的形式</p><p>•结果：m阶正交矩阵、m×n矩形对角矩阵、n阶正交矩阵</p><p>•数据降维应用：保留较大特征值及其对应的特征向量，解释绝大部分信息</p><p><strong>表示学习（representation learning）</strong></p><p><strong>非结构化数据处理挑战</strong></p><p>•大量非结构化和未标记数据的存在</p><p>•标记数据获取缓慢且昂贵</p><p>•提取特征以提高数据有限任务性能的算法价值</p><p><strong>无监督学习中的特征提取</strong></p><p>•算法试图发现描述数据集”结构”的潜在特征</p><p>•示例：低秩奇异值分解（主成分分析）</p><p><strong>深度学习在特征提取中的应用</strong></p><p>•表示学习通过训练神经网络从未标记数据中提取特征</p><p>•word2vec作为表示学习的经典应用</p><p><strong>自然语言处理中的词向量模型</strong></p><p>•离散符号序列表示问题</p><p>•one-hot表示的问题：稀疏、正交、弱语义</p><p>•解决方案：学习将相似性编码到向量本身</p><p><strong>词的上下文表示</strong></p><p>•目标：包含语义信息并直接度量文本之间的语义相似度</p><p>•分布式表示思想：相似上下文中的词具有相似意义</p><p><strong>深度学习的优势</strong></p><p>•手工特征耗时耗力</p><p>•自动特征学习快速便捷</p><p>•提供通用学习框架，支持无监督和监督学习</p><p><strong>神经嵌入模型（Neural Embedding Models）</strong></p><p>•上下文建模及目标词关系建模</p><p>•Word2Vec模型：Skip-Gram和CBOW两种模型</p><p><strong>统计语言模型（Statistical Language Model）</strong></p><p>•计算句子概率模型</p><p>•n元模型简化条件概率估算</p><p><strong>Word2Vec细节</strong></p><p>•输入词one-hot编码</p><p>•隐藏层权重矩阵映射输入到稠密向量</p><p>•输出层softmax回归分类器</p><p><strong>训练过程</strong></p><p>•使用梯度下降最小化代价函数</p><p><strong>生成模型（generative model）</strong></p><p><strong>频率学派与贝叶斯学派</strong></p><p><strong>频率学派</strong></p><p>•基于大样本理论，将概率看作频率的极限</p><p>•强调数据重复抽样和统计量性质</p><p><strong>贝叶斯学派</strong></p><p>•未知量视为随机，用概率分布描述</p><p>•先验信息与后验信息结合</p><p><strong>生成模型与判别模型对比</strong></p><p>•判别模型：直接学习决策函数或条件概率分布</p><p>•生成模型：学习联合概率密度分布再求条件概率分布</p><p><strong>生成式人工智能（Generative Artificial Intelligence, GAI）</strong></p><p>•通过学习训练数据分布模型生成新数据</p><p>•AIGC具体应用：生成文字、图像、音频、视频等内容</p><p><strong>人造分布与真实分布</strong></p><p>•人脸、狗脸等服从特定概率分布</p><p>•利用神经网络拟合人造分布逼近真实分布</p><p><strong>关键问题</strong></p><p>1如何设计网络模型模拟客观分布</p><p>2如何度量两个分布差距</p><p><strong>KL散度</strong></p><p>•成为度量两个分布差距的工具</p><p><strong>隐变量模型</strong></p><p>•构造桥梁间接减小真实分布与模型分布差异</p><p><strong>具体生成模型</strong></p><p><strong>生成对抗网络（GAN）</strong></p><p>•包含生成器和判别器两部分</p><p><strong>变分自动编码器（VAE）</strong></p><p>•结合自编码器与变分推断的思想</p><p><strong>扩散模型（Diffusion Model）</strong></p><p>•包含前向扩散过程和反向生成过程</p><p>•前向扩散过程：逐渐添加高斯噪音直至变为随机噪音</p><p>•反向生成过程：从随机噪音开始逐渐去噪生成图像</p>]]></content>
    
    
    <categories>
      
      <category>前沿技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邹建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前沿技术第五章</title>
    <link href="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
    <url>/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="5-循环神经网络"><a href="#5-循环神经网络" class="headerlink" title="5.循环神经网络"></a>5.循环神经网络</h1><p><a href="./5.%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.pdf">5.循环神经网络.pdf</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>循环神经网络（RNN）总结</strong></p><p><strong>1. 问题介绍</strong></p><p>•如果输入单一词（如”beijing”），且无记忆特性，网络输出相同结果。</p><p>•若具备记忆功能，网络可根据前面的词调整输出，结果不同。</p><p><strong>2. 基本结构</strong></p><p><strong>•记忆单元</strong>：将网络输出保存在记忆单元中，与下一次输入联合进入网络。</p><p><strong>•输入顺序影响</strong>：输入序列的顺序会改变输出结果。</p><p><strong>•长序列处理</strong>：无论序列多长，均可逐次输入网络以得到最终结果。</p><p><strong>3. 扩展结构</strong></p><p><strong>•梯度问题</strong>：深度循环网络和双向RNN是其扩展形式。</p><p><strong>•长期依赖挑战</strong>：</p><p>◦梯度易消失（常见）或爆炸（少见但影响大）。</p><p><strong>4. 门控RNN</strong></p><p><strong>•LSTM（长短期记忆网络）</strong>：</p><p>◦包含遗忘门、输入门、细胞状态更新和输出门。</p><p>◦遗忘门决定丢弃哪些信息；输入门选择新信息存入细胞状态；细胞状态更新后生成输出。</p><p>◦可通过”窥视孔连接”让门层观察细胞状态。</p><p><strong>•GRU（门控递归单元）</strong>：</p><p>◦将遗忘门和输入门合并为更新门，简化模型结构。</p><p>◦参数减少约1&#x2F;3，效果接近LSTM，不易过拟合。</p><p><strong>5. 存在问题</strong></p><p><strong>•遗忘性</strong>：RNN对近期信息预测表现较好，但难以处理长时依赖问题。</p><p><strong>6. 应用</strong></p><p><strong>•序列向量操作</strong>：</p><p>◦图像分类、图像描述生成、情感分析、机器翻译、视频分类等。</p><p><strong>•生成模型</strong>：</p><p>◦自编码器用于降维或特征学习，变分自编码器（VAE）和生成对抗网络（GAN）推动生成式建模发展。</p><p><strong>7. 核心要点</strong></p><p>•RNN通过记忆单元实现序列数据处理，但存在梯度消失或爆炸的问题。</p><p>•LSTM和GRU通过门机制解决长期依赖问题，提升性能。</p><p>•广泛应用于自然语言处理、图像处理等领域。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><strong>循环神经网络（RNN）</strong></p><p>•RNN的核心在于通过记忆单元实现对序列数据的处理。</p><p>•解决了传统神经网络无法记忆的问题。</p><p><strong>1. 问题介绍</strong></p><p>•如果没有记忆特性，输入相同部分时输出结果一致。</p><p>•引入记忆后，前序信息会影响后续输出结果。</p><p><strong>2. 基本结构</strong></p><p><strong>输入与记忆单元</strong></p><p>•网络将输出保存在记忆单元中。</p><p>•下一次输入时，联合当前输入和记忆单元作为新输入。</p><p><strong>输出机制</strong></p><p>•网络不仅输出结果，还会更新记忆单元。</p><p>•输入序列顺序影响最终输出结果。</p><p>•可以处理任意长度的序列数据。</p><p><strong>3. 存在的问题</strong></p><p><strong>记忆的遗忘性</strong></p><p>•对近期信息预测效果较好，但对长时依赖问题表现不佳。</p><p><strong>梯度消失或爆炸</strong></p><p>•深度循环网络中梯度经过多阶段传播后易消失或爆炸。</p><p><strong>4. 改进模型：门控RNN</strong></p><p><strong>长短期记忆（LSTM）</strong></p><p>•LSTM通过”门”控制信息的选择式通过。</p><p><strong>Step-by-Step</strong></p><p><strong>1遗忘门</strong>：决定从细胞状态中丢弃哪些信息。</p><p><strong>2输入门</strong>：确定新信息存入细胞状态的部分。</p><p><strong>3更新细胞状态</strong>：基于遗忘和输入操作更新细胞状态。</p><p><strong>4输出门</strong>：根据细胞状态确定输出部分。</p><p>•添加”窥视孔连接”优化门层观察细胞状态的能力。</p><p>•耦合遗忘门和输入门以简化决策过程。</p><p><strong>门控循环单元（GRU）</strong></p><p>•将遗忘门和输入门合并为更新门。</p><p>•混合细胞状态和隐藏状态，减少参数数量约1&#x2F;3。</p><p>•效果与LSTM相当，但更简单且不易过拟合。</p><p><strong>5. 应用</strong></p><p><strong>向量序列操作</strong></p><p>1图像分类</p><p>2图像描述生成</p><p>3情感分析</p><p>4机器翻译</p><p>5视频分类</p><p><strong>6. 扩展模型</strong></p><p><strong>自编码器相关</strong></p><p>•传统自编码器用于降维或特征学习。</p><p>•变分自动编码器（VAE）结合潜变量模型理论用于生成式建模。</p><p><strong>对抗模型</strong></p><p>•生成对抗网络（GAN）用于生成模型。</p><p>•对抗模型通过竞争机制提升生成质量。</p>]]></content>
    
    
    <categories>
      
      <category>前沿技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邹建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前沿技术第四章</title>
    <link href="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
    <url>/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="4-卷积神经网络"><a href="#4-卷积神经网络" class="headerlink" title="4.卷积神经网络"></a>4.卷积神经网络</h1><p><a href="./4.%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.pdf">4.卷积神经网络.pdf</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>总结概括</strong></p><p><strong>1. 卷积神经网络（CNN）简介</strong></p><p>卷积神经网络是一种特殊的神经网络，其核心在于使用卷积运算替代一般的矩阵乘法运算。它的主要目标是解决计算机视觉中的图像识别问题。与人类轻松识别图像不同，机器在处理视角变换、光照条件、背景干扰和物体变形等问题时面临巨大挑战。</p><p><strong>2. 动机与传统方法的不足</strong></p><p>•在CNN流行之前，图像处理依赖于提取边缘、纹理、线条等特征的传统方法，这些方法效率低且准确率不高。</p><p>•随着机器学习的发展，尤其是数据驱动算法的应用，CNN使得某些图像集上的机器识别准确率超过了人类。</p><p><strong>3. 卷积层的核心概念</strong></p><p><strong>•滤波器</strong>：由可学习的滤波器集合构成，滤波器尺寸通常较小（如5x5x3或3x3x3），深度与输入数据一致。</p><p><strong>•卷积操作</strong>：滤波器在输入数据上滑动，计算内积生成激活图，表示对特定视觉特征（如边界、颜色、轮廓）的反应。</p><p><strong>•输出结构</strong>：多个滤波器形成多张二维激活图，按深度方向堆叠构成卷积层输出。</p><p><strong>•局部连接与参数共享</strong>：</p><p>◦局部连接：利用图片特征的局部性，通过感受野提取特征。</p><p>◦参数共享：同一滤波器在不同位置共享参数，减少计算量。</p><p><strong>•空间排列</strong>：卷积层的输出深度由滤波器数量决定，滑动步长和边界填充为超参数。</p><p><strong>4. 池化层的作用</strong></p><p>池化层（如最大池化）通过降采样减少数据维度，保留重要特征并降低过拟合风险。</p><p><strong>5. 经典CNN模型</strong></p><p><strong>•VGGNet</strong>：</p><p>◦2014年由牛津大学和Google DeepMind提出，取得ILSVRC2014比赛分类第二名和定位第一名。</p><p>◦探索了网络深度与性能的关系，成功构建16~19层深的网络，错误率显著下降，泛化性强。</p><p><strong>•其他模型</strong>：</p><p>◦Inception module：通过多尺度卷积提升性能。</p><p>◦ResNet architecture：引入残差学习解决深层网络训练问题。</p><p>◦应用场景包括图像分类、目标定位、语义分割和风格迁移等。</p><p><strong>6. 总结</strong></p><p>卷积神经网络通过卷积层和池化层等结构，有效解决了图像识别中的复杂问题。经典模型如VGGNet、Inception和ResNet进一步推动了深度学习在计算机视觉领域的应用和发展。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><strong>卷积神经网络概述</strong></p><p>•动机：图像识别任务的挑战</p><p>◦人类对图片识别的轻松性与机器面临的困难对比</p><p>◦视角变换、光照条件、背景干扰和物体变形等问题的影响</p><p>◦计算机在图像识别中准确率低的原因</p><p>•数据驱动算法的核心</p><p>◦图像分类无法通过简单规则实现</p><p>◦需要通过学习算法让机器自动学习特征进行分类</p><p>◦算法依赖于数据集</p><p><strong>传统方法与卷积神经网络的对比</strong></p><p>•传统图像处理方法</p><p>◦提取边缘、纹理、线条等特征</p><p>◦效率低且准确率不高</p><p>•卷积神经网络的优势</p><p>◦在某些图像集上机器识别准确率超过人类</p><p>◦卷积神经网络的作用及其重要性</p><p><strong>卷积（Convolution）</strong></p><p><strong>卷积层参数</strong></p><p>•滤波器集合构成卷积层参数</p><p>◦尺寸示例：5x5x3 或 3x3x3</p><p>◦宽度、高度可定义，深度需与输入一致</p><p>•前向传播过程</p><p>◦滑动滤波器计算内积生成激活图</p><p>◦激活图表示原图片对滤波器的反应</p><p>•特征学习</p><p>◦学习边界、颜色、轮廓等视觉特征</p><p>◦更高层可能学习复杂图案如蜂巢状或车轮状</p><p><strong>卷积层特性</strong></p><p><strong>局部连接</strong></p><p>•利用图片特征的局部性提取特征</p><p>•神经元感受野大小为滤波器宽高</p><p><strong>空间排列</strong></p><p>•输出深度由滤波器数量决定</p><p>•滑动滤波器时需指定步长</p><p>•边界填充作为超参数</p><p><strong>稀疏连接与参数共享</strong></p><p>•神经元仅与前一层部分神经元相关联</p><p>•参数共享减少模型复杂度</p><p><strong>池化（Pooling）</strong></p><p>•最大池化层示例 (2x2 池化核, 滑动 2, 无填充)</p><p>•池化作用：降维、保留关键信息</p><p><strong>CNN经典模型</strong></p><p><strong>VGGNet</strong></p><p>•开发背景与成就</p><p>◦2014年提出，ILSVRC2014比赛分类项目第二名、定位项目第一名</p><p>•探索深度与性能关系</p><p>◦构建16~19层深的卷积神经网络</p><p>◦错误率下降，泛化性好</p><p><strong>其他模型</strong></p><p>•Inception module</p><p>•Residual learning ResNet architecture</p><p>•Semantic segmentation</p><p>•Image classification Object localization</p><p>•Transferring style for image repainting</p><p><strong>实现案例</strong></p><p>•Pytorch实现LeNet</p>]]></content>
    
    
    <categories>
      
      <category>前沿技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邹建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前沿技术第三章</title>
    <link href="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <url>/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="3-神经网络优化和其他"><a href="#3-神经网络优化和其他" class="headerlink" title="3.神经网络优化和其他"></a>3.神经网络优化和其他</h1><p><a href="./3.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96%E5%92%8C%E5%85%B6%E4%BB%96.pdf">3.神经网络优化和其他.pdf</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>总结概括</strong></p><p><strong>1. 常用激活函数</strong></p><p><strong>•Sigmoid缺点</strong>：</p><p>◦易导致梯度消失：在靠近0和1的两端，梯度接近0，影响参数更新。</p><p>◦初始化权重需谨慎：若初始化权重过大，会导致神经元饱和，无法更新参数。</p><p><strong>•ReLU优缺点</strong>（未详细提及，但作为对比）：</p><p>◦优点：缓解梯度消失问题。</p><p>◦缺点：可能造成神经元死亡。</p><p><strong>2. 常用损失函数</strong></p><p><strong>•回归问题</strong>：</p><p><strong>◦MSE（均方误差）</strong>：</p><p>▪优点：连续光滑，方便求导。</p><p>▪缺点：易导致梯度爆炸。</p><p><strong>◦MAE（平均绝对误差）</strong>：</p><p>▪优点：梯度稳定，不易爆炸。</p><p>▪缺点：不光滑，不便求导。</p><p><strong>◦Smooth L1 Loss</strong>：</p><p>▪特点：对离群点更鲁棒，梯度变化小。</p><p><strong>•分类问题</strong>：</p><p><strong>◦0-1损失函数</strong>：</p><p>▪不考虑误差程度，仅判断是否预测正确。</p><p><strong>◦交叉熵损失函数</strong>：</p><p>▪应用广泛，描述模型与理想模型的距离。</p><p><strong>◦Softmax Loss</strong>：</p><p>▪适用于多分类问题。</p><p><strong>◦Logistic Loss</strong>：</p><p>▪用于二分类问题。</p><p><strong>3. 深度模型优化方法</strong></p><p><strong>•随机梯度下降（SGD）</strong>：</p><p>◦每次使用一批数据计算梯度，避免全量数据计算的高成本。</p><p>◦优点：减少计算量，增加随机性，易于跳出局部极小点。</p><p><strong>•动量法（Momentum）</strong>：</p><p>◦增加动量帮助跳出鞍点或局部极小点。</p><p>◦参数更新基于当前梯度和历史梯度。</p><p><strong>•AdaGrad</strong>：</p><p>◦根据累积平方梯度调整学习率，平缓方向进步更大。</p><p><strong>•RMSProp</strong>：</p><p>◦改进AdaGrad，引入衰减率，避免学习率过快递减。</p><p><strong>•Adam</strong>：</p><p>◦结合RMSProp和Momentum，目前流行且高效。</p><p><strong>4. 数据处理与训练技巧</strong></p><p><strong>•数据预处理</strong>：</p><p><strong>◦中心化</strong>：每个特征维度减去均值，使数据变为0均值。</p><p><strong>◦标准化</strong>：调整不同特征维度的规模，常用方法包括除以标准差或缩放到[-1, 1]。</p><p><strong>•权重初始化</strong>：</p><p><strong>◦全0初始化</strong>：不可取，导致权重失去不对称性。</p><p><strong>◦随机初始化</strong>：打破对称性，但需注意初始化范围，避免梯度过小。</p><p><strong>•批标准化（Batch Normalization）</strong>：</p><p>◦标准化过程可微，减少不合理初始化问题，加快收敛速度。</p><p><strong>•防止过拟合</strong>：</p><p><strong>◦Dropout</strong>：依概率P保留神经元，简单有效，广泛应用于深度学习。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><strong>联结主义（神经网络）大纲</strong></p><p><strong>一、常用的激活函数</strong></p><p>•Sigmoid缺点</p><p>◦造成梯度消失</p><p>▪在靠近1和0的两端时，梯度接近0</p><p>▪导致模型不收敛</p><p>▪初始化权重需非常小心，否则多数神经元会饱和</p><p>•ReLU优缺点</p><p>◦未详细列出，需补充具体优缺点内容</p><p>•其他激活函数</p><p>◦需补充具体内容</p><p><strong>二、常用的损失函数</strong></p><p><strong>（一）回归问题</strong></p><p>1MSE均方误差</p><p>◦定义与公式</p><p>◦优点：连续光滑，方便求导</p><p>◦缺点：可能导致梯度爆炸</p><p>2平均绝对误差（MAE）</p><p>◦定义与公式</p><p>◦优点：稳定梯度，不会导致梯度爆炸</p><p>◦缺点：在中心点不可求导</p><p>3Smooth L1 Loss</p><p>◦定义与公式</p><p>◦优点：对离群点更鲁棒，梯度变化小</p><p>◦缺点：未明确提及</p><p><strong>（二）分类问题</strong></p><p>10-1损失函数</p><p>◦定义与公式</p><p>◦特点：实际应用较少，主要用于衡量其他损失函数效果</p><p>2绝对值损失函数</p><p>◦内容未明确提及</p><p>3交叉熵损失函数</p><p>◦重要性与应用范围</p><p>◦不同标签定义下的Loss表达式</p><p>4Softmax Loss</p><p>◦多分类问题中的应用</p><p>5Logistic Loss</p><p>◦内容未明确提及</p><p><strong>三、深度模型中的优化</strong></p><p><strong>（一）优化目标</strong></p><p>•寻找参数θ以降低代价函数J(θ)</p><p>•包括训练集性能评估与正则化项</p><p><strong>（二）优化方法</strong></p><p>1批量算法</p><p>2随机梯度下降（SGD）</p><p>◦动机与实现方式</p><p>◦小批量随机采样重要性</p><p>◦学习率选择策略</p><p>3梯度下降法变式</p><p>◦SGD特点</p><p>◦Momentum</p><p>▪核心概念与作用</p><p>▪动量计算方法</p><p>◦AdaGrad</p><p>▪算法机制与优势</p><p>◦RMSProp</p><p>▪改进点与衰减率</p><p>◦Adam</p><p>▪RMSProp+Momentum结合</p><p><strong>（三）优化器选择</strong></p><p>•当前主流优化算法</p><p>•选择依据：使用者对算法熟悉程度及超参数调节能力</p><p><strong>四、数据处理和训练技巧</strong></p><p><strong>（一）数据预处理</strong></p><p>1中心化</p><p>◦方法：每个特征维度减去相应均值</p><p>◦应用场景：图像数据等</p><p>2标准化</p><p>◦方法：除以标准差或缩放到[-1,1]区间</p><p>◦目的：使不同特征维度处于相同规模</p><p><strong>（二）权重初始化</strong></p><p>1全0初始化</p><p>◦缺点：破坏神经元独立性</p><p>2随机初始化</p><p>◦方法：高斯随机化、均匀随机化</p><p>◦注意事项：避免初始化过小导致梯度流信号减弱</p><p><strong>（三）批标准化（Batch Normalization）</strong></p><p>•核心思想：将标准化过程应用于神经网络每一层</p><p>•优点：增强对不良初始化的鲁棒性，加快收敛速度</p><p><strong>（四）防止过拟合</strong></p><p>1Dropout</p><p>◦核心思想：依概率P保留神经元</p><p>◦实现方式：每次训练时部分神经元被设置为0</p><p><a href="https://www.notion.so/3-20d925f269ce81bebc87fc20071c5eeb?pvs=21">3.神经网络优化和其他</a></p>]]></content>
    
    
    <categories>
      
      <category>前沿技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邹建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前沿技术第二章</title>
    <link href="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="2-神经网络"><a href="#2-神经网络" class="headerlink" title="2.神经网络"></a>2.神经网络</h1><p><a href="./2.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.pdf">2.神经网络.pdf</a></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><strong>总结：联结主义（神经网络）</strong></p><p><strong>1. 机器学习定义</strong></p><p>机器学习是一门研究如何通过经验自动改进计算机算法性能的科学。具体定义包括：</p><p>•改善算法在特定任务中的性能。</p><p>•使用数据或经验优化程序性能标准。</p><p>•Tom Michael Mitchell 提出的定义：程序从经验 E 中学习，针对任务 T 和性能度量 P，随着经验增加，性能逐步提升。</p><p><strong>2. 机器学习的应用</strong></p><p>机器学习的核心目标是找到一个函数来完成任务，如语音识别、图像识别、下围棋和对话系统等。</p><p><strong>3. 神经元与自然计算机制</strong></p><p>•神经元是生物大脑的基本单位，负责接收输入、处理并输出信号。</p><p>•生物神经元的特点：需要达到一定阈值才能触发输出，抑制微弱信号。</p><p>•激活函数（Activation Function）模拟了这一特性，常用的是 S 型函数。</p><p><strong>4. 人工神经元</strong></p><p>•人工神经元通过加权求和的方式整合多个输入，并通过激活函数生成输出。</p><p>•多个神经元可以连接形成网络，完成更复杂的计算任务。</p><p><strong>5. 神经网络模型</strong></p><p>•神经网络由多层神经元组成，每层神经元与上下层相连。</p><p>•学习过程主要通过调整节点之间的连接权重实现。</p><p>•权重更新基于误差反向传播（Backpropagation），将输出误差分配到各层节点。</p><p><strong>6. 矩阵乘法的应用</strong></p><p>•矩阵乘法简化了神经网络中大量计算的过程。</p><p>•输入信号通过权重矩阵传递到下一层，激活函数应用于每个节点。</p><p><strong>7. 梯度下降与权重更新</strong></p><p>•梯度下降用于优化权重，通过链式法则计算误差函数关于权重的梯度。</p><p>•权重更新公式结合学习率和梯度值，逐步逼近最优解。</p><p><strong>8. 多层网络与反向传播</strong></p><p>•对于多层网络，误差从输出层逐层向前传播，更新每一层的权重。</p><p>•隐藏层节点的误差通过其对输出层的贡献计算得出。</p><p><strong>9. 构建神经网络</strong></p><p>•手动构建神经网络涉及定义网络结构、初始化权重、前向传播、误差计算和反向传播。</p><p>•现代机器学习库（如 TensorFlow、PyTorch）提供了便捷的 Linear 层调用方法，简化了神经网络的构建过程。</p><p><strong>核心要点</strong></p><p>•机器学习的目标是找到一个函数解决特定问题。</p><p>•神经网络通过模拟生物神经元的工作机制实现复杂任务。</p><p>•权重调整和误差反向传播是神经网络学习的核心。</p><p>•矩阵乘法和梯度下降技术显著提升了神经网络的效率和可扩展性。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><strong>联结主义（神经网络）大纲</strong></p><p><strong>一、机器学习先导</strong></p><p>•机器学习的定义</p><p>◦人工智能科学：通过经验学习改善算法性能</p><p>◦计算机算法研究：自动改进的能力</p><p>◦数据或经验优化程序性能标准</p><p>•英文定义解析</p><p>◦程序从经验E中学习，针对任务T和性能度量P，性能随经验提升</p><p><strong>二、机器学习登场</strong></p><p>•语音识别示例</p><p>◦大量语音数据用于编写学习程序</p><p>•图像识别示例</p><p>◦大量图像数据用于编写学习程序</p><p>•机器学习的核心目标</p><p>◦寻找一个函数以解决特定任务</p><p><strong>三、机器学习框架</strong></p><p><strong>（一）监督学习</strong></p><p>•框架结构</p><p>◦函数集合</p><p>◦训练数据</p><p>◦函数优劣评估</p><p>•步骤详解</p><p>1定义函数集合</p><p>2评估函数优劣</p><p>3选择最佳函数</p><p>•示例流程</p><p>◦输入与输出映射关系</p><p><strong>（二）不同类型的任务</strong></p><p>•监督学习</p><p>◦回归分析</p><p>▪线性模型</p><p>▪非线性模型</p><p>◦分类任务</p><p>▪SVM、决策树、KNN等方法</p><p>•半监督学习</p><p>•迁移学习</p><p>•无监督学习</p><p>•强化学习</p><p>•深度学习</p><p><strong>四、神经元与自然计算机制</strong></p><p><strong>（一）生物神经元的工作原理</strong></p><p>•输入、处理与输出</p><p>◦输入信号通过树突进入</p><p>◦电信号沿轴突传输</p><p>◦输出信号由末梢传递</p><p>•动物大脑的特点</p><p>◦并行处理能力</p><p>◦模糊性作为功能的一部分</p><p><strong>（二）激活函数</strong></p><p>•生物神经元的非线性特性</p><p>◦不是简单的输入输出线性关系</p><p>◦存在阈值机制</p><p>•数学表示</p><p>◦阶跃函数</p><p>◦S型函数</p><p>▪更平滑、更自然的激活方式</p><p><strong>（三）人工神经元</strong></p><p>•多个输入的处理</p><p>◦输入加权求和</p><p>◦总和作为S型函数输入</p><p>•输出控制</p><p>◦低于阈值时抑制输出</p><p>◦达到阈值时激发输出</p><p><strong>五、神经网络的构建</strong></p><p><strong>（一）几个神经元的连接</strong></p><p>•复杂计算能力</p><p>◦树突收集信号并合并</p><p>◦达到阈值时触发输出</p><p>•网络结构</p><p>◦神经元层的概念</p><p>◦层间全连接</p><p><strong>（二）人工模型</strong></p><p>•参数调整</p><p>◦调整节点间的连接强度</p><p>◦权重优化</p><p>•矩阵乘法的应用</p><p>◦压缩计算过程</p><p>◦提高计算效率</p><p><strong>六、权重学习与误差反向传播</strong></p><p><strong>（一）权重学习</strong></p><p>•单节点权重调整</p><p>◦使用误差指导改进</p><p>•多节点权重更新</p><p>◦平均分配误差</p><p>◦按贡献比例分配误差</p><p><strong>（二）误差反向传播</strong></p><p>•多输出节点的情况</p><p>◦错误按权重比例分配</p><p>•多层网络中的应用</p><p>◦逐层反向传播误差</p><p>◦隐藏层误差计算方法</p><p><strong>七、梯度下降与权重更新</strong></p><p>•梯度下降原理</p><p>◦解出误差函数关于权重的梯度</p><p>◦链式法则的应用</p><p>•权重更新实例</p><p>◦实际操作步骤</p><p><a href="https://www.notion.so/2-20d925f269ce80b1bc26fbc5de50a490?pvs=21">2.神经网络</a></p>]]></content>
    
    
    <categories>
      
      <category>前沿技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邹建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前沿技术第一章</title>
    <link href="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-人工智能简介"><a href="#1-人工智能简介" class="headerlink" title="1.人工智能简介"></a>1.人工智能简介</h1><p><a href="./1.%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%80%E4%BB%8B.pdf">1.人工智能简介.pdf</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>人工智能简介总结</strong></p><p><strong>1定义与起源</strong></p><p>◦人工智能（AI）没有统一定义，但其核心是模拟和扩展人类智能。</p><p>◦1956年达特茅斯会议首次提出AI定义：让机器像人一样行动并具备智能。</p><p>◦学术观点包括：</p><p>▪Nils J. Nilsson：AI是关于知识的学科，研究如何表示、获取和使用知识。</p><p>▪Patrick Winston：AI是使计算机完成过去只有人类才能完成的智能任务。</p><p><strong>2发展与应用</strong></p><p>◦经过半个世纪发展，AI已从简单的人类智能模拟转向研究智能活动规律，构建智能系统或硬件。</p><p>◦应用领域广泛，包括图像识别、语音识别、语义识别、人机对话、自动驾驶等。</p><p>◦关键技术包括语音识别、图像识别、自然语言处理、机器学习等。</p><p><strong>3三要素：数据、算力、算法</strong></p><p><strong>◦数据</strong>：海量数据为AI提供燃料，训练模型需要百万级甚至更多数据量。数据隐私化和私域化成为趋势。</p><p><strong>◦算力</strong>：AI芯片（如GPU、NPU）大幅提升运算能力，加速深度学习训练。量子计算可能带来计算能力的新突破。</p><p><strong>◦算法</strong>：深度学习突破传统浅层算法瓶颈，自动化机器学习（AutoML）、联邦学习、因果学习等成为研究热点。</p><p><strong>4未来趋势</strong></p><p>◦数据驱动：数据量以指数形式增长，推动虚拟世界扩张。</p><p>◦算法融合：多学派方法融合发展，追求可解释性AI（XAI）。</p><p>◦技术创新：无监督预训练、神经网络结构优化等方向持续演进。</p><p><strong>5资源与社区</strong></p><p><strong>◦开源框架</strong>：PyTorch、TensorFlow、scikit-learn等提供强大工具支持。</p><p><strong>◦预训练模型</strong>：GloVe、BERT、FastText等助力快速开发。</p><p><strong>◦数据集</strong>：ImageNet、CoCo、GLUE等为研究提供丰富素材。</p><p><strong>◦学术资源</strong>：国际顶级期刊（如JMLR、IEEE TPAMI）和会议（如ICML、NeurIPS）推动AI理论与实践进步。</p><p><strong>6代表性学者</strong></p><p>◦国际：Michael I. Jordan、Yann LeCun、Geoffrey Hinton等。</p><p>◦国内：张钹、周志华、李航等。</p><p><strong>总结</strong>：人工智能通过数据、算力和算法的结合，不断拓展人类智能边界，其应用已渗透到多个领域，未来将更加注重可解释性、隐私保护和跨学科融合。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p>人工智能概述<br>•    2022年，ChatGPT的发布引发了AI热潮。<br>•    人工智能并未有统一定义。<br>•    达特茅斯会议（1956）首次提出人工智能定义：机器模仿人类智能。<br>•    经过半个世纪发展，AI成为研究人类智能活动规律并构建智能系统的边缘学科。<br>1.1 人工智能的定义<br>•    Nils J. Nilsson观点：人工智能是关于知识的学科。<br>•    Patrick Winston观点：人工智能研究如何使计算机完成过去只有人类才能做的智能工作。<br>•    经典定义：智能主体可以理解数据及从中学习，并利用知识实现特定目标和任务的能力。<br>1.2 人工智能的学派<br>•    主要学派：符号主义及联结主义。<br>•    不同时代、学科背景的人对智慧的理解及其实现方法不同。<br>1.3 人工智能的应用<br>•    图像识别准确度大幅提升，商业化应用场景广泛。<br>•    语音识别技术突破为人机语音交互奠定基础。<br>•    语义识别技术进步实现多轮对话，开放域聊天仍面临挑战。<br>1.4 未来趋势<br>数据量<br>•    海量数据为AI发展提供燃料。<br>•    数据集丰富性和大规模性对算法训练至关重要。<br>•    数据隐私化、私域化趋势明显。<br>运算力<br>•    AI芯片提升运算效率，加速深度神经网络训练。<br>•    GPU在处理海量数据方面具有压倒性优势。<br>•    计算能力进步受限时，量子计算提供新思路。<br>算法<br>•    深度学习突破算法瓶颈，2006年Geoffrey Hinton提出”Deep Learning”概念。<br>•    机器学习自动化(AutoML)发展，追求自动化构建和使用。<br>•    分布式隐私保护方向演进，联邦学习保护输入数据。<br>•    数据和机理融合，追求实践效果与简洁表达。<br>•    神经网络模型结构沿模块化+层次化方向发展。<br>•    多学派方法融合发展，互补算法优缺点。<br>•    基于大规模无(自)监督预训练发展，利用无标签数据。<br>•    基于因果学习方法发展，构建可解释性AI。<br>1.5 其他资源<br>网络教学信息<br>•    斯坦福课程：<a href="http://v.163.com/special/opencourse/machinelearning.html">http://v.163.com/special/opencourse/machinelearning.html</a><br>•    CMU课程及相关视频链接<br>相关学术文章<br>•    COLT、ICML、CV、NIPS、JMLR等年度官网及期刊<br>相关学术期刊和会议<br>机器学习<br>•    学术会议：NIPS、ICML、ECML、COLT<br>•    学术期刊：《Machine Learning》、《Journal of Machine Learning Research》<br>数据挖掘<br>•    学术会议：SIGKDD、ICDM、SDM、PKDD、PAKDD<br>•    学术期刊：《Data Mining and Knowledge Discovery》、《IEEE Transactions on Knowledge and Data Engineering》<br>人工智能<br>•    学术会议：IJCAI、AAAI<br>•    学术期刊：《Artificial Intelligence》、《Journal of Artificial Intelligence Research》<br>数据库<br>•    学术会议：SIGMOD、VLDB、ICDE<br>•    其他顶级期刊如《IEEE Transactions on Pattern Analysis and Machine Intelligence》、《Neural Computation》<br>国内外研究者<br>国际代表性学者<br>•    Michael I. Jordan、Yann Lecun、Geoffrey E. Hinton等<br>国内知名学者<br>•    张钹、周志华、李航等<br>开源资源<br>开源代码<br>•    Pytorch、Tensorflow、scikit-learn等深度学习框架和工具库<br>预训练模型<br>•    Glove、FastText、ELMo、BERT等自然语言处理模型<br>数据集<br>•    ImageNet、CoCo、PASCAL VOC等计算机视觉数据集<br>•    GLUE、WikiText、SQuAD等自然语言处理数据集</p><p><a href="https://www.notion.so/1-20d925f269ce81ac84beddac2f983008?pvs=21">1.人工智能简介</a></p>]]></content>
    
    
    <categories>
      
      <category>前沿技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邹建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前沿技术部分知识点</title>
    <link href="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id><a href="#" class="headerlink" title></a></h3><p><strong>都是PPT上的原话，概念的东西，不全，也不知道考不考</strong></p><h1 id="1-人工智能的定义（无官方统一定义）"><a href="#1-人工智能的定义（无官方统一定义）" class="headerlink" title="1.人工智能的定义（无官方统一定义）"></a>1.人工智能的定义（无官方统一定义）</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">1.1956</span>年的达特茅斯会议首次提出人工智能的定义：使一部机器的反应方式像一个人在行动时所依据的智能。<br><span class="hljs-number">2</span>.人工智能是关于知识的学科——怎样表示知识以及怎样获得知识并使用知识的学科。  <span class="hljs-comment">--Nils J. Nilsson（Stanford）</span><br><span class="hljs-number">3</span>.人工智能就是研究如何使计算机去做过去只有人才能做的智能工作。 <span class="hljs-comment">--Patrick Winston（MIT）</span><br></code></pre></td></tr></table></figure><h1 id="2-AI研究目的"><a href="#2-AI研究目的" class="headerlink" title="2.AI研究目的"></a>2.AI研究目的</h1><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><p>•人工智能研究目的是通过探索智慧的实质，扩展人类智能——促使智能主体会听（语音识别、机器翻译等）、会看（图像识别、文字识别等）、会说（语音合成、人机对话等）、会思考（人机对弈、专家系统等）、会学习（知识表示，机器学习等）、会行动（机器人、自动驾驶汽车等）。</p><h1 id="3-AI学派"><a href="#3-AI学派" class="headerlink" title="3.AI学派"></a>3.AI学派</h1><h3 id="-2"><a href="#-2" class="headerlink" title></a></h3><p><em><strong>联结主义，符号主义（两大主要主义）</strong></em>，行为主义</p><ul><li><p>联结主义：利用数学模型来研究人类认识的方法，用神经元的连接机制实现人工智能</p><ul><li>代表方法：神经网络，SVM</li></ul></li><li><p>符号主义：认知是通过对有意义的表示符号进行推导计算，并将学习视为逆向演绎，主张用显式的公理和逻辑体系搭建人工智能系统</p><ul><li>代表方法：专家系统，知识图谱</li></ul></li><li><p>行为主义：以控制论及感知-动作型控制系统原理模拟行为以复现人类智能</p><ul><li>代表方法：强化学习</li></ul></li></ul><h1 id="4-人工智能三要素"><a href="#4-人工智能三要素" class="headerlink" title="4.人工智能三要素"></a>4.人工智能三要素</h1><h4 id="数据，算力，算法"><a href="#数据，算力，算法" class="headerlink" title="数据，算力，算法"></a><strong>数据，算力，算法</strong></h4><h1 id="5-算法"><a href="#5-算法" class="headerlink" title="5.算法"></a>5.算法</h1><ul><li>传统机器学习算法：BP算法，SVM（支持向量机），Boosting，Logistic Regression</li></ul><ul><li>深度学习：MLP,CNN,RNN,LSTM</li></ul><h1 id="6-机器学习定义"><a href="#6-机器学习定义" class="headerlink" title="6.机器学习定义"></a>6.机器学习定义</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1.机器学习是一门人工智能的科学，该领域的主要研究对象是人工智能，特别是如何在经验学习中改善具体算法的性能。<br>2.机器学习是对能通过经验自动改进的计算机算法的研究。 <br>3.机器学习是用数据或以往的经验，以此优化计算机程序的性能标准。 <br><br></code></pre></td></tr></table></figure><h1 id="7-机器学习类型"><a href="#7-机器学习类型" class="headerlink" title="7.机器学习类型"></a>7.机器学习类型</h1><ul><li>监督</li><li>无监督</li><li>半监督</li><li>强化</li></ul><h1 id="8-常用激活函数"><a href="#8-常用激活函数" class="headerlink" title="8.常用激活函数"></a>8.常用激活函数</h1><ul><li>Sigmoid <img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609182345571.png" class title="image-20250609182345571"></li></ul><img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609182254562.png" class title="image-20250609182254562"><p>​缺点：1.会造成梯度消失；2.输出不以0为中心（总是正值）可能导致下一层神经元的权重梯度方向单一，从而减缓训练收敛</p><ul><li><p>Tanh<img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609182656022.png" class title="image-20250609182656022"></p><img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609182647723.png" class title="image-20250609182647723"><p>缺点：梯度消失</p></li><li><p>ReLU   <img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609182810635.png" class title="image-20250609182810635"></p><img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609182745552.png" class title="image-20250609182745552"></li></ul><p>​1.优点：①极大地加速随机梯度下降法的收敛速度，并且因为是线性的，所有没有   梯度消失的问题</p><p>​②计算方法更简单</p><p>​2.缺点：当神经元输入为负导致其梯度持续为0时，该神经元将停止更新并“死亡”，这可以通过使用较小的学习率来缓解。</p><ul><li><p>ELU(不重要)</p><img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609183154429.png" class title="image-20250609183154429"></li><li><p>Leaky ReLU(不重要)</p><img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609183231240.png" class title="image-20250609183231240"></li></ul><h1 id="9-损失函数"><a href="#9-损失函数" class="headerlink" title="9.损失函数"></a>9.损失函数</h1><h4 id="①回归问题"><a href="#①回归问题" class="headerlink" title="①回归问题"></a>①回归问题</h4><ul><li><p>MSE均方误差</p><img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609183522586.png" class title="image-20250609183522586"><p>优点：各点连续光滑，方便求导，具有稳定的解</p><p>缺点：不稳健，输入值距中心点较远时，用梯度下降法求解梯度会很大，可能梯度爆炸</p></li><li><p>平均绝对误差<img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609183720703.png" class title="image-20250609183720703"></p><p>   优点：任何输入都有稳定梯度，不会梯度爆炸，有稳定的解</p><p>​    缺点：中心点是折点，无法求导</p></li><li><p>smooth L1 loss</p><img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609183844027.png" class title="image-20250609183844027"></li></ul><h4 id="②分类问题"><a href="#②分类问题" class="headerlink" title="②分类问题"></a>②分类问题</h4><ul><li><p>0-1损失函数</p><img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609190133272.png" class title="image-20250609190133272"></li><li><p>绝对值损失函数</p></li></ul><p>​<img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609190141359.png" class title="image-20250609190141359"></p><ul><li>交叉熵损失函数</li></ul><p>​<img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609190247242.png" class title="image-20250609190247242"></p><ul><li><p>其他、</p><p>​                       <img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609190318081.png" class title="image-20250609190318081"></p></li></ul><h1 id="10-深度模型优化"><a href="#10-深度模型优化" class="headerlink" title="10.深度模型优化"></a>10.深度模型优化</h1><ul><li>经验风险最小化</li><li>批量算法</li><li>随机梯度下降</li></ul><h1 id="11-卷积神经网络"><a href="#11-卷积神经网络" class="headerlink" title="11.卷积神经网络"></a>11.卷积神经网络</h1><h3 id="-3"><a href="#-3" class="headerlink" title></a></h3><p>至少在网络的一层中使用卷积运算来替代一般的矩阵乘法运算的神经网络</p><p>用于更好的处理图像问题(如人脸识别)</p><img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609190724426.png" class title="image-20250609190724426"><h1 id="12-卷积神经网路拓展"><a href="#12-卷积神经网路拓展" class="headerlink" title="12.卷积神经网路拓展"></a>12.卷积神经网路拓展</h1><ul><li><p>VGGNet</p></li><li><p>GoogLeNet</p></li><li><p>ResNet</p></li></ul><h1 id="13-循环神经网络（RNN）"><a href="#13-循环神经网络（RNN）" class="headerlink" title="13.循环神经网络（RNN）"></a>13.循环神经网络（RNN）</h1><img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609191228232.png" class title="image-20250609191228232"><h1 id="14-前馈网络不足"><a href="#14-前馈网络不足" class="headerlink" title="14.前馈网络不足"></a>14.前馈网络不足</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.连接存在层与层之间，每层的节点之间是无法连接的<br>2.输入输出维数固定，不能改变，无法处理变长的序列数据<br>3.假设每次输入独立，那么每次网络输出只依赖于当前输入<br></code></pre></td></tr></table></figure><h1 id="15-RNN存在的问题"><a href="#15-RNN存在的问题" class="headerlink" title="15.RNN存在的问题"></a>15.RNN存在的问题</h1><ul><li>有遗忘性</li><li>对于依赖近期信息的任务有良好的预测结果，而对依赖长时间信息的任务表现不好（例如梯度爆炸或梯度消失）</li></ul><h1 id="16-长期依赖问题"><a href="#16-长期依赖问题" class="headerlink" title="16.长期依赖问题"></a>16.长期依赖问题</h1><h3 id="-4"><a href="#-4" class="headerlink" title></a></h3><p><strong>循环神经网络在时间维度上非常深（梯度消失）</strong></p><h3 id="-5"><a href="#-5" class="headerlink" title></a></h3><p>改进：循环边改为线性依赖关系，或者增加非线性</p><h1 id="17-LSTM"><a href="#17-LSTM" class="headerlink" title="17.LSTM"></a>17.LSTM</h1><h3 id="-6"><a href="#-6" class="headerlink" title></a></h3><p>能处理长时间依赖的问题，但本质还是解决短时记忆问题的方法</p><ul><li>步骤<ul><li>Step1：决定丢弃信息</li><li>Step2：确定存放在细胞状态中的新信息</li><li>Step3：更新细胞状态</li><li>Step4：基于细胞状态得到输出</li></ul></li></ul><h1 id="18-自编码器"><a href="#18-自编码器" class="headerlink" title="18.自编码器"></a>18.自编码器</h1><h3 id="-7"><a href="#-7" class="headerlink" title></a></h3><p><em><strong>是神经网络的一种，经过训练后能尝试将输入复制到输出</strong></em></p><h3 id="-8"><a href="#-8" class="headerlink" title></a></h3><p>传统自编码器被用于降维或特征学习，今年与潜变量模型理论联系走向了生成式建模的道路</p><h1 id="19-生成对抗网络"><a href="#19-生成对抗网络" class="headerlink" title="19.生成对抗网络"></a>19.生成对抗网络</h1><h3 id="-9"><a href="#-9" class="headerlink" title></a></h3><p>两大模型：<strong>生成模型，对抗模型</strong></p><h1 id="20-降维"><a href="#20-降维" class="headerlink" title="20.降维"></a>20.降维</h1><h3 id="-10"><a href="#-10" class="headerlink" title></a></h3><p><strong>减少描述数据的特征数量的过程</strong>（一般方法为选择或提取）</p><h1 id="21-表示学习"><a href="#21-表示学习" class="headerlink" title="21.表示学习"></a>21.表示学习</h1><h3 id="-11"><a href="#-11" class="headerlink" title></a></h3><p><strong>通过在辅助监督学习任务上训练神经网络，从未标记的数据中提取特征</strong></p><h3 id="-12"><a href="#-12" class="headerlink" title></a></h3><p>word2vec是表示学习界的“Hello World”应用</p><img src="/2025/06/10/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250609193047034.png" class title="image-20250609193047034"><h1 id="22-统计学领域两大学派"><a href="#22-统计学领域两大学派" class="headerlink" title="22.统计学领域两大学派"></a>22.统计学领域两大学派</h1><h3 id="-13"><a href="#-13" class="headerlink" title></a></h3><p>频率学派与贝叶斯学派（两者对未知参数的推断和估计有截然不同的观点）</p><h3 id="-14"><a href="#-14" class="headerlink" title></a></h3><ul><li>频率学派：基于大样本理论，把概率看作频率的极限，通过信心来推断总体参数，过程客观可重复</li><li>贝叶斯学派：任何未知量都是随机的，应该用概率分布去描述</li></ul><h1 id="23-隐变量模型用于在网络模型上模拟世界上的客观存在"><a href="#23-隐变量模型用于在网络模型上模拟世界上的客观存在" class="headerlink" title="23.隐变量模型用于在网络模型上模拟世界上的客观存在"></a>23.隐变量模型用于在网络模型上模拟世界上的客观存在</h1><h1 id="24-用KL散度度量两个分布之间的差距，最大似然估计让人造分布与真实分布更接近"><a href="#24-用KL散度度量两个分布之间的差距，最大似然估计让人造分布与真实分布更接近" class="headerlink" title="24.用KL散度度量两个分布之间的差距，最大似然估计让人造分布与真实分布更接近"></a>24.用KL散度度量两个分布之间的差距，最大似然估计让人造分布与真实分布更接近</h1><h1 id="25-常见深度学习框架"><a href="#25-常见深度学习框架" class="headerlink" title="25.常见深度学习框架"></a>25.常见深度学习框架</h1><h3 id="-15"><a href="#-15" class="headerlink" title></a></h3><p><strong>PyTorch,Theano,Keras,TensorFlow,Caffe等</strong></p><h3 id="-16"><a href="#-16" class="headerlink" title></a></h3><p>PyTorch,Theano,Keras基于Python，Caffe基于C++</p><h1 id="26-强化学习特征：奖励延迟，行为序列学习，动态互动"><a href="#26-强化学习特征：奖励延迟，行为序列学习，动态互动" class="headerlink" title="26.强化学习特征：奖励延迟，行为序列学习，动态互动"></a>26.强化学习特征：奖励延迟，行为序列学习，动态互动</h1><h1 id="27-知识图谱本质是为了表示知识"><a href="#27-知识图谱本质是为了表示知识" class="headerlink" title="27.知识图谱本质是为了表示知识"></a>27.知识图谱本质是为了表示知识</h1><h1 id="28-知识图谱定义（无官方定义，下列定义为参考）"><a href="#28-知识图谱定义（无官方定义，下列定义为参考）" class="headerlink" title="28.知识图谱定义（无官方定义，下列定义为参考）"></a>28.知识图谱定义（无官方定义，下列定义为参考）</h1><h3 id="-17"><a href="#-17" class="headerlink" title></a></h3><p>有一些相互连接的实体和他们的属性构成的（即一条条知识组成，每条知识表示为一个SPO三元组）</p><p>ps:SPO&#x3D;Subject，Predicate，Object</p><h1 id="29-常见知识图谱项目"><a href="#29-常见知识图谱项目" class="headerlink" title="29.常见知识图谱项目"></a>29.常见知识图谱项目</h1><ul><li>Cyc</li><li>WordNet</li><li>ConceptNet</li><li>Wikidata</li><li>OpenKG.CN（Chinese）</li></ul><h1 id="30-知识图谱技术"><a href="#30-知识图谱技术" class="headerlink" title="30.知识图谱技术"></a>30.知识图谱技术</h1><ul><li>知识表示，知识问答，语义搜索，知识链接，知识推理等</li></ul><h1 id="31-什么是知识表示"><a href="#31-什么是知识表示" class="headerlink" title="31.什么是知识表示"></a>31.什么是知识表示</h1><h3 id="-18"><a href="#-18" class="headerlink" title></a></h3><p>研究怎样用计算机符号来表示人脑中的知识，以及怎样通过符号之间的运算来模拟人脑推理过程</p><h1 id="32-知识图谱分布式表示"><a href="#32-知识图谱分布式表示" class="headerlink" title="32.知识图谱分布式表示"></a>32.知识图谱分布式表示</h1><h3 id="-19"><a href="#-19" class="headerlink" title></a></h3><p>在保留语义的同时，将知识图谱中的实体和关系映射到连续的稠密的低维的向量空间</p><h1 id="33-知识融合案例"><a href="#33-知识融合案例" class="headerlink" title="33.知识融合案例"></a>33.知识融合案例</h1><ul><li>医疗健康</li><li>金融</li><li>电商</li><li>农业</li></ul>]]></content>
    
    
    <categories>
      
      <category>前沿技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>邹建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
